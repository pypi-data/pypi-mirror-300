from abc import ABC, abstractmethod
from typing import Generic, Tuple, Type, TypeVar

from pydantic import BaseModel

TRequest = TypeVar("TRequest", bound="AbstractRequest")
TResponse = TypeVar("TResponse", bound="AbstractResponse")
THandler = TypeVar("THandler", bound="AbstractHandler[TRequest, TResponse]")


class AbstractRequest(BaseModel):
    """
    Base class for all request models.

    This class serves as a base for creating specific request models
    that will be validated using Pydantic. It can be extended to add
    specific fields and validation rules as needed.
    """

    pass


class AbstractResponse(BaseModel):
    """
    Base class for all response models.

    This class serves as a base for creating specific response models
    that will be validated using Pydantic. It can be extended to add
    specific fields and validation rules as needed.
    """

    pass


class AbstractHandler(ABC, Generic[TRequest, TResponse]):
    """
    Abstract base class for all handlers.

    This class defines the structure for handling requests and responses
    and provides methods to retrieve the request and response types.

    Attributes:
        None
    """

    @classmethod
    def get_class_types(cls) -> Tuple[Type[TRequest], Type[TResponse]]:
        """
        Get the request and response types of the handler.

        Returns:
            Tuple[Type[TRequest], Type[TResponse]]: A tuple containing the
            request type and response type.
        """
        return cls.__orig_bases__[0].__args__

    @classmethod
    def get_request_type(cls) -> Type[TRequest]:
        """
        Get the request type of the handler.

        Returns:
            Type[TRequest]: The request type associated with the handler.
        """
        return cls.get_class_types()[0]

    @classmethod
    def get_response_type(cls) -> Type[TResponse]:
        """
        Get the response type of the handler.

        Returns:
            Type[TResponse]: The response type associated with the handler.
        """
        return cls.get_class_types()[1]

    @abstractmethod
    async def handle(self, request: TRequest, *args, **kwargs) -> TResponse:
        """
        Handle the incoming request and return a response.

        Args:
            request (TRequest): The incoming request to handle.
            *args: Additional positional arguments.
            **kwargs: Additional keyword arguments.

        Returns:
            TResponse: The response generated by handling the request.
        """
        pass
