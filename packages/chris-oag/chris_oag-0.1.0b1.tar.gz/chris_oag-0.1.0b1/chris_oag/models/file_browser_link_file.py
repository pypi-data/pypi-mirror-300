# coding: utf-8

"""
    ChRIS Research Integration System: Ultron BackEnd (CUBE) API

    The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.

    The version of the OpenAPI document: ${GITHUB_REF_NAME:1}
    Contact: dev@babymri.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FileBrowserLinkFile(BaseModel):
    """
    FileBrowserLinkFile
    """ # noqa: E501
    url: StrictStr
    id: StrictInt
    creation_date: datetime
    path: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = None
    fname: Optional[StrictStr] = None
    fsize: StrictInt = Field(description="Get the size of the file in bytes.")
    public: Optional[StrictBool] = None
    owner_username: StrictStr = Field(description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    file_resource: StrictStr = Field(description="Custom method to get the hyperlink to the actual file resource.")
    linked_folder: StrictStr = Field(description="Custom method to get the hyperlink to the linked folder if the ChRIS link points to a folder.")
    linked_file: StrictStr = Field(description="Custom method to get the hyperlink to the linked file if the ChRIS link points to a file.")
    parent_folder: StrictStr
    group_permissions: StrictStr
    user_permissions: StrictStr
    owner: StrictStr
    __properties: ClassVar[List[str]] = ["url", "id", "creation_date", "path", "fname", "fsize", "public", "owner_username", "file_resource", "linked_folder", "linked_file", "parent_folder", "group_permissions", "user_permissions", "owner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileBrowserLinkFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
            "id",
            "creation_date",
            "fsize",
            "owner_username",
            "file_resource",
            "linked_folder",
            "linked_file",
            "parent_folder",
            "group_permissions",
            "user_permissions",
            "owner",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileBrowserLinkFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "id": obj.get("id"),
            "creation_date": obj.get("creation_date"),
            "path": obj.get("path"),
            "fname": obj.get("fname"),
            "fsize": obj.get("fsize"),
            "public": obj.get("public"),
            "owner_username": obj.get("owner_username"),
            "file_resource": obj.get("file_resource"),
            "linked_folder": obj.get("linked_folder"),
            "linked_file": obj.get("linked_file"),
            "parent_folder": obj.get("parent_folder"),
            "group_permissions": obj.get("group_permissions"),
            "user_permissions": obj.get("user_permissions"),
            "owner": obj.get("owner")
        })
        return _obj


