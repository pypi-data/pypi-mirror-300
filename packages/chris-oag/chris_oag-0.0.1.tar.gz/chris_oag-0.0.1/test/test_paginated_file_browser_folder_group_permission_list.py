# coding: utf-8

"""
    ChRIS Research Integration System: Ultron BackEnd (CUBE) API

    The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.

    The version of the OpenAPI document: ${GITHUB_REF_NAME:1}
    Contact: dev@babymri.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chris_oag.models.paginated_file_browser_folder_group_permission_list import PaginatedFileBrowserFolderGroupPermissionList

class TestPaginatedFileBrowserFolderGroupPermissionList(unittest.TestCase):
    """PaginatedFileBrowserFolderGroupPermissionList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedFileBrowserFolderGroupPermissionList:
        """Test PaginatedFileBrowserFolderGroupPermissionList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedFileBrowserFolderGroupPermissionList`
        """
        model = PaginatedFileBrowserFolderGroupPermissionList()
        if include_optional:
            return PaginatedFileBrowserFolderGroupPermissionList(
                count = 123,
                next = 'http://api.example.org/accounts/?offset=400&limit=100',
                previous = 'http://api.example.org/accounts/?offset=200&limit=100',
                results = [
                    chris_oag.models.file_browser_folder_group_permission.FileBrowserFolderGroupPermission(
                        url = '', 
                        id = 56, 
                        permission = 'r', 
                        folder_id = 56, 
                        folder_path = '', 
                        group_id = 56, 
                        group_name = '', 
                        folder = '', 
                        group = '', )
                    ]
            )
        else:
            return PaginatedFileBrowserFolderGroupPermissionList(
        )
        """

    def testPaginatedFileBrowserFolderGroupPermissionList(self):
        """Test PaginatedFileBrowserFolderGroupPermissionList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
