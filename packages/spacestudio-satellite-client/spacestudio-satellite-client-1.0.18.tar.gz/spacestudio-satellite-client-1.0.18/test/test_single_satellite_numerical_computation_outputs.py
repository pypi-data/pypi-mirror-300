# coding: utf-8

"""
    spacestudio satellite API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_satellite_client.models.single_satellite_numerical_computation_outputs import SingleSatelliteNumericalComputationOutputs

class TestSingleSatelliteNumericalComputationOutputs(unittest.TestCase):
    """SingleSatelliteNumericalComputationOutputs unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SingleSatelliteNumericalComputationOutputs:
        """Test SingleSatelliteNumericalComputationOutputs
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SingleSatelliteNumericalComputationOutputs`
        """
        model = SingleSatelliteNumericalComputationOutputs()
        if include_optional:
            return SingleSatelliteNumericalComputationOutputs(
                ephemerides_frame = '',
                maneuver_model = '',
                number_of_burns = 1.337,
                thrust_duration = 1.337,
                used_propellant = 1.337,
                delta_v = 1.337,
                thruster_mean_duty_cycle = 1.337,
                total_warmup_duty_cycle = 1.337,
                mean_burn_duration_estimation = 1.337,
                mission_duration = 1.337,
                number_of_period = 1.337,
                total_impulse = 1.337,
                final_duty_cycle = 1.337,
                ephemeris = spacestudio_satellite_client.models.numerical_ephemeris.NumericalEphemeris(
                    ephemerides = [
                        [
                            1.337
                            ]
                        ], 
                    field_indexes = {
                        'key' : 1.337
                        }, ),
                final_orbit = spacestudio_satellite_client.models.orbit.Orbit(
                    id = '', 
                    name = '', 
                    read_only = True, 
                    scope = '', 
                    object_advanced = True, 
                    sun_synchronous = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = spacestudio_satellite_client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = spacestudio_satellite_client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), )
            )
        else:
            return SingleSatelliteNumericalComputationOutputs(
        )
        """

    def testSingleSatelliteNumericalComputationOutputs(self):
        """Test SingleSatelliteNumericalComputationOutputs"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
