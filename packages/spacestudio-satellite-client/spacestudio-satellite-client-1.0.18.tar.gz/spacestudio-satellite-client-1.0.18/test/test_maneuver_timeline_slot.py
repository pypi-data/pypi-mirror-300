# coding: utf-8

"""
    spacestudio satellite API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_satellite_client.models.maneuver_timeline_slot import ManeuverTimelineSlot

class TestManeuverTimelineSlot(unittest.TestCase):
    """ManeuverTimelineSlot unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManeuverTimelineSlot:
        """Test ManeuverTimelineSlot
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManeuverTimelineSlot`
        """
        model = ManeuverTimelineSlot()
        if include_optional:
            return ManeuverTimelineSlot(
                initial_orbit = spacestudio_satellite_client.models.orbit.Orbit(
                    id = '', 
                    name = '', 
                    read_only = True, 
                    scope = '', 
                    object_advanced = True, 
                    sun_synchronous = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = spacestudio_satellite_client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = spacestudio_satellite_client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                final_orbit = spacestudio_satellite_client.models.orbit.Orbit(
                    id = '', 
                    name = '', 
                    read_only = True, 
                    scope = '', 
                    object_advanced = True, 
                    sun_synchronous = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = spacestudio_satellite_client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = spacestudio_satellite_client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                maneuver = spacestudio_satellite_client.models.maneuver.Maneuver(),
                computation = spacestudio_satellite_client.models.computation.computation(
                    id = '', 
                    errors = [
                        ''
                        ], 
                    warnings = [
                        ''
                        ], 
                    progress = 1.337, 
                    status = 'PENDING', 
                    comparison_items = [
                        spacestudio_satellite_client.models.comparison_item.ComparisonItem(
                            input = '', 
                            field = '', 
                            min = 1.337, 
                            max = 1.337, 
                            step = 1.337, 
                            points = 56, 
                            ids = [
                                ''
                                ], 
                            value = spacestudio_satellite_client.models.value.value(), 
                            values = [
                                None
                                ], )
                        ], 
                    outputs = spacestudio_satellite_client.models.computation_outputs.ComputationOutputs(), 
                    baseline = True, ),
                computation_mode = 'ANALYTICAL',
                need_recomputation = True
            )
        else:
            return ManeuverTimelineSlot(
        )
        """

    def testManeuverTimelineSlot(self):
        """Test ManeuverTimelineSlot"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
