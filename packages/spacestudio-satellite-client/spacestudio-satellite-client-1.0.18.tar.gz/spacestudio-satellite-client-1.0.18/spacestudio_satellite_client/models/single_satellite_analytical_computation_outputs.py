# coding: utf-8

"""
    spacestudio satellite API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from spacestudio_satellite_client.models.computation_outputs import ComputationOutputs
from spacestudio_satellite_client.models.computation_type import ComputationType
from typing import Optional, Set
from typing_extensions import Self

class SingleSatelliteAnalyticalComputationOutputs(ComputationOutputs):
    """
    SingleSatelliteAnalyticalComputationOutputs
    """ # noqa: E501
    drag_perturbation_enabled: Optional[StrictBool] = Field(default=None, description="TODO", alias="dragPerturbationEnabled")
    maneuver_model: Optional[StrictStr] = Field(default=None, description="TODO", alias="maneuverModel")
    drag_to_thrust_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="dragToThrustRatio")
    delta_v: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="deltaV")
    maneuvering_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="maneuveringDuration")
    mission_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="missionDuration")
    thrust_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="thrustDuration")
    thruster_mean_duty_cycle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="thrusterMeanDutyCycle")
    total_impulse: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="totalImpulse")
    used_propellant: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="usedPropellant")
    number_of_burns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="numberOfBurns")
    mean_burn_duration_estimation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="meanBurnDurationEstimation")
    mean_atmospheric_density: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="meanAtmosphericDensity")
    mean_drag: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="meanDrag")
    mean_drag_acceleration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="meanDragAcceleration")
    drag_delta_v: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TODO", alias="dragDeltaV")
    __properties: ClassVar[List[str]] = ["type", "dragPerturbationEnabled", "maneuverModel", "dragToThrustRatio", "deltaV", "maneuveringDuration", "missionDuration", "thrustDuration", "thrusterMeanDutyCycle", "totalImpulse", "usedPropellant", "numberOfBurns", "meanBurnDurationEstimation", "meanAtmosphericDensity", "meanDrag", "meanDragAcceleration", "dragDeltaV"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SingleSatelliteAnalyticalComputationOutputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SingleSatelliteAnalyticalComputationOutputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "dragPerturbationEnabled": obj.get("dragPerturbationEnabled"),
            "maneuverModel": obj.get("maneuverModel"),
            "dragToThrustRatio": obj.get("dragToThrustRatio"),
            "deltaV": obj.get("deltaV"),
            "maneuveringDuration": obj.get("maneuveringDuration"),
            "missionDuration": obj.get("missionDuration"),
            "thrustDuration": obj.get("thrustDuration"),
            "thrusterMeanDutyCycle": obj.get("thrusterMeanDutyCycle"),
            "totalImpulse": obj.get("totalImpulse"),
            "usedPropellant": obj.get("usedPropellant"),
            "numberOfBurns": obj.get("numberOfBurns"),
            "meanBurnDurationEstimation": obj.get("meanBurnDurationEstimation"),
            "meanAtmosphericDensity": obj.get("meanAtmosphericDensity"),
            "meanDrag": obj.get("meanDrag"),
            "meanDragAcceleration": obj.get("meanDragAcceleration"),
            "dragDeltaV": obj.get("dragDeltaV")
        })
        return _obj


