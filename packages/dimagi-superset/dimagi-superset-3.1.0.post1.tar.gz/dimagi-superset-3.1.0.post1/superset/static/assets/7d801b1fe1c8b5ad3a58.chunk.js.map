{"version":3,"file":"7d801b1fe1c8b5ad3a58.chunk.js","mappings":"yOA+Bc,SAAUA,EAAoBC,GAAkC,IAAHC,EACzE,MAAM,KACJC,EAAI,SACJC,EAAQ,OACRC,EAAM,MACNC,EAAK,YACLC,EAAW,iBACXC,EAAgB,mBAChBC,EAAkB,iBAClBC,EAAgB,mBAChBC,EAAkB,gBAClBC,EAAe,YACfC,EAAW,SACXC,GACEb,GACE,aAAEc,EAAY,YAAEC,GAAgBZ,GAE/Ba,EAAOC,IAAYC,EAAAA,EAAAA,UAA+B,MAAZJ,EAAAA,EAAgB,IAEvDK,EAAgBH,IACpB,MAAMI,GAAwBC,EAAAA,EAAAA,GAAsBL,GACpDC,EAASG,GACT,MAAME,EAA+B,CAAC,EAClCF,EAAYG,SACdD,EAAcE,oBAAsBJ,GAGtCd,EAAY,CACVM,YAAa,CAAEI,MAAOI,EAAYG,OAASH,EAAc,MACzDE,iBACA,GAGJG,EAAAA,EAAAA,YAAU,KACRN,EAAaP,EAAYI,MAAM,GAC9B,CAACU,KAAKC,UAAUf,EAAYI,OAAQD,KAEvCU,EAAAA,EAAAA,YAAU,KACRN,EAAyB,MAAZL,EAAAA,EAAgB,KAAK,GAGjC,CAACY,KAAKC,UAAUb,GAAeC,IAElC,MAAMa,GAAWP,EAAAA,EAAAA,GAAclB,EAAS0B,SAASC,IAAIC,EAAAA,GAC/CF,EAAqB,OAAX5B,EAAA2B,EAAS,KAAT3B,EAAasB,OAASK,EAAS,GAAK,KAE9CI,EAAWH,EACb3B,EAAK+B,QAAOC,GAAOL,EAAQM,SAASD,EAAIE,eACxClC,EAEEmC,EAAUnC,EAAO8B,EAAW,GAE5BM,EACe,IAAnBD,EAAQd,QACJgB,EAAAA,EAAAA,GAAE,eACFC,EAAAA,EAAAA,IAAG,YAAa,aAAcH,EAAQd,OAAQc,EAAQd,QAEtDkB,EAA8B,CAAC,EACjC7B,EAAY8B,kBACdD,EAAaE,OACXC,EAAAA,EAAAA,IAACC,EAAAA,GAAa,CAACC,OAAQlC,EAAYmC,gBAChCnC,EAAY8B,kBAInB,MAAMM,EAAUX,EAAQP,KACrBI,IACC,MAAQE,YAAaa,EAAYC,aAAcC,GAAgBjB,EAC/D,MAAO,CACLkB,MAAkB,MAAXD,EAAAA,EAAeF,EACtBjC,MAAOiC,EACR,IAGL,OACEL,EAAAA,EAAAA,IAACS,EAAAA,GAAiB,CAACjD,OAAQA,EAAQC,MAAOA,IACxCuC,EAAAA,EAAAA,IAACU,EAAAA,IAAcC,EAAAA,EAAAA,GAAA,CACbR,eAAgBnC,EAAYmC,gBACxBN,IAEJG,EAAAA,EAAAA,IAACY,EAAAA,GAAM,CACLC,YAAU,EACVzC,MAAOA,EACP0C,YAAapB,EACbqB,KAAM5C,EAAc,gBAAa6C,EAEjCC,SAAU1C,EACV2C,OAAQpD,EACRqD,QAAStD,EACTuD,aAAczD,EACd0D,aAAczD,EACd0D,IAAKrD,EACLmC,QAASA,EACTmB,wBAAyBxD,KAKnC,C,wFC3GO,MAAMyD,EAAmB,EAEnBf,EAAoBgB,EAAAA,GAAOC,GAA4B;gBACpDC,IAAA,IAAC,OAAEnE,GAAQmE,EAAA,OAAKnE,CAAM;WAC3BoE,IAAA,IAAC,MAAEnE,GAAOmE,EAAA,OAAMnE,IAAU+D,EAAmB,OAAS,GAAG/D,KAAS;EAGhEiD,GAAiBe,EAAAA,EAAAA,IAAOI,EAAAA,EAAS;;;;EAMjC5B,EAAgBwB,EAAAA,GAAOC,GAElC;WACSI,IAAA,IAAAC,EAAA,IAAC,MAAEC,EAAK,OAAE9B,EAAS,SAAS4B,EAAA,OAAyB,OAAzBC,EAAKC,EAAMC,OAAO/B,SAAO,EAApB6B,EAAsBG,IAAI","sources":["webpack://superset/./src/filters/components/GroupBy/GroupByFilterPlugin.tsx","webpack://superset/./src/filters/components/common.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ExtraFormData,\n  getColumnLabel,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { FormItemProps } from 'antd/lib/form';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';\nimport { PluginFilterGroupByProps } from './types';\n\nexport default function PluginFilterGroupBy(props: PluginFilterGroupByProps) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setHoveredFilter,\n    unsetHoveredFilter,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    setFilterActive,\n    filterState,\n    inputRef,\n  } = props;\n  const { defaultValue, multiSelect } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n    const extraFormData: ExtraFormData = {};\n    if (resultValue.length) {\n      extraFormData.interactive_groupby = resultValue;\n    }\n\n    setDataMask({\n      filterState: { value: resultValue.length ? resultValue : null },\n      extraFormData,\n    });\n  };\n\n  useEffect(() => {\n    handleChange(filterState.value);\n  }, [JSON.stringify(filterState.value), multiSelect]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue), multiSelect]);\n\n  const groupbys = ensureIsArray(formData.groupby).map(getColumnLabel);\n  const groupby = groupbys[0]?.length ? groupbys[0] : null;\n\n  const withData = groupby\n    ? data.filter(row => groupby.includes(row.column_name as string))\n    : data;\n\n  const columns = data ? withData : [];\n\n  const placeholderText =\n    columns.length === 0\n      ? t('No columns')\n      : tn('%s option', '%s options', columns.length, columns.length);\n\n  const formItemData: FormItemProps = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = (\n      <StatusMessage status={filterState.validateStatus}>\n        {filterState.validateMessage}\n      </StatusMessage>\n    );\n  }\n  const options = columns.map(\n    (row: { column_name: string; verbose_name: string | null }) => {\n      const { column_name: columnName, verbose_name: verboseName } = row;\n      return {\n        label: verboseName ?? columnName,\n        value: columnName,\n      };\n    },\n  );\n  return (\n    <FilterPluginStyle height={height} width={width}>\n      <StyledFormItem\n        validateStatus={filterState.validateStatus}\n        {...formItemData}\n      >\n        <Select\n          allowClear\n          value={value}\n          placeholder={placeholderText}\n          mode={multiSelect ? 'multiple' : undefined}\n          // @ts-ignore\n          onChange={handleChange}\n          onBlur={unsetFocusedFilter}\n          onFocus={setFocusedFilter}\n          onMouseEnter={setHoveredFilter}\n          onMouseLeave={unsetHoveredFilter}\n          ref={inputRef}\n          options={options}\n          onDropdownVisibleChange={setFilterActive}\n        />\n      </StyledFormItem>\n    </FilterPluginStyle>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { PluginFilterStylesProps } from './types';\nimport FormItem from '../../components/Form/FormItem';\n\nexport const RESPONSIVE_WIDTH = 0;\n\nexport const FilterPluginStyle = styled.div<PluginFilterStylesProps>`\n  min-height: ${({ height }) => height}px;\n  width: ${({ width }) => (width === RESPONSIVE_WIDTH ? '100%' : `${width}px`)};\n`;\n\nexport const StyledFormItem = styled(FormItem)`\n  &.ant-row.ant-form-item {\n    margin: 0;\n  }\n`;\n\nexport const StatusMessage = styled.div<{\n  status?: 'error' | 'warning' | 'info';\n}>`\n  color: ${({ theme, status = 'error' }) => theme.colors[status]?.base};\n`;\n"],"names":["PluginFilterGroupBy","props","_groupbys$","data","formData","height","width","setDataMask","setHoveredFilter","unsetHoveredFilter","setFocusedFilter","unsetFocusedFilter","setFilterActive","filterState","inputRef","defaultValue","multiSelect","value","setValue","useState","handleChange","resultValue","ensureIsArray","extraFormData","length","interactive_groupby","useEffect","JSON","stringify","groupbys","groupby","map","getColumnLabel","withData","filter","row","includes","column_name","columns","placeholderText","t","tn","formItemData","validateMessage","extra","___EmotionJSX","StatusMessage","status","validateStatus","options","columnName","verbose_name","verboseName","label","FilterPluginStyle","StyledFormItem","_extends","Select","allowClear","placeholder","mode","undefined","onChange","onBlur","onFocus","onMouseEnter","onMouseLeave","ref","onDropdownVisibleChange","RESPONSIVE_WIDTH","styled","div","_ref","_ref2","FormItem","_ref3","_theme$colors$status","theme","colors","base"],"sourceRoot":""}