{"version":3,"file":"2f6d90ef4e08b711cb25.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/MetadataBar/ContentType.ts","webpack://superset/./src/components/MetadataBar/ContentConfig.tsx","webpack://superset/./src/components/MetadataBar/MetadataBar.tsx","webpack://superset/./src/components/MetadataBar/index.tsx","webpack://superset/./src/components/DynamicEditableTitle/index.tsx","webpack://superset/./src/components/PageHeaderWithActions/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum MetadataType {\n  DASHBOARDS = 'dashboards',\n  DESCRIPTION = 'description',\n  LAST_MODIFIED = 'lastModified',\n  OWNER = 'owner',\n  ROWS = 'rows',\n  SQL = 'sql',\n  TABLE = 'table',\n  TAGS = 'tags',\n}\n\nexport type Dashboards = {\n  type: MetadataType.DASHBOARDS;\n  title: string;\n  description?: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Description = {\n  type: MetadataType.DESCRIPTION;\n  value: string;\n  onClick?: (type: string) => void;\n};\n\nexport type LastModified = {\n  type: MetadataType.LAST_MODIFIED;\n  value: string;\n  modifiedBy: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Owner = {\n  type: MetadataType.OWNER;\n  createdBy: string;\n  owners?: string[];\n  createdOn: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Rows = {\n  type: MetadataType.ROWS;\n  title: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Sql = {\n  type: MetadataType.SQL;\n  title: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Table = {\n  type: MetadataType.TABLE;\n  title: string;\n  onClick?: (type: string) => void;\n};\n\nexport type Tags = {\n  type: MetadataType.TAGS;\n  values: string[];\n  onClick?: (type: string) => void;\n};\n\nexport type ContentType =\n  | Dashboards\n  | Description\n  | LastModified\n  | Owner\n  | Rows\n  | Sql\n  | Table\n  | Tags;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { ContentType, MetadataType } from '.';\n\nconst Header = styled.div`\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\n\nconst Info = ({\n  text,\n  header,\n}: {\n  text?: string | string[];\n  header?: string;\n}) => {\n  const values = ensureIsArray(text);\n  return (\n    <>\n      {header && <Header>{header}</Header>}\n      {values.map(value => (\n        <div key={value}>{value}</div>\n      ))}\n    </>\n  );\n};\n\nconst config = (contentType: ContentType) => {\n  const { type } = contentType;\n\n  /**\n   * Tooltips are very similar. It's pretty much blocks\n   * of header/text pairs. That's why they are implemented here.\n   * If more complex tooltips emerge, then we should extract the different\n   * types of tooltips to their own components and reference them here.\n   */\n\n  switch (type) {\n    case MetadataType.DASHBOARDS:\n      return {\n        icon: Icons.FundProjectionScreenOutlined,\n        title: contentType.title,\n        tooltip: contentType.description ? (\n          <div>\n            <Info header={contentType.title} text={contentType.description} />\n          </div>\n        ) : undefined,\n      };\n\n    case MetadataType.DESCRIPTION:\n      return {\n        icon: Icons.BookOutlined,\n        title: contentType.value,\n      };\n\n    case MetadataType.LAST_MODIFIED:\n      return {\n        icon: Icons.EditOutlined,\n        title: contentType.value,\n        tooltip: (\n          <div>\n            <Info header={t('Last modified')} text={contentType.value} />\n            <Info header={t('Modified by')} text={contentType.modifiedBy} />\n          </div>\n        ),\n      };\n\n    case MetadataType.OWNER:\n      return {\n        icon: Icons.UserOutlined,\n        title: contentType.createdBy,\n        tooltip: (\n          <div>\n            <Info header={t('Created by')} text={contentType.createdBy} />\n            {!!contentType.owners && (\n              <Info header={t('Owners')} text={contentType.owners} />\n            )}\n            <Info header={t('Created on')} text={contentType.createdOn} />\n          </div>\n        ),\n      };\n\n    case MetadataType.ROWS:\n      return {\n        icon: Icons.InsertRowBelowOutlined,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.SQL:\n      return {\n        icon: Icons.ConsoleSqlOutlined,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.TABLE:\n      return {\n        icon: Icons.Table,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.TAGS:\n      return {\n        icon: Icons.TagsOutlined,\n        title: contentType.values.join(', '),\n        tooltip: (\n          <div>\n            <Info header={t('Tags')} text={contentType.values} />\n          </div>\n        ),\n      };\n\n    default:\n      throw Error(`Invalid type provided: ${type}`);\n  }\n};\n\nexport { config };\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { uniqWith } from 'lodash';\nimport { styled } from '@superset-ui/core';\nimport { Tooltip, TooltipPlacement } from 'src/components/Tooltip';\nimport { ContentType } from './ContentType';\nimport { config } from './ContentConfig';\n\nexport const MIN_NUMBER_ITEMS = 2;\nexport const MAX_NUMBER_ITEMS = 6;\n\nconst HORIZONTAL_PADDING = 12;\nconst VERTICAL_PADDING = 8;\nconst ICON_PADDING = 8;\nconst SPACE_BETWEEN_ITEMS = 16;\nconst ICON_WIDTH = 16;\nconst TEXT_MIN_WIDTH = 70;\nconst TEXT_MAX_WIDTH = 150;\nconst ORDER = {\n  dashboards: 0,\n  table: 1,\n  sql: 2,\n  rows: 3,\n  tags: 4,\n  description: 5,\n  owner: 6,\n  lastModified: 7,\n};\n\nconst Bar = styled.div<{ count: number }>`\n  ${({ theme, count }) => `\n    display: flex;\n    align-items: center;\n    padding: ${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px;\n    background-color: ${theme.colors.grayscale.light4};\n    color: ${theme.colors.grayscale.base};\n    font-size: ${theme.typography.sizes.s}px;\n    min-width: ${\n      HORIZONTAL_PADDING * 2 +\n      (ICON_WIDTH + SPACE_BETWEEN_ITEMS) * count -\n      SPACE_BETWEEN_ITEMS\n    }px;\n    border-radius: ${theme.borderRadius}px;\n    line-height: 1;\n  `}\n`;\n\nconst StyledItem = styled.div<{\n  collapsed: boolean;\n  last: boolean;\n  onClick?: () => void;\n}>`\n  ${({ theme, collapsed, last, onClick }) => `\n    display: flex;\n    align-items: center;\n    max-width: ${\n      ICON_WIDTH +\n      ICON_PADDING +\n      TEXT_MAX_WIDTH +\n      (last ? 0 : SPACE_BETWEEN_ITEMS)\n    }px;\n    min-width: ${\n      collapsed\n        ? ICON_WIDTH + (last ? 0 : SPACE_BETWEEN_ITEMS)\n        : ICON_WIDTH +\n          ICON_PADDING +\n          TEXT_MIN_WIDTH +\n          (last ? 0 : SPACE_BETWEEN_ITEMS)\n    }px;\n    padding-right: ${last ? 0 : SPACE_BETWEEN_ITEMS}px;\n    cursor: ${onClick ? 'pointer' : 'default'};\n    & .metadata-icon {\n      color: ${\n        onClick && collapsed\n          ? theme.colors.primary.base\n          : theme.colors.grayscale.base\n      };\n      padding-right: ${collapsed ? 0 : ICON_PADDING}px;\n      & .anticon {\n        line-height: 0;\n      }\n    }\n    & .metadata-text {\n      min-width: ${TEXT_MIN_WIDTH}px;\n      overflow: hidden;\n      text-overflow: ${collapsed ? 'unset' : 'ellipsis'};\n      white-space: nowrap;\n      text-decoration: ${onClick ? 'underline' : 'none'};\n      line-height: 1.4;\n    }\n  `}\n`;\n\n// Make sure big tootips are truncated\nconst TootipContent = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 20;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Item = ({\n  barWidth,\n  contentType,\n  collapsed,\n  last = false,\n  tooltipPlacement,\n}: {\n  barWidth: number | undefined;\n  contentType: ContentType;\n  collapsed: boolean;\n  last?: boolean;\n  tooltipPlacement: TooltipPlacement;\n}) => {\n  const { icon, title, tooltip = title } = config(contentType);\n  const [isTruncated, setIsTruncated] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const Icon = icon;\n  const { type, onClick } = contentType;\n\n  useEffect(() => {\n    setIsTruncated(\n      ref.current ? ref.current.scrollWidth > ref.current.clientWidth : false,\n    );\n  }, [barWidth, setIsTruncated, contentType]);\n\n  const content = (\n    <StyledItem\n      collapsed={collapsed}\n      last={last}\n      onClick={onClick ? () => onClick(type) : undefined}\n    >\n      <Icon iconSize=\"l\" className=\"metadata-icon\" />\n      {!collapsed && (\n        <span ref={ref} className=\"metadata-text\">\n          {title}\n        </span>\n      )}\n    </StyledItem>\n  );\n  return isTruncated || collapsed || (tooltip && tooltip !== title) ? (\n    <Tooltip\n      placement={tooltipPlacement}\n      title={<TootipContent>{tooltip}</TootipContent>}\n    >\n      {content}\n    </Tooltip>\n  ) : (\n    content\n  );\n};\n\nexport interface MetadataBarProps {\n  /**\n   * Array of content type configurations. To see the available properties\n   * for each content type, check {@link ContentType}\n   */\n  items: ContentType[];\n  /**\n   * Antd tooltip placement. To see available values, check {@link TooltipPlacement}.\n   * Defaults to \"top\".\n   */\n  tooltipPlacement?: TooltipPlacement;\n}\n\n/**\n * The metadata bar component is used to display additional information about an entity.\n * Content types are predefined and consistent across the whole app. This means that\n * they will be displayed and behave in a consistent manner, keeping the same ordering,\n * information formatting, and interactions.\n * To extend the list of content types, a developer needs to request the inclusion of the new type in the design system.\n * This process is important to make sure the new type is reviewed by the design team, improving Superset consistency.\n */\nconst MetadataBar = ({ items, tooltipPlacement = 'top' }: MetadataBarProps) => {\n  const [width, setWidth] = useState<number>();\n  const [collapsed, setCollapsed] = useState(false);\n  const uniqueItems = uniqWith(items, (a, b) => a.type === b.type);\n  const sortedItems = uniqueItems.sort((a, b) => ORDER[a.type] - ORDER[b.type]);\n  const count = sortedItems.length;\n  if (count < MIN_NUMBER_ITEMS) {\n    throw Error('The minimum number of items for the metadata bar is 2.');\n  }\n  if (count > MAX_NUMBER_ITEMS) {\n    throw Error('The maximum number of items for the metadata bar is 6.');\n  }\n\n  const onResize = useCallback(\n    width => {\n      // Calculates the breakpoint width to collapse the bar.\n      // The last item does not have a space, so we subtract SPACE_BETWEEN_ITEMS from the total.\n      const breakpoint =\n        (ICON_WIDTH + ICON_PADDING + TEXT_MIN_WIDTH + SPACE_BETWEEN_ITEMS) *\n          count -\n        SPACE_BETWEEN_ITEMS;\n      setWidth(width);\n      setCollapsed(Boolean(width && width < breakpoint));\n    },\n    [count],\n  );\n\n  const { ref } = useResizeDetector({ onResize });\n\n  return (\n    <Bar ref={ref} count={count} data-test=\"metadata-bar\">\n      {sortedItems.map((item, index) => (\n        <Item\n          barWidth={width}\n          key={index}\n          contentType={item}\n          collapsed={collapsed}\n          last={index === count - 1}\n          tooltipPlacement={tooltipPlacement}\n        />\n      ))}\n    </Bar>\n  );\n};\n\nexport default MetadataBar;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport MetadataBar, { MIN_NUMBER_ITEMS, MAX_NUMBER_ITEMS } from './MetadataBar';\n\nexport type { MetadataBarProps } from './MetadataBar';\n\nexport default MetadataBar;\n\nexport { MIN_NUMBER_ITEMS, MAX_NUMBER_ITEMS };\n\nexport * from './ContentType';\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { css, SupersetTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useResizeDetector } from 'react-resize-detector';\n\nexport type DynamicEditableTitleProps = {\n  title: string;\n  placeholder: string;\n  onSave: (title: string) => void;\n  canEdit: boolean;\n  label: string | undefined;\n};\n\nconst titleStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  font-size: ${theme.typography.sizes.xl}px;\n  font-weight: ${theme.typography.weights.bold};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  & .dynamic-title,\n  & .dynamic-title-input {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .dynamic-title {\n    cursor: default;\n  }\n  & .dynamic-title-input {\n    border: none;\n    padding: 0;\n    outline: none;\n\n    &::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n\n  & .input-sizer {\n    position: absolute;\n    left: -9999px;\n    display: inline-block;\n  }\n`;\n\nexport const DynamicEditableTitle = ({\n  title,\n  placeholder,\n  onSave,\n  canEdit,\n  label,\n}: DynamicEditableTitleProps) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState(title || '');\n  const contentRef = useRef<HTMLInputElement>(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const { width: inputWidth, ref: sizerRef } = useResizeDetector();\n  const { width: containerWidth, ref: containerRef } = useResizeDetector({\n    refreshMode: 'debounce',\n  });\n\n  useEffect(() => {\n    setCurrentTitle(title);\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing && contentRef?.current) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n      }\n    }\n  }, [isEditing]);\n\n  // a trick to make the input grow when user types text\n  // we make additional span component, place it somewhere out of view and copy input\n  // then we can measure the width of that span to resize the input element\n  useLayoutEffect(() => {\n    if (sizerRef?.current) {\n      sizerRef.current.textContent = currentTitle || placeholder;\n    }\n  }, [currentTitle, placeholder, sizerRef]);\n\n  useEffect(() => {\n    if (\n      contentRef.current &&\n      contentRef.current.scrollWidth > contentRef.current.clientWidth\n    ) {\n      setShowTooltip(true);\n    } else {\n      setShowTooltip(false);\n    }\n  }, [inputWidth, containerWidth]);\n\n  const handleClick = useCallback(() => {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    setIsEditing(true);\n  }, [canEdit, isEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!canEdit) {\n      return;\n    }\n    const formattedTitle = currentTitle.trim();\n    setCurrentTitle(formattedTitle);\n    if (title !== formattedTitle) {\n      onSave(formattedTitle);\n    }\n    setIsEditing(false);\n  }, [canEdit, currentTitle, onSave, title]);\n\n  const handleChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!canEdit || !isEditing) {\n        return;\n      }\n      setCurrentTitle(ev.target.value);\n    },\n    [canEdit, isEditing],\n  );\n\n  const handleKeyPress = useCallback(\n    (ev: KeyboardEvent<HTMLInputElement>) => {\n      if (!canEdit) {\n        return;\n      }\n      if (ev.key === 'Enter') {\n        ev.preventDefault();\n        contentRef.current?.blur();\n      }\n    },\n    [canEdit],\n  );\n\n  return (\n    <div css={titleStyles} ref={containerRef}>\n      <Tooltip\n        id=\"title-tooltip\"\n        title={showTooltip && currentTitle && !isEditing ? currentTitle : null}\n      >\n        {canEdit ? (\n          <input\n            data-test=\"editable-title-input\"\n            className=\"dynamic-title-input\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            value={currentTitle}\n            css={css`\n              cursor: ${isEditing ? 'text' : 'pointer'};\n\n              ${inputWidth &&\n              inputWidth > 0 &&\n              css`\n                width: ${inputWidth + 1}px;\n              `}\n            `}\n          />\n        ) : (\n          <span\n            className=\"dynamic-title\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            data-test=\"editable-title\"\n          >\n            {currentTitle}\n          </span>\n        )}\n      </Tooltip>\n      <span ref={sizerRef} className=\"input-sizer\" aria-hidden tabIndex={-1} />\n    </div>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, ReactElement } from 'react';\nimport { css, SupersetTheme, t, useTheme } from '@superset-ui/core';\nimport { AntdDropdown, AntdDropdownProps } from 'src/components';\nimport { TooltipPlacement } from 'src/components/Tooltip';\nimport {\n  DynamicEditableTitle,\n  DynamicEditableTitleProps,\n} from '../DynamicEditableTitle';\nimport CertifiedBadge, { CertifiedBadgeProps } from '../CertifiedBadge';\nimport FaveStar, { FaveStarProps } from '../FaveStar';\nimport Icons from '../Icons';\nimport Button from '../Button';\n\nexport const menuTriggerStyles = (theme: SupersetTheme) => css`\n  width: ${theme.gridUnit * 8}px;\n  height: ${theme.gridUnit * 8}px;\n  padding: 0;\n  border: 1px solid ${theme.colors.primary.dark2};\n\n  &.ant-btn > span.anticon {\n    line-height: 0;\n    transition: inherit;\n  }\n\n  &:hover:not(:focus) > span.anticon {\n    color: ${theme.colors.primary.light1};\n  }\n`;\n\nconst headerStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  background-color: ${theme.colors.grayscale.light5};\n  height: ${theme.gridUnit * 16}px;\n  padding: 0 ${theme.gridUnit * 4}px;\n\n  .editable-title {\n    overflow: hidden;\n\n    & > input[type='button'],\n    & > span {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 100%;\n      white-space: nowrap;\n    }\n  }\n\n  span[role='button'] {\n    display: flex;\n    height: 100%;\n  }\n\n  .title-panel {\n    display: flex;\n    align-items: center;\n    min-width: 0;\n    margin-right: ${theme.gridUnit * 12}px;\n  }\n\n  .right-button-panel {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst buttonsStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  align-items: center;\n  padding-left: ${theme.gridUnit * 2}px;\n\n  & .fave-unfave-icon {\n    padding: 0 ${theme.gridUnit}px;\n\n    &:first-of-type {\n      padding-left: 0;\n    }\n  }\n`;\n\nconst additionalActionsContainerStyles = (theme: SupersetTheme) => css`\n  margin-left: ${theme.gridUnit * 2}px;\n`;\n\nexport type PageHeaderWithActionsProps = {\n  editableTitleProps: DynamicEditableTitleProps;\n  showTitlePanelItems: boolean;\n  certificatiedBadgeProps?: CertifiedBadgeProps;\n  showFaveStar: boolean;\n  showMenuDropdown?: boolean;\n  faveStarProps: FaveStarProps;\n  titlePanelAdditionalItems: ReactNode;\n  rightPanelAdditionalItems: ReactNode;\n  additionalActionsMenu: ReactElement;\n  menuDropdownProps: Omit<AntdDropdownProps, 'overlay'>;\n  tooltipProps?: {\n    text?: string;\n    placement?: TooltipPlacement;\n  };\n};\n\nexport const PageHeaderWithActions = ({\n  editableTitleProps,\n  showTitlePanelItems,\n  certificatiedBadgeProps,\n  showFaveStar,\n  faveStarProps,\n  titlePanelAdditionalItems,\n  rightPanelAdditionalItems,\n  additionalActionsMenu,\n  menuDropdownProps,\n  showMenuDropdown = true,\n  tooltipProps,\n}: PageHeaderWithActionsProps) => {\n  const theme = useTheme();\n  return (\n    <div css={headerStyles} className=\"header-with-actions\">\n      <div className=\"title-panel\">\n        <DynamicEditableTitle {...editableTitleProps} />\n        {showTitlePanelItems && (\n          <div css={buttonsStyles}>\n            {certificatiedBadgeProps?.certifiedBy && (\n              <CertifiedBadge {...certificatiedBadgeProps} />\n            )}\n            {showFaveStar && <FaveStar {...faveStarProps} />}\n            {titlePanelAdditionalItems}\n          </div>\n        )}\n      </div>\n      <div className=\"right-button-panel\">\n        {rightPanelAdditionalItems}\n        <div css={additionalActionsContainerStyles}>\n          {showMenuDropdown && (\n            <AntdDropdown\n              trigger={['click']}\n              overlay={additionalActionsMenu}\n              {...menuDropdownProps}\n            >\n              <Button\n                css={menuTriggerStyles}\n                buttonStyle=\"tertiary\"\n                aria-label={t('Menu actions trigger')}\n                tooltip={tooltipProps?.text}\n                placement={tooltipProps?.placement}\n                data-test=\"actions-trigger\"\n              >\n                <Icons.MoreHoriz\n                  iconColor={theme.colors.primary.dark2}\n                  iconSize=\"l\"\n                />\n              </Button>\n            </AntdDropdown>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["MetadataType","Header","styled","div","_ref","theme","typography","weights","bold","Info","_ref2","text","header","values","ensureIsArray","___EmotionJSX","React","map","value","key","SPACE_BETWEEN_ITEMS","ORDER","dashboards","table","sql","rows","tags","description","owner","lastModified","Bar","count","colors","grayscale","light4","base","sizes","s","HORIZONTAL_PADDING","borderRadius","StyledItem","collapsed","last","onClick","ICON_WIDTH","primary","TootipContent","Item","_ref3","barWidth","contentType","tooltipPlacement","icon","title","tooltip","config","type","DASHBOARDS","Icons","FundProjectionScreenOutlined","undefined","DESCRIPTION","BookOutlined","LAST_MODIFIED","EditOutlined","t","modifiedBy","OWNER","UserOutlined","createdBy","owners","createdOn","ROWS","InsertRowBelowOutlined","SQL","ConsoleSqlOutlined","TABLE","Table","TAGS","TagsOutlined","join","Error","isTruncated","setIsTruncated","useState","ref","useRef","Icon","useEffect","current","scrollWidth","clientWidth","content","iconSize","className","Tooltip","placement","_ref4","items","width","setWidth","setCollapsed","sortedItems","_uniqWith","a","b","sort","length","onResize","useCallback","breakpoint","Boolean","useResizeDetector","item","index","titleStyles","css","xl","light1","DynamicEditableTitle","placeholder","onSave","canEdit","label","isEditing","setIsEditing","currentTitle","setCurrentTitle","contentRef","showTooltip","setShowTooltip","inputWidth","sizerRef","containerWidth","containerRef","refreshMode","focus","setSelectionRange","scrollLeft","useLayoutEffect","textContent","handleClick","handleBlur","formattedTitle","trim","handleChange","ev","target","handleKeyPress","_contentRef$current","preventDefault","blur","id","onChange","onBlur","onKeyPress","tabIndex","menuTriggerStyles","gridUnit","dark2","headerStyles","light5","buttonsStyles","additionalActionsContainerStyles","PageHeaderWithActions","editableTitleProps","showTitlePanelItems","certificatiedBadgeProps","showFaveStar","faveStarProps","titlePanelAdditionalItems","rightPanelAdditionalItems","additionalActionsMenu","menuDropdownProps","showMenuDropdown","tooltipProps","useTheme","certifiedBy","CertifiedBadge","FaveStar","AntdDropdown","_extends","trigger","overlay","Button","buttonStyle","MoreHoriz","iconColor"],"sourceRoot":""}