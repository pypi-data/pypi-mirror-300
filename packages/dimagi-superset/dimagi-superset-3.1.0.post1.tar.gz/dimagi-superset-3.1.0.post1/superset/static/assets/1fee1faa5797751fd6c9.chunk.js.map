{"version":3,"file":"1fee1faa5797751fd6c9.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/components/ExtraControls.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { HandlerFunction, JsonValue, styled } from '@superset-ui/core';\nimport {\n  RadioButtonOption,\n  sharedControlComponents,\n} from '@superset-ui/chart-controls';\nimport { AreaChartStackControlOptions } from '../constants';\n\nconst { RadioButtonControl } = sharedControlComponents;\n\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\n\nexport function useExtraControl<\n  F extends {\n    stack: any;\n    area: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState<JsonValue | undefined>(\n    stack ?? undefined,\n  );\n\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartStackControlOptions;\n    }\n    return [];\n  }, [area]);\n\n  const extraControlsHandler = useCallback(\n    (value: RadioButtonOption[0]) => {\n      if (area) {\n        if (setControlValue) {\n          setControlValue('stack', value);\n          setExtraValue(value);\n        }\n      }\n    },\n    [area, setControlValue],\n  );\n\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue,\n  };\n}\n\nexport function ExtraControls<\n  F extends {\n    stack: any;\n    area: boolean;\n    showExtraControls: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } =\n    useExtraControl<F>({\n      formData,\n      setControlValue,\n    });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n\n  return (\n    <ExtraControlsWrapper>\n      <RadioButtonControl\n        options={extraControlsOptions}\n        onChange={extraControlsHandler}\n        value={extraValue}\n      />\n    </ExtraControlsWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n  AxisType,\n  getTimeFormatter,\n  getColumnLabel,\n  getNumberFormatter,\n  LegendState,\n} from '@superset-ui/core';\nimport { ViewRootGroup } from 'echarts/types/src/util/types';\nimport GlobalModel from 'echarts/types/src/model/Global';\nimport ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onContextMenu,\n  onLegendStateChanged,\n  onFocusedSeries,\n  xValueFormatter,\n  xAxis,\n  refs,\n  emitCrossFilters,\n  coltypeMapping,\n}: TimeseriesChartTransformedProps) {\n  const { stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n  const extraControlRef = useRef<HTMLDivElement>(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {\n    const updatedHeight = extraControlRef.current?.offsetHeight || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const getCrossFilterDataMask = useCallback(\n    (value: string) => {\n      const selected: string[] = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(value)) {\n        values = selected.filter(v => v !== value);\n      } else {\n        values = [value];\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0\n                ? []\n                : groupby.map((col, idx) => {\n                    const val = groupbyValues.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            label: groupbyValues.length ? groupbyValues : undefined,\n            value: groupbyValues.length ? groupbyValues : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(value),\n      };\n    },\n    [groupby, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n      setDataMask(getCrossFilterDataMask(value).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      onFocusedSeries(null);\n    },\n    mouseover: params => {\n      onFocusedSeries(params.seriesName);\n    },\n    legendselectchanged: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendselectall: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendinverseselect: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n          ...(eventParams.name ? [eventParams.name] : []),\n          ...(labelMap[seriesName] ?? []),\n        ];\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col:\n              // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n              xAxis.label === DTTM_ALIAS\n                ? formData.granularitySqla\n                : xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]),\n          });\n        }\n        [\n          ...(xAxis.type === AxisType.category && data ? [xAxis.label] : []),\n          ...formData.groupby,\n        ].forEach((dimension, i) =>\n          drillToDetailFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: String(values[i]),\n          }),\n        );\n        formData.groupby.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n        });\n      }\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState: LegendState = legendData.reduce(\n            (previous, datum) => ({\n              ...previous,\n              [datum]: datum === name,\n            }),\n            {},\n          );\n          onLegendStateChanged?.(legendState);\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <div ref={extraControlRef}>\n        <ExtraControls formData={formData} setControlValue={setControlValue} />\n      </div>\n      <Echart\n        ref={echartRef}\n        refs={refs}\n        height={height - extraControlHeight}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["RadioButtonControl","sharedControlComponents","ExtraControlsWrapper","styled","div","ExtraControls","_ref2","formData","setControlValue","extraControlsOptions","extraControlsHandler","extraValue","_ref","stack","area","setExtraValue","useState","undefined","useEffect","useMemo","AreaChartStackControlOptions","useCallback","value","useExtraControl","showExtraControls","___EmotionJSX","options","onChange","TIMER_DURATION","EchartsTimeseries","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","legendData","onContextMenu","onLegendStateChanged","onFocusedSeries","xValueFormatter","xAxis","refs","emitCrossFilters","coltypeMapping","echartRef","useRef","clickTimer","extraControlRef","extraControlHeight","setExtraControlHeight","_extraControlRef$curr","updatedHeight","current","offsetHeight","getCrossFilterDataMask","selected","Object","values","includes","filter","v","groupbyValues","map","dataMask","extraFormData","filters","length","col","idx","val","op","filterState","label","isCurrentValueSelected","handleChange","eventHandlers","click","props","clearTimeout","setTimeout","seriesName","name","mouseout","mouseover","params","legendselectchanged","payload","legendselectall","legendinverseselect","contextmenu","async","eventParams","_labelMap$seriesName","event","stop","data","drillToDetailFilters","drillByFilters","pointerEvent","type","AxisType","time","push","DTTM_ALIAS","granularitySqla","grain","timeGrainSqla","formattedVal","category","forEach","dimension","i","String","formatSeriesName","timeFormatter","getTimeFormatter","dateFormat","numberFormatter","getNumberFormatter","numberFormat","coltype","getColumnLabel","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","zrEventHandlers","dblclick","_echartRef$current","pointInPixel","offsetX","offsetY","echartInstance","getEchartInstance","containPixel","_params$target","target","globalModel","getModel","model","getModelInfo","el","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","legendState","reduce","previous","datum","React","ref","Echart","Styles","_ref3","divRef","chartRef","currentSelection","keys","previousSelection","useImperativeHandle","init","entries","_ref4","_chartRef$current","_chartRef$current2","handler","off","on","_ref5","_chartRef$current3","_chartRef$current4","getZr","setOption","dispatchAction","dataIndex","handleSizeChange","_ref6","resize","_chartRef$current5","dispose","useLayoutEffect","forwardRef"],"sourceRoot":""}