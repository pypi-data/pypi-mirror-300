from pydantic import BaseModel, Field
from typing import List

class SideBarMenu(BaseModel):
    """
    Represents the sidebar menu details for a screen.
    
    Attributes:
        routePath (str): Path of the route.
        viewName (str): Name of the view.
        shortDescription (str): Short description of the view.
        detailedDescription (str): Detailed description of the view.
        iconName (str): Name of the associated icon.
    """
    routePath: str = Field(description="Path of the route")
    viewName: str = Field(description="Name of the view")
    shortDescription: str = Field(description="Short description of the view")
    detailedDescription: str = Field(description="Detailed description of the view")
    iconName: str = Field(description="Name of the icon")


class NavigationMenu(BaseModel):
    """
    Represents a navigation menu item for an application screen.

    Attributes:
        routePath (str): Path of the route.
        viewName (str): Name of the view.
        iconName (str): Name of the associated icon.
        shortDescription (str): Short description of the view.
        detailedDescription (str): Detailed description of the view.
        shouldRequireSidebarmenu (bool): Indicates if a sidebar menu is required.
        sideBarMenu (List[SideBarMenu]): List of sidebar menu items.
    """
    routePath: str = Field(description="Path of the route")
    viewName: str = Field(description="Name of the view")
    iconName: str = Field(description="Name of the icon")
    shortDescription: str = Field(description="Short description of the view")
    detailedDescription: str = Field(description="Detailed description of the view")
    shouldRequireSidebarmenu: bool = Field(description="Indicates if the sidebar menu is required")
    sideBarMenu: List[SideBarMenu]


class AppScreens(BaseModel):
    """
    Represents the application screens and their navigation details.

    Attributes:
        appScreenDetails (List[NavigationMenu]): List of navigation menu details for application screens.
    """
    appScreenDetails: List[NavigationMenu]


class UiCode(BaseModel):
    """
    Represents the UI code for the React application.

    Attributes:
        react_ui_code (str): The complete React UI code.
    """
    react_ui_code: str = Field(..., description="The complete React UI Code")


class ReactCode(BaseModel):
    """
    Represents the UI code and response details.

    Attributes:
        react_ui_code (str): The complete React UI code.
        response_to_human (str): The response detailing changes or any required clarifications.
    """
    react_ui_code: str = Field(..., description="The complete React UI Code")
    response_to_human: str = Field(..., description="Details of changes made or clarifications needed from the user")


class GenUiKitLangchainTool(BaseModel):
    """
    Represents project and idea details for a UI kit tool.

    Attributes:
        project_name (str): The name of the project in lowercase letters.
        idea_name (str): The name of the project idea.
        idea_description (str): A detailed description of the project idea, can be autogenerated if not provided by the user.
    """
    project_name: str = Field(..., description="Name of the project in lowercase letters")
    idea_name: str = Field(..., description="Idea of the project")
    idea_description: str = Field(..., description="Detailed description of the project idea. If not provided, it can be autogenerated.")

class ReadMeContent(BaseModel):
    """
    Represents the content of a comprehensive README file for a software project.

    Attributes:
        read_me_content (str): The detailed and well-structured content of the README, including project description, installation instructions, usage details, configuration, technologies used, contributing guidelines, license information, and contact details.
    """
    read_me_content: str = Field(..., description="The comprehensive and professional README file content for a software project.")

