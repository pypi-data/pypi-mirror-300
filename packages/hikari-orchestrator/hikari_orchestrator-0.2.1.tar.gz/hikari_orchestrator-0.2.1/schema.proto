syntax = "proto3";

import "google/protobuf/timestamp.proto";

service Orchestrator {
    rpc Acquire (stream Shard) returns (stream Instruction) {}
    rpc AcquireNext (stream Shard) returns (stream Instruction) {}
    rpc Disconnect (ShardId) returns (DisconnectResult) {}
    rpc GetState (ShardId) returns (Shard) {}
    rpc GetAllStates (Undefined) returns (AllShards) {}
    rpc SendPayload (GatewayPayload) returns (Undefined) {}
    rpc GetConfig (Undefined) returns (Config) {}
}

enum InstructionType {
    DISCONNECT = 0;
    GATEWAY_PAYLOAD = 1;
    CONNECT = 2;
}

message PresenceActivity {
    string name = 1;
    optional string url = 2;
    int64 type = 3;
}

message PresenceUpdate {
    oneof idle_since {
        google.protobuf.Timestamp idle_timestamp = 1;
        Undefined undefined_idle = 2;
    };
    optional bool afk = 3;
    oneof activity {
        PresenceActivity activity_payload = 4;
        Undefined undefined_activity = 5;
    };
    optional string status = 6;
}

message RequestGuildMembers {
    int64 guild_id = 1;
    optional bool include_presences = 2;
    string query = 3;
    int64 limit = 4;
    repeated int64 users = 5;
    optional string nonce = 6;
}

message VoiceState {
    int64 guild_id = 1;
    optional int64 channel_id = 2;
    optional bool self_mute = 3;
    optional bool self_deaf = 4;
}

message Instruction {
    InstructionType type = 1;
    oneof payload {
        PresenceUpdate presence_update = 2;
        VoiceState voice_state = 3;
        RequestGuildMembers request_guild_members = 4;
    };
    optional int64 shard_id = 5;
    optional Shard shard_state = 6;
}

message ShardId {
    int64 shard_id = 1;
}

enum ShardState {
    STARTING = 0;
    STARTED = 1;
    STOPPED = 2;
}

// TODO: add gateway_url
// TODO: maybe rename to ShardState
message Shard {
    ShardState state = 1;
    google.protobuf.Timestamp last_seen = 2;
    double latency = 3;
    optional string session_id = 4;
    optional int64 seq = 5;
    int64 shard_id = 6;
    string gateway_url = 7;
    // TODO: add presence here so it can be persisted
}

message AllShards {
    repeated Shard shards = 1;
}

enum StatusType {
    FAILED = 0;
    SUCCESS = 2;
}

message DisconnectResult {
    StatusType status = 1;
    optional Shard state = 2;
}

message GatewayPayload {
    int64 shard_id = 1;
    oneof payload {
        PresenceUpdate presence_update = 2;
        VoiceState voice_state = 3;
        RequestGuildMembers request_guild_members = 4;
    };
}

message Config {
    int64 shard_count = 1;
    int64 intents = 2;
}

message Undefined {}
