# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_lightspark_crypto_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_lightspark_crypto_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_lightspark_crypto_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)

class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_lightspark_crypto")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_lightspark_crypto_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_lightspark_crypto_checksum_func_decrypt_ecies() != 32002:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_derive_and_tweak_pubkey() != 44901:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_encrypt_ecies() != 57526:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_generate_keypair() != 35394:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_generate_multisig_address() != 10348:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_handle_remote_signing_webhook_event() != 38991:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_sign_ecdsa() != 6804:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_sign_transactions() != 40198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_func_verify_ecdsa() != 51190:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_recovery_id() != 44059:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_signature() != 1363:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_keypair_get_private_key() != 333:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_keypair_get_public_key() != 28794:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_key_and_sign() != 55840:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_private_key() != 44534:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key() != 1950:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key_hex() != 47918:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_ecdh() != 65526:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage() != 10846:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_hash() != 12248:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_nonce() != 2599:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_master_public_key() != 48490:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_per_commitment_point() != 55465:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_release_per_commitment_secret() != 25475:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice() != 19232:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice_hash() != 11162:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_mnemonic_as_string() != 15466:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_seed_as_bytes() != 32338:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_from_bytes() != 57207:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_new() != 65101:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_entropy() != 54958:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_phrase() != 46204:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_random() != 3686:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_seed_from_mnemonic() != 17860:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_constructor_seed_new() != 15664:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_lightspark_crypto_checksum_method_validation_should_sign() != 52762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_lightspark_crypto_fn_free_invoicesignature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_free_invoicesignature.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_recovery_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_recovery_id.restype = ctypes.c_int32
_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_signature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_signature.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_free_keypair.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_free_keypair.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_private_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_private_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_public_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_free_lightsparksigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_free_lightsparksigner.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_from_bytes.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_from_bytes.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_new.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_key_and_sign.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_key_and_sign.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_private_key.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_private_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key_hex.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key_hex.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_ecdh.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_ecdh.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_hash.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_hash.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_nonce.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_nonce.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_master_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_master_public_key.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_per_commitment_point.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_per_commitment_point.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_release_per_commitment_secret.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_release_per_commitment_secret.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice_hash.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice_hash.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_free_mnemonic.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_free_mnemonic.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_entropy.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_entropy.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_phrase.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_phrase.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_random.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_random.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_method_mnemonic_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_mnemonic_as_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_free_seed.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_free_seed.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_from_mnemonic.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_from_mnemonic.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_method_seed_as_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_method_seed_as_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_init_callback_validation.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_init_callback_validation.restype = None
_UniffiLib.uniffi_lightspark_crypto_fn_func_decrypt_ecies.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_decrypt_ecies.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_derive_and_tweak_pubkey.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_derive_and_tweak_pubkey.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_encrypt_ecies.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_encrypt_ecies.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_keypair.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_keypair.restype = ctypes.c_void_p
_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_multisig_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_multisig_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_handle_remote_signing_webhook_event.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_handle_remote_signing_webhook_event.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_ecdsa.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_ecdsa.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_transactions.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_transactions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_lightspark_crypto_fn_func_verify_ecdsa.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_lightspark_crypto_fn_func_verify_ecdsa.restype = ctypes.c_int8
_UniffiLib.ffi_lightspark_crypto_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_lightspark_crypto_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_lightspark_crypto_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rustbuffer_free.restype = None
_UniffiLib.ffi_lightspark_crypto_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_lightspark_crypto_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i8.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i16.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_u64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_u64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_i64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_i64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_f32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_f32.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_f64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_f64.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_pointer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_poll_void.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_cancel_void.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_lightspark_crypto_rust_future_free_void.restype = None
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_lightspark_crypto_rust_future_complete_void.restype = None
_UniffiLib.uniffi_lightspark_crypto_checksum_func_decrypt_ecies.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_decrypt_ecies.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_derive_and_tweak_pubkey.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_derive_and_tweak_pubkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_encrypt_ecies.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_encrypt_ecies.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_generate_keypair.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_generate_keypair.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_generate_multisig_address.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_generate_multisig_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_handle_remote_signing_webhook_event.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_handle_remote_signing_webhook_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_sign_ecdsa.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_sign_ecdsa.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_sign_transactions.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_sign_transactions.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_func_verify_ecdsa.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_func_verify_ecdsa.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_recovery_id.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_recovery_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_signature.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_invoicesignature_get_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_keypair_get_private_key.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_keypair_get_private_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_keypair_get_public_key.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_keypair_get_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_key_and_sign.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_key_and_sign.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_private_key.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_private_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key_hex.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_derive_public_key_hex.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_ecdh.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_ecdh.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_hash.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_nonce.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_generate_preimage_nonce.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_master_public_key.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_master_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_per_commitment_point.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_get_per_commitment_point.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_release_per_commitment_secret.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_release_per_commitment_secret.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice_hash.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_lightsparksigner_sign_invoice_hash.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_mnemonic_as_string.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_mnemonic_as_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_seed_as_bytes.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_seed_as_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_from_bytes.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_from_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_new.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_lightsparksigner_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_entropy.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_entropy.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_phrase.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_from_phrase.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_random.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_mnemonic_random.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_seed_from_mnemonic.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_seed_from_mnemonic.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_seed_new.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_constructor_seed_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_lightspark_crypto_checksum_method_validation_should_sign.argtypes = (
)
_UniffiLib.uniffi_lightspark_crypto_checksum_method_validation_should_sign.restype = ctypes.c_uint16
_UniffiLib.ffi_lightspark_crypto_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_lightspark_crypto_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u8(value)

class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class InvoiceSignature:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_free_invoicesignature, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_recovery_id(self, ) -> "int":
        return _UniffiConverterInt32.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_recovery_id,self._pointer,)
        )






    def get_signature(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_invoicesignature_get_signature,self._pointer,)
        )






class _UniffiConverterTypeInvoiceSignature:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, InvoiceSignature):
            raise TypeError("Expected InvoiceSignature instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return InvoiceSignature._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class KeyPair:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_free_keypair, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_private_key(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_private_key,self._pointer,)
        )






    def get_public_key(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_keypair_get_public_key,self._pointer,)
        )






class _UniffiConverterTypeKeyPair:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, KeyPair):
            raise TypeError("Expected KeyPair instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return KeyPair._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LightsparkSigner:
    _pointer: ctypes.c_void_p
    def __init__(self, seed: "Seed",network: "Network"):
        
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_new,
        _UniffiConverterTypeSeed.lower(seed),
        _UniffiConverterTypeNetwork.lower(network))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_free_lightsparksigner, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, seed: "typing.List[int]",network: "Network"):
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_constructor_lightsparksigner_from_bytes,
        _UniffiConverterSequenceUInt8.lower(seed),
        _UniffiConverterTypeNetwork.lower(network))
        return cls._make_instance_(pointer)



    def derive_key_and_sign(self, message: "typing.List[int]",derivation_path: "str",is_raw: "bool",add_tweak: "typing.Optional[typing.List[int]]",mul_tweak: "typing.Optional[typing.List[int]]") -> "typing.List[int]":
        
        
        
        
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_key_and_sign,self._pointer,
        _UniffiConverterSequenceUInt8.lower(message),
        _UniffiConverterString.lower(derivation_path),
        _UniffiConverterBool.lower(is_raw),
        _UniffiConverterOptionalSequenceUInt8.lower(add_tweak),
        _UniffiConverterOptionalSequenceUInt8.lower(mul_tweak))
        )






    def derive_private_key(self, derivation_path: "str") -> "str":
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_private_key,self._pointer,
        _UniffiConverterString.lower(derivation_path))
        )






    def derive_public_key(self, derivation_path: "str") -> "str":
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key,self._pointer,
        _UniffiConverterString.lower(derivation_path))
        )






    def derive_public_key_hex(self, derivation_path: "str") -> "str":
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_derive_public_key_hex,self._pointer,
        _UniffiConverterString.lower(derivation_path))
        )






    def ecdh(self, public_key: "typing.List[int]") -> "typing.List[int]":
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_ecdh,self._pointer,
        _UniffiConverterSequenceUInt8.lower(public_key))
        )






    def generate_preimage(self, nonce: "typing.List[int]") -> "typing.List[int]":
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage,self._pointer,
        _UniffiConverterSequenceUInt8.lower(nonce))
        )






    def generate_preimage_hash(self, nonce: "typing.List[int]") -> "typing.List[int]":
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_hash,self._pointer,
        _UniffiConverterSequenceUInt8.lower(nonce))
        )






    def generate_preimage_nonce(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_generate_preimage_nonce,self._pointer,)
        )






    def get_master_public_key(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_master_public_key,self._pointer,)
        )






    def get_per_commitment_point(self, derivation_path: "str",per_commitment_point_idx: "int") -> "typing.List[int]":
        
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_get_per_commitment_point,self._pointer,
        _UniffiConverterString.lower(derivation_path),
        _UniffiConverterUInt64.lower(per_commitment_point_idx))
        )






    def release_per_commitment_secret(self, derivation_path: "str",per_commitment_point_idx: "int") -> "typing.List[int]":
        
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_release_per_commitment_secret,self._pointer,
        _UniffiConverterString.lower(derivation_path),
        _UniffiConverterUInt64.lower(per_commitment_point_idx))
        )






    def sign_invoice(self, unsigned_invoice: "str") -> "InvoiceSignature":
        
        return _UniffiConverterTypeInvoiceSignature.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice,self._pointer,
        _UniffiConverterString.lower(unsigned_invoice))
        )






    def sign_invoice_hash(self, unsigned_invoice: "typing.List[int]") -> "InvoiceSignature":
        
        return _UniffiConverterTypeInvoiceSignature.lift(
            _rust_call_with_error(
    _UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_method_lightsparksigner_sign_invoice_hash,self._pointer,
        _UniffiConverterSequenceUInt8.lower(unsigned_invoice))
        )






class _UniffiConverterTypeLightsparkSigner:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LightsparkSigner):
            raise TypeError("Expected LightsparkSigner instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LightsparkSigner._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Mnemonic:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_free_mnemonic, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_entropy(cls, entropy: "typing.List[int]"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_entropy,
        _UniffiConverterSequenceUInt8.lower(entropy))
        return cls._make_instance_(pointer)


    @classmethod
    def from_phrase(cls, phrase: "str"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_from_phrase,
        _UniffiConverterString.lower(phrase))
        return cls._make_instance_(pointer)


    @classmethod
    def random(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeLightsparkSignerError,_UniffiLib.uniffi_lightspark_crypto_fn_constructor_mnemonic_random,)
        return cls._make_instance_(pointer)



    def as_string(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_mnemonic_as_string,self._pointer,)
        )






class _UniffiConverterTypeMnemonic:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Mnemonic):
            raise TypeError("Expected Mnemonic instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Mnemonic._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Seed:
    _pointer: ctypes.c_void_p
    def __init__(self, seed: "typing.List[int]"):
        
        self._pointer = _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_new,
        _UniffiConverterSequenceUInt8.lower(seed))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_free_seed, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_mnemonic(cls, mnemonic: "Mnemonic"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_constructor_seed_from_mnemonic,
        _UniffiConverterTypeMnemonic.lower(mnemonic))
        return cls._make_instance_(pointer)



    def as_bytes(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_lightspark_crypto_fn_method_seed_as_bytes,self._pointer,)
        )






class _UniffiConverterTypeSeed:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Seed):
            raise TypeError("Expected Seed instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Seed._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class RemoteSigningResponse:
    query: "str";variables: "str";

    @typing.no_type_check
    def __init__(self, query: "str", variables: "str"):
        self.query = query
        self.variables = variables

    def __str__(self):
        return "RemoteSigningResponse(query={}, variables={})".format(self.query, self.variables)

    def __eq__(self, other):
        if self.query != other.query:
            return False
        if self.variables != other.variables:
            return False
        return True

class _UniffiConverterTypeRemoteSigningResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RemoteSigningResponse(
            query=_UniffiConverterString.read(buf),
            variables=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.query, buf)
        _UniffiConverterString.write(value.variables, buf)


class Response:
    commitment_tx: "str";sweep_tx: "str";htlc_inbound_tx: "typing.List[StringTuple]";htlc_outbound_tx: "typing.List[StringTuple]";counterparty_sweep_tx: "str";counterparty_htlc_inbound_tx: "typing.List[str]";counterparty_htlc_outbound_tx: "typing.List[str]";

    @typing.no_type_check
    def __init__(self, commitment_tx: "str", sweep_tx: "str", htlc_inbound_tx: "typing.List[StringTuple]", htlc_outbound_tx: "typing.List[StringTuple]", counterparty_sweep_tx: "str", counterparty_htlc_inbound_tx: "typing.List[str]", counterparty_htlc_outbound_tx: "typing.List[str]"):
        self.commitment_tx = commitment_tx
        self.sweep_tx = sweep_tx
        self.htlc_inbound_tx = htlc_inbound_tx
        self.htlc_outbound_tx = htlc_outbound_tx
        self.counterparty_sweep_tx = counterparty_sweep_tx
        self.counterparty_htlc_inbound_tx = counterparty_htlc_inbound_tx
        self.counterparty_htlc_outbound_tx = counterparty_htlc_outbound_tx

    def __str__(self):
        return "Response(commitment_tx={}, sweep_tx={}, htlc_inbound_tx={}, htlc_outbound_tx={}, counterparty_sweep_tx={}, counterparty_htlc_inbound_tx={}, counterparty_htlc_outbound_tx={})".format(self.commitment_tx, self.sweep_tx, self.htlc_inbound_tx, self.htlc_outbound_tx, self.counterparty_sweep_tx, self.counterparty_htlc_inbound_tx, self.counterparty_htlc_outbound_tx)

    def __eq__(self, other):
        if self.commitment_tx != other.commitment_tx:
            return False
        if self.sweep_tx != other.sweep_tx:
            return False
        if self.htlc_inbound_tx != other.htlc_inbound_tx:
            return False
        if self.htlc_outbound_tx != other.htlc_outbound_tx:
            return False
        if self.counterparty_sweep_tx != other.counterparty_sweep_tx:
            return False
        if self.counterparty_htlc_inbound_tx != other.counterparty_htlc_inbound_tx:
            return False
        if self.counterparty_htlc_outbound_tx != other.counterparty_htlc_outbound_tx:
            return False
        return True

class _UniffiConverterTypeResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Response(
            commitment_tx=_UniffiConverterString.read(buf),
            sweep_tx=_UniffiConverterString.read(buf),
            htlc_inbound_tx=_UniffiConverterSequenceTypeStringTuple.read(buf),
            htlc_outbound_tx=_UniffiConverterSequenceTypeStringTuple.read(buf),
            counterparty_sweep_tx=_UniffiConverterString.read(buf),
            counterparty_htlc_inbound_tx=_UniffiConverterSequenceString.read(buf),
            counterparty_htlc_outbound_tx=_UniffiConverterSequenceString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.commitment_tx, buf)
        _UniffiConverterString.write(value.sweep_tx, buf)
        _UniffiConverterSequenceTypeStringTuple.write(value.htlc_inbound_tx, buf)
        _UniffiConverterSequenceTypeStringTuple.write(value.htlc_outbound_tx, buf)
        _UniffiConverterString.write(value.counterparty_sweep_tx, buf)
        _UniffiConverterSequenceString.write(value.counterparty_htlc_inbound_tx, buf)
        _UniffiConverterSequenceString.write(value.counterparty_htlc_outbound_tx, buf)


class StringTuple:
    first: "str";second: "str";

    @typing.no_type_check
    def __init__(self, first: "str", second: "str"):
        self.first = first
        self.second = second

    def __str__(self):
        return "StringTuple(first={}, second={})".format(self.first, self.second)

    def __eq__(self, other):
        if self.first != other.first:
            return False
        if self.second != other.second:
            return False
        return True

class _UniffiConverterTypeStringTuple(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return StringTuple(
            first=_UniffiConverterString.read(buf),
            second=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.first, buf)
        _UniffiConverterString.write(value.second, buf)


# CryptoError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class CryptoError(Exception):
    pass

_UniffiTempCryptoError = CryptoError

class CryptoError:  # type: ignore
    class Secp256k1Error(_UniffiTempCryptoError):
        def __repr__(self):
            return "CryptoError.Secp256k1Error({})".format(repr(str(self)))
    _UniffiTempCryptoError.Secp256k1Error = Secp256k1Error # type: ignore
    class RustSecp256k1Error(_UniffiTempCryptoError):
        def __repr__(self):
            return "CryptoError.RustSecp256k1Error({})".format(repr(str(self)))
    _UniffiTempCryptoError.RustSecp256k1Error = RustSecp256k1Error # type: ignore
    class InvalidPublicKeyScriptError(_UniffiTempCryptoError):
        def __repr__(self):
            return "CryptoError.InvalidPublicKeyScriptError({})".format(repr(str(self)))
    _UniffiTempCryptoError.InvalidPublicKeyScriptError = InvalidPublicKeyScriptError # type: ignore
    class KeyDerivationError(_UniffiTempCryptoError):
        def __repr__(self):
            return "CryptoError.KeyDerivationError({})".format(repr(str(self)))
    _UniffiTempCryptoError.KeyDerivationError = KeyDerivationError # type: ignore
    class KeyTweakError(_UniffiTempCryptoError):
        def __repr__(self):
            return "CryptoError.KeyTweakError({})".format(repr(str(self)))
    _UniffiTempCryptoError.KeyTweakError = KeyTweakError # type: ignore

CryptoError = _UniffiTempCryptoError # type: ignore
del _UniffiTempCryptoError


class _UniffiConverterTypeCryptoError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CryptoError.Secp256k1Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return CryptoError.RustSecp256k1Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return CryptoError.InvalidPublicKeyScriptError(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return CryptoError.KeyDerivationError(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return CryptoError.KeyTweakError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, CryptoError.Secp256k1Error):
            buf.write_i32(1)
        if isinstance(value, CryptoError.RustSecp256k1Error):
            buf.write_i32(2)
        if isinstance(value, CryptoError.InvalidPublicKeyScriptError):
            buf.write_i32(3)
        if isinstance(value, CryptoError.KeyDerivationError):
            buf.write_i32(4)
        if isinstance(value, CryptoError.KeyTweakError):
            buf.write_i32(5)


# FundsRecoveryKitError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class FundsRecoveryKitError(Exception):
    pass

_UniffiTempFundsRecoveryKitError = FundsRecoveryKitError

class FundsRecoveryKitError:  # type: ignore
    class Error(_UniffiTempFundsRecoveryKitError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "FundsRecoveryKitError.Error({})".format(str(self))
    _UniffiTempFundsRecoveryKitError.Error = Error # type: ignore

FundsRecoveryKitError = _UniffiTempFundsRecoveryKitError # type: ignore
del _UniffiTempFundsRecoveryKitError


class _UniffiConverterTypeFundsRecoveryKitError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return FundsRecoveryKitError.Error(
                message=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, FundsRecoveryKitError.Error):
            buf.write_i32(1)
            _UniffiConverterString.write(value.message, buf)


# LightsparkSignerError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class LightsparkSignerError(Exception):
    pass

_UniffiTempLightsparkSignerError = LightsparkSignerError

class LightsparkSignerError:  # type: ignore
    class Bip39Error(_UniffiTempLightsparkSignerError):
        def __repr__(self):
            return "LightsparkSignerError.Bip39Error({})".format(repr(str(self)))
    _UniffiTempLightsparkSignerError.Bip39Error = Bip39Error # type: ignore
    class Secp256k1Error(_UniffiTempLightsparkSignerError):
        def __repr__(self):
            return "LightsparkSignerError.Secp256k1Error({})".format(repr(str(self)))
    _UniffiTempLightsparkSignerError.Secp256k1Error = Secp256k1Error # type: ignore
    class KeyDerivationError(_UniffiTempLightsparkSignerError):
        def __repr__(self):
            return "LightsparkSignerError.KeyDerivationError({})".format(repr(str(self)))
    _UniffiTempLightsparkSignerError.KeyDerivationError = KeyDerivationError # type: ignore
    class KeyTweakError(_UniffiTempLightsparkSignerError):
        def __repr__(self):
            return "LightsparkSignerError.KeyTweakError({})".format(repr(str(self)))
    _UniffiTempLightsparkSignerError.KeyTweakError = KeyTweakError # type: ignore
    class EntropyLengthError(_UniffiTempLightsparkSignerError):
        def __repr__(self):
            return "LightsparkSignerError.EntropyLengthError({})".format(repr(str(self)))
    _UniffiTempLightsparkSignerError.EntropyLengthError = EntropyLengthError # type: ignore

LightsparkSignerError = _UniffiTempLightsparkSignerError # type: ignore
del _UniffiTempLightsparkSignerError


class _UniffiConverterTypeLightsparkSignerError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LightsparkSignerError.Bip39Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return LightsparkSignerError.Secp256k1Error(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return LightsparkSignerError.KeyDerivationError(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return LightsparkSignerError.KeyTweakError(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return LightsparkSignerError.EntropyLengthError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, LightsparkSignerError.Bip39Error):
            buf.write_i32(1)
        if isinstance(value, LightsparkSignerError.Secp256k1Error):
            buf.write_i32(2)
        if isinstance(value, LightsparkSignerError.KeyDerivationError):
            buf.write_i32(3)
        if isinstance(value, LightsparkSignerError.KeyTweakError):
            buf.write_i32(4)
        if isinstance(value, LightsparkSignerError.EntropyLengthError):
            buf.write_i32(5)





class Network(enum.Enum):
    BITCOIN = 1
    TESTNET = 2
    REGTEST = 3
    


class _UniffiConverterTypeNetwork(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Network.BITCOIN
        if variant == 2:
            return Network.TESTNET
        if variant == 3:
            return Network.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == Network.BITCOIN:
            buf.write_i32(1)
        if value == Network.TESTNET:
            buf.write_i32(2)
        if value == Network.REGTEST:
            buf.write_i32(3)




# RemoteSigningError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class RemoteSigningError(Exception):
    pass

_UniffiTempRemoteSigningError = RemoteSigningError

class RemoteSigningError:  # type: ignore
    class WebhookParsingError(_UniffiTempRemoteSigningError):
        def __repr__(self):
            return "RemoteSigningError.WebhookParsingError({})".format(repr(str(self)))
    _UniffiTempRemoteSigningError.WebhookParsingError = WebhookParsingError # type: ignore
    class WebhookSignatureError(_UniffiTempRemoteSigningError):
        def __repr__(self):
            return "RemoteSigningError.WebhookSignatureError({})".format(repr(str(self)))
    _UniffiTempRemoteSigningError.WebhookSignatureError = WebhookSignatureError # type: ignore
    class SignerCreationError(_UniffiTempRemoteSigningError):
        def __repr__(self):
            return "RemoteSigningError.SignerCreationError({})".format(repr(str(self)))
    _UniffiTempRemoteSigningError.SignerCreationError = SignerCreationError # type: ignore
    class RemoteSigningHandlerError(_UniffiTempRemoteSigningError):
        def __repr__(self):
            return "RemoteSigningError.RemoteSigningHandlerError({})".format(repr(str(self)))
    _UniffiTempRemoteSigningError.RemoteSigningHandlerError = RemoteSigningHandlerError # type: ignore

RemoteSigningError = _UniffiTempRemoteSigningError # type: ignore
del _UniffiTempRemoteSigningError


class _UniffiConverterTypeRemoteSigningError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RemoteSigningError.WebhookParsingError(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return RemoteSigningError.WebhookSignatureError(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return RemoteSigningError.SignerCreationError(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return RemoteSigningError.RemoteSigningHandlerError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, RemoteSigningError.WebhookParsingError):
            buf.write_i32(1)
        if isinstance(value, RemoteSigningError.WebhookSignatureError):
            buf.write_i32(2)
        if isinstance(value, RemoteSigningError.SignerCreationError):
            buf.write_i32(3)
        if isinstance(value, RemoteSigningError.RemoteSigningHandlerError):
            buf.write_i32(4)



import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Declaration and _UniffiConverters for Validation Callback Interface

class Validation:
    def should_sign(self, webhook: "str"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceValidation(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_should_sign(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.should_sign(
                _UniffiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterBool.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    

    cb = _UniffiConverterCallbackInterfaceValidation.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a uniffi bug")

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceValidation.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_should_sign(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceValidation = _UNIFFI_FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceValidation)
_rust_call(lambda err: _UniffiLib.uniffi_lightspark_crypto_fn_init_callback_validation(foreignCallbackCallbackInterfaceValidation, err))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceValidation = _UniffiConverterCallbackInterface(foreignCallbackCallbackInterfaceValidation)



class _UniffiConverterOptionalTypeRemoteSigningResponse(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRemoteSigningResponse.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRemoteSigningResponse.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceUInt8.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceUInt8.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeStringTuple(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeStringTuple.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeStringTuple.read(buf) for i in range(count)
        ]

def decrypt_ecies(cipher_text: "typing.List[int]",private_key_bytes: "typing.List[int]") -> "typing.List[int]":
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_decrypt_ecies,
        _UniffiConverterSequenceUInt8.lower(cipher_text),
        _UniffiConverterSequenceUInt8.lower(private_key_bytes)))


def derive_and_tweak_pubkey(pubkey: "str",derivation_path: "str",add_tweak: "typing.Optional[typing.List[int]]",mul_tweak: "typing.Optional[typing.List[int]]") -> "typing.List[int]":
    
    
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_derive_and_tweak_pubkey,
        _UniffiConverterString.lower(pubkey),
        _UniffiConverterString.lower(derivation_path),
        _UniffiConverterOptionalSequenceUInt8.lower(add_tweak),
        _UniffiConverterOptionalSequenceUInt8.lower(mul_tweak)))


def encrypt_ecies(msg: "typing.List[int]",public_key_bytes: "typing.List[int]") -> "typing.List[int]":
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_encrypt_ecies,
        _UniffiConverterSequenceUInt8.lower(msg),
        _UniffiConverterSequenceUInt8.lower(public_key_bytes)))


def generate_keypair() -> "KeyPair":
    return _UniffiConverterTypeKeyPair.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_keypair,))


def generate_multisig_address(network: "Network",pk1: "typing.List[int]",pk2: "typing.List[int]") -> "str":
    
    
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_generate_multisig_address,
        _UniffiConverterTypeNetwork.lower(network),
        _UniffiConverterSequenceUInt8.lower(pk1),
        _UniffiConverterSequenceUInt8.lower(pk2)))


def handle_remote_signing_webhook_event(webhook_data: "typing.List[int]",webhook_signature: "str",webhook_secret: "str",master_seed_bytes: "typing.List[int]",validation: "Validation") -> "typing.Optional[RemoteSigningResponse]":
    
    
    
    
    
    return _UniffiConverterOptionalTypeRemoteSigningResponse.lift(_rust_call_with_error(_UniffiConverterTypeRemoteSigningError,_UniffiLib.uniffi_lightspark_crypto_fn_func_handle_remote_signing_webhook_event,
        _UniffiConverterSequenceUInt8.lower(webhook_data),
        _UniffiConverterString.lower(webhook_signature),
        _UniffiConverterString.lower(webhook_secret),
        _UniffiConverterSequenceUInt8.lower(master_seed_bytes),
        _UniffiConverterCallbackInterfaceValidation.lower(validation)))


def sign_ecdsa(msg: "typing.List[int]",private_key_bytes: "typing.List[int]") -> "typing.List[int]":
    
    
    return _UniffiConverterSequenceUInt8.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_ecdsa,
        _UniffiConverterSequenceUInt8.lower(msg),
        _UniffiConverterSequenceUInt8.lower(private_key_bytes)))


def sign_transactions(master_seed: "str",data: "str",network: "Network") -> "Response":
    
    
    
    return _UniffiConverterTypeResponse.lift(_rust_call_with_error(_UniffiConverterTypeFundsRecoveryKitError,_UniffiLib.uniffi_lightspark_crypto_fn_func_sign_transactions,
        _UniffiConverterString.lower(master_seed),
        _UniffiConverterString.lower(data),
        _UniffiConverterTypeNetwork.lower(network)))


def verify_ecdsa(msg: "typing.List[int]",signature_bytes: "typing.List[int]",public_key_bytes: "typing.List[int]") -> "bool":
    
    
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeCryptoError,_UniffiLib.uniffi_lightspark_crypto_fn_func_verify_ecdsa,
        _UniffiConverterSequenceUInt8.lower(msg),
        _UniffiConverterSequenceUInt8.lower(signature_bytes),
        _UniffiConverterSequenceUInt8.lower(public_key_bytes)))


__all__ = [
    "InternalError",
    "CryptoError",
    "FundsRecoveryKitError",
    "LightsparkSignerError",
    "Network",
    "RemoteSigningError",
    "RemoteSigningResponse",
    "Response",
    "StringTuple",
    "decrypt_ecies",
    "derive_and_tweak_pubkey",
    "encrypt_ecies",
    "generate_keypair",
    "generate_multisig_address",
    "handle_remote_signing_webhook_event",
    "sign_ecdsa",
    "sign_transactions",
    "verify_ecdsa",
    "InvoiceSignature",
    "KeyPair",
    "LightsparkSigner",
    "Mnemonic",
    "Seed",
    "Validation",
]

