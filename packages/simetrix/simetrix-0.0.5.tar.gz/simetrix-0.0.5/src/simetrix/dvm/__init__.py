# SPDX-FileCopyrightText: 2024-present SIMetrix Technologies Ltd, SIMPLIS Technologies Inc.
#
# SPDX-License-Identifier: SIMetrix and SIMetrix/SIMPLIS End User Licence Agreement
import typing
import simetrix
from enum import Enum

Status = Enum('Status', ['Fail', 'Pass', 'Warn'])

class ControlSymbol(simetrix.Instance):
    def circuitDescription(self) -> str: ...
    def circuitName(self) -> str: ...

class LogTestDataResult:
    def measurement(self) -> str: ...
    def target(self) -> str: ...
    def topology(self) -> str: ...
    def value(self) -> str: ...

class LogTestData:
    def executed(self) -> str: ...
    def logPath(self) -> str: ...
    def progress(self) -> tuple[int, int]: ...
    def rawData(self) -> list[str]: ...
    def reportPath(self) -> str: ...
    def results(self) -> list[LogTestDataResult]: ...
    def rstatus(self) -> str: ...
    def simulator(self) -> str: ...
    def status(self) -> str: ...

class LogFile:
    def data(self, label: str) -> LogTestData: ...

    @deprecated
    def extractScalars(self, statisticNames: list[str]) -> list[str]: ...

    @deprecated
    def path(self) -> str: ...
    
    @deprecated 
    def promoteGraph(self, name: str, weight: int = None, fuzzyLogic: bool = None) -> None: ...
    
    @deprecated
    def promoteScalar(self, name: str, value: str, newName: str = None) -> None: ...

class ProcessReturn:
    def createScalar(self, name: str, value: str) -> None: ...
    def createSpecification(self, name: str, status: Status, description: str) -> None: ...
    def createStatistic(self, name: str, value: str) -> None: ...
    def createStatisticSpecification(self, name: str, status: Status, description: str) -> None: ...

class TestState:
    def label(self) -> str: ...
    def logData(self) -> LogTestData: ...
    def promoteGraph(self, name: str, weight: int = None, fuzzyLogic: bool = None) -> None: ...
    def promoteScalar(self, name: str, value: str, newName: str = None) -> None: ...
    def reportDirectory(self) -> str: ...