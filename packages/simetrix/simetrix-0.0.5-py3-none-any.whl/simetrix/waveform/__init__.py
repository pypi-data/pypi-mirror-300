# SPDX-FileCopyrightText: 2024-present SIMetrix Technologies Ltd, SIMPLIS Technologies Inc.
#
# SPDX-License-Identifier: SIMetrix and SIMetrix/SIMPLIS End User Licence Agreement
import typing
import simetrix
from enum import Enum

GraphObjectType = Enum('GraphObjectType', ['None', 'Axis', 'Crosshair', 'CrosshairDimension', 'Curve', 'CurveData', 'CurveMarker', 'FreeText', 'Graph', 'Grid', 'Histogram', 'LegendBox', 'LegendText', 'Measurement', 'SharedAxis', 'ScatterPlot', 'SmallCursor', 'TextBox'])
ValueType = Enum('ValueType', ['Complex', 'Real'])


class GraphObject:
    def id(self) -> int: ...
    def properties(self) -> simetrix.Properties: ...
    def type(self) -> GraphObjectType: ...

class AbstractDataVector:
    def size(self) -> int: ...
    def type(self) -> ValueType: ...

class AbstractXYDataVector:
    def size(self) -> int: ...
    def type(self) -> ValueType: ...
    def x(self) -> AbstractDataVector: ...
    def y(self) -> AbstractDataVector: ...

class CurveData(GraphObject):
    def division(self, index: int) -> AbstractXYDataVector: ...
    def numberDivisions(self) -> int: ...

class Curve(GraphObject):
    def data(self) -> CurveData: ...

class Graph(GraphObject):
    def curves(self) -> list[Curve]: ...

class RealDataVector(AbstractDataVector):
    pass

class RealXYDataVector(AbstractXYDataVector):
    def x(self) -> RealDataVector: ...
    def y(self) -> RealDataVector: ...

class ComplexDataVector(AbstractDataVector):
    pass

class ComplexXYDataVector(AbstractXYDataVector):
    def x(self) -> ComplexDataVector: ...
    def y(self) -> ComplexDataVector: ...
