# coding: utf-8

"""
    spacestudio satellite demo API documentation

    This API is a demo version of the SpaceStudio Satellite API. It is a simplified version of the SpaceStudio Satellite API, with a limited set of functionalities and a reduced set of endpoints. It is intended to be used for demonstration purposes only.

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_satellite_demo_client.models.scenario import Scenario

class TestScenario(unittest.TestCase):
    """Scenario unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Scenario:
        """Test Scenario
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Scenario`
        """
        model = Scenario()
        if include_optional:
            return Scenario(
                id = '',
                name = '',
                description = '',
                last_update = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                tags = [
                    ''
                    ],
                budget_parameters = [
                    ''
                    ],
                baseline = spacestudio_satellite_demo_client.models.scenario_baseline.scenarioBaseline(
                    valid = True, 
                    propulsion_system = spacestudio_satellite_demo_client.models.propulsion_system.propulsion-system(
                        id = '', 
                        name = '', 
                        scope = '', 
                        object_advanced = True, 
                        isp = 1.337, 
                        power = 1.337, 
                        thrust = 1.337, 
                        standby_power = 1.337, 
                        warm_up_power = 1.337, 
                        warm_up_duration = 1.337, 
                        propellant_mass = 1.337, 
                        total_mass = 1.337, 
                        total_impulse = 1.337, 
                        maximum_thrust_duration = 1.337, 
                        consumption = 1.337, 
                        propellant_capacity_choice = 'PROPELLANT', 
                        propulsion_system_type = 'CHEMICAL', ), 
                    platform = spacestudio_satellite_demo_client.models.platform.platform(
                        id = '', 
                        name = '', 
                        scope = '', 
                        platform_mass = 1.337, 
                        on_board_average_power = 1.337, 
                        duty_cycle = 1.337, ), 
                    payload = spacestudio_satellite_demo_client.models.payload.payload(
                        id = '', 
                        name = '', 
                        scope = '', ), 
                    spacecraft_geometry = spacestudio_satellite_demo_client.models.spacecraft_geometry.spacecraft-geometry(
                        id = '', 
                        name = '', 
                        scope = '', 
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, 
                        inertial_center_in_spacecraft_frame_x = 1.337, 
                        inertial_center_in_spacecraft_frame_y = 1.337, 
                        inertial_center_in_spacecraft_frame_z = 1.337, 
                        inertia_xx = 1.337, 
                        inertia_xy = 1.337, 
                        inertia_xz = 1.337, 
                        inertia_yx = 1.337, 
                        inertia_yy = 1.337, 
                        inertia_yz = 1.337, 
                        inertia_zx = 1.337, 
                        inertia_zy = 1.337, 
                        inertia_zz = 1.337, 
                        thruster_axis_in_satellite_frame_x = 1.337, 
                        thruster_axis_in_satellite_frame_y = 1.337, 
                        thruster_axis_in_satellite_frame_z = 1.337, 
                        solar_array_efficiency = 1.337, 
                        solar_array_maximum_power = 1.337, 
                        solar_array_surface = 1.337, 
                        solar_array_axis_in_satellite_frame_x = 1.337, 
                        solar_array_axis_in_satellite_frame_y = 1.337, 
                        solar_array_axis_in_satellite_frame_z = 1.337, 
                        solar_array_normal_in_satellite_frame_x = 1.337, 
                        solar_array_normal_in_satellite_frame_y = 1.337, 
                        solar_array_normal_in_satellite_frame_z = 1.337, 
                        payload_pointing_axis_in_satellite_frame_x = 1.337, 
                        payload_pointing_axis_in_satellite_frame_y = 1.337, 
                        payload_pointing_axis_in_satellite_frame_z = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_x = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_y = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_z = 1.337, 
                        spherical_cross_section = 1.337, 
                        body_solar_array_faces = [
                            'PLUS_X'
                            ], 
                        solar_array_definition_type = 'MAXIMUM_POWER', 
                        solar_array_type = 'NONE', 
                        type = 'SPHERE', ), 
                    timeline = [
                        spacestudio_satellite_demo_client.models.timeline_slot.TimelineSlot(
                            id = '', 
                            validity = 'VALID', )
                        ], 
                    refresh_mode = 'MANUAL', 
                    drag_perturbation = null, 
                    earth_potential_perturbation = null, 
                    solar_radiation_pressure_perturbation = null, 
                    third_body_perturbation = null, 
                    computation_status = 'RUNNING', 
                    numerical_computation_required = True, 
                    needing_recomputation = True, )
            )
        else:
            return Scenario(
        )
        """

    def testScenario(self):
        """Test Scenario"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
