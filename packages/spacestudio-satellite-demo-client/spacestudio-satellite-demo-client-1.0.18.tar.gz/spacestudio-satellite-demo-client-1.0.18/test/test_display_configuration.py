# coding: utf-8

"""
    spacestudio satellite demo API documentation

    This API is a demo version of the SpaceStudio Satellite API. It is a simplified version of the SpaceStudio Satellite API, with a limited set of functionalities and a reduced set of endpoints. It is intended to be used for demonstration purposes only.

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_satellite_demo_client.models.display_configuration import DisplayConfiguration

class TestDisplayConfiguration(unittest.TestCase):
    """DisplayConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DisplayConfiguration:
        """Test DisplayConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DisplayConfiguration`
        """
        model = DisplayConfiguration()
        if include_optional:
            return DisplayConfiguration(
                comparison_overview = spacestudio_satellite_demo_client.models.display_configuration_comparison_overview.DisplayConfiguration_comparisonOverview(
                    displayed_results = [
                        ''
                        ], 
                    view_mode = 'LIST', 
                    plots = [
                        spacestudio_satellite_demo_client.models.plot.Plot(
                            id = 56, 
                            axis_param_x = '', 
                            axis_param_y = [
                                ''
                                ], 
                            axis_param_z = '', 
                            type = 'BAR_CHART', )
                        ], ),
                baseline_configuration = spacestudio_satellite_demo_client.models.baseline_configuration.BaselineConfiguration(
                    plots = [
                        spacestudio_satellite_demo_client.models.plot.Plot(
                            id = 56, 
                            axis_param_x = '', 
                            axis_param_y = [
                                ''
                                ], 
                            axis_param_z = '', 
                            type = 'BAR_CHART', )
                        ], ),
                tabs = [
                    spacestudio_satellite_demo_client.models.tab.Tab(
                        name = '', 
                        computation_index = 56, 
                        plots = [
                            spacestudio_satellite_demo_client.models.plot.Plot(
                                id = 56, 
                                axis_param_x = '', 
                                axis_param_y = [
                                    ''
                                    ], 
                                axis_param_z = '', 
                                type = 'BAR_CHART', )
                            ], )
                    ],
                current_tab = spacestudio_satellite_demo_client.models.tab.Tab(
                    name = '', 
                    computation_index = 56, 
                    plots = [
                        spacestudio_satellite_demo_client.models.plot.Plot(
                            id = 56, 
                            axis_param_x = '', 
                            axis_param_y = [
                                ''
                                ], 
                            axis_param_z = '', 
                            type = 'BAR_CHART', )
                        ], )
            )
        else:
            return DisplayConfiguration(
        )
        """

    def testDisplayConfiguration(self):
        """Test DisplayConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
