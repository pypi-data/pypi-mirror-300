# coding: utf-8

"""
    spacestudio satellite demo API documentation

    This API is a demo version of the SpaceStudio Satellite API. It is a simplified version of the SpaceStudio Satellite API, with a limited set of functionalities and a reduced set of endpoints. It is intended to be used for demonstration purposes only.

    The version of the OpenAPI document: 1.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from spacestudio_satellite_demo_client.models.advanced_orbit_parameters import AdvancedOrbitParameters
from spacestudio_satellite_demo_client.models.orbit_parameters import OrbitParameters
from typing import Optional, Set
from typing_extensions import Self

class Orbit(BaseModel):
    """
    The library orbit object
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The orbit unique identifier")
    name: Optional[StrictStr] = Field(default=None, description="The orbit name")
    read_only: Optional[StrictBool] = Field(default=False, description="Is the orbit read-only", alias="readOnly")
    scope: Optional[StrictStr] = Field(default=None, description="The orbit scope")
    object_advanced: Optional[StrictBool] = Field(default=False, description="Is the orbit defined with parameters that require advanced computation", alias="objectAdvanced")
    sun_synchronous: Optional[StrictBool] = Field(default=False, description="Is the orbit a Sun-Synchronous Orbit (SSO)", alias="sunSynchronous")
    inclination: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit inclination (in radians)")
    sma: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit semi-major axis (in meters)")
    eccentricity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit eccentricity")
    parameters: Optional[OrbitParameters] = None
    advanced_parameters: Optional[AdvancedOrbitParameters] = Field(default=None, alias="advancedParameters")
    __properties: ClassVar[List[str]] = ["id", "name", "readOnly", "scope", "objectAdvanced", "sunSynchronous", "inclination", "sma", "eccentricity", "parameters", "advancedParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Orbit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advanced_parameters
        if self.advanced_parameters:
            _dict['advancedParameters'] = self.advanced_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Orbit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "readOnly": obj.get("readOnly") if obj.get("readOnly") is not None else False,
            "scope": obj.get("scope"),
            "objectAdvanced": obj.get("objectAdvanced") if obj.get("objectAdvanced") is not None else False,
            "sunSynchronous": obj.get("sunSynchronous") if obj.get("sunSynchronous") is not None else False,
            "inclination": obj.get("inclination"),
            "sma": obj.get("sma"),
            "eccentricity": obj.get("eccentricity"),
            "parameters": OrbitParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "advancedParameters": AdvancedOrbitParameters.from_dict(obj["advancedParameters"]) if obj.get("advancedParameters") is not None else None
        })
        return _obj


