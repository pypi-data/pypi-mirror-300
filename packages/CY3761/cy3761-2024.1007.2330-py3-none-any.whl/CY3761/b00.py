# CY3761 | fb764bc@outlook.com | 2024-10-05 09:11 | b00.py
# ----------------------------------------------------------------------------------------------------
from u00 import Callable, save_code

# ----------------------------------------------------------------------------------------------------
# ASCII字符表
# https://c.biancheng.net/c/ascii/
# https://tool.oschina.net/commons?type=4
# 000 ~ 127 (128) | '\x00' ~ '\x7f' (16:2) | '\u0000' ~ '\u007f' (16:4)
# CJK Unified Ideographs | 中日韩统一汉字 | 中文(Chinese) / 日文(Japanese)/ 韩文(Korean)
# https://blog.csdn.net/weixin_30532987/article/details/98690511
# u4e00-u9fa5 | 19968-40869 | 20901
# ----------------------------------------------------------------------------------------------------
# https://docs.python.org/zh-cn/3/library/string.html
# %[(name)][flags][width].[precision]typecode
# flags: + (右对齐), - (左对齐), ' ' (空格填充), 0 (0 填充)
# width: 填充宽度
# precision: "%.*f" % (4, 1.2) | 用4来替换*

A099 = '%c'  # 整数转换为相应的 unicode 字符 | 0 <= i <= 0x10ffff (1114111)
A114 = '%r'  # 对象的字符串表现形式 | repr
A115 = '%s'  # 字符串格式

# A098 = '%b'  # 二进制整数 | bin | 0b | %b并不是这些标准占位符, 在这里无法使用
A100 = '%d'  # 十进制整数 | str
A111 = '%o'  # 八进制整数 | str | oct | 0o
A120 = '%x'  # 十六进制整数 (小写) | str | hex | 0x

# A037 = '%%'  # 百分数 | 未知问题, 不能使用
A101 = '%e'  # 科学计数法 (小数点之后 6 位精度)
A102 = '%f'  # 定点表示法 (小数点之后 6 位精度)

# https://www.runoob.com/regexp/regexp-tutorial.html
# https://www.runoob.com/regexp/regexp-metachar.html
R098 = r'\b'  # 匹配一个单词边界, 也就是指单词和空格间的位置
R099 = r'\c'  # \cx | 匹配由 x 指明的控制字符, x 的值必须为 A-Z 或 a-z 之一. 否则, 将 c 视为一个原义的 'c' 字符
R100 = r'\d'  # 匹配一个数字字符. [0-9]
R102 = r'\f'  # 匹配一个换页符. \x0c 或 \cL
R120 = r'\n'  # 匹配一个换行符. \x0a 或 \cJ | 与 标识一个八进制转义值或一个向后引用 有歧义
R114 = r'\r'  # 匹配一个回车符. \x0d 或 \cM
R115 = r'\s'  # 匹配一个空白字符. 空格/制表符/换页符... | [ \f\n\r\t\v]
R116 = r'\t'  # 匹配一个水平制表符. \x09 或 \cI
R118 = r'\v'  # 匹配一个垂直制表符. \x0b 或 \cK
R119 = r'\w'  # 匹配一个 字母/数字/下划线. [A-Za-z0-9_]
R122 = r'\x'  # \xn | (\x41 => 'A') 65 | 匹配 n, 其中 n 为十六进制转义值. 十六进制转义值必须为确定的两个数字长, 正则表达式中可以使用 ASCII 编码
R117 = r'\u'  # \un | (\u00A9) 169 | 匹配 n, 其中 n 是一个用四个十六进制数字表示的 Unicode 字符

# ----------------------------------------------------------------------------------------------------
K00 = A115  # '%s'  # 字符串格式
K01 = A114  # 对象的字符串表现形式 | repr
K02 = '-' * 100
K03 = '# ' + K02
# ----------------------------------------------------------------------------------------------------
D00 = 'S'
D01, D02, D03 = 2, 4, 2
D04 = 's'
D05 = -1
D06 = '.py'


# ----------------------------------------------------------------------------------------------------
def chr_fore(s: str, a: str, v: str):
    return ('%' + s + a[1:]) % v


def sum_ords(v: str):
    return sum([ord(_) for _ in v])


def pad_00(v: int | str, w: int = 2):
    return str(v).zfill(w)


def v_name(v0: int, v1: int):
    return (K00 * 3) % (D00, pad_00(v0, D01), pad_00(v1, D02))


# # i: int | 0x00 ~ 0x63 | 00 ~ 99
def row(i: int, v: str):
    d = sum_ords(v)
    n = v_name(i, d)

    return i, v, d, n, (K00 + ' = ' + K01) % (n, v)


def sort(a: list):
    return sorted(a, key=lambda v: v[D03])


# ----------------------------------------------------------------------------------------------------
def group(i: int, a, c: Callable = None):
    return sort([row(i, c(_) if callable(c) else _) for _ in a])


def chr_args(*args):
    return [chr(i) for i in args]  # chr | 序数 i; 0 <= i <= 0x10ffff (1114111)


# chr_rang
def chr_rang(a: int, b: int):
    return chr_args(*range(a, b + 1))


def save(i: int, a: tuple | list):
    d = []

    [(d.extend([_[D05] for _ in v]), d.append(K03)) for v in a]
    d.append('')

    return save_code('%s%s%s' % (D04, pad_00(i, D01), D06), d)


# ----------------------------------------------------------------------------------------------------
def main_00():
    print(*[
        (_0, _1, [_0 % _1]) for _0, _1 in [
            (A099, 99),  # ('%c', 99, ['c'])
            (A099, 0x59),  # ('%c', 89, ['Y'])
            (A114, 'a'),  # ('%r', 'a', ["'a'"])
            (A115, 'a'),  # ('%s', 'a', ['a'])
            (A100, 3.14),  # ('%d', 3.14, ['3'])
            (A111, 10),  # ('%o', 10, ['12']) | 不能传浮点数
            (A120, 10),  # ('%x', 10, ['a'])
            (A101, 3.14),  # ('%e', 3.14, ['3.140000e+00']) # 科学计数法 | 6位小数
            (A102, 3.14),  # ('%f', 3.14, ['3.140000']) # 定点表示法 | 6位小数
            ('%+6' + A115[1:], 'a'),  # ('%+6s', 'a', ['     a']) | 右对齐
            ('%-6' + A115[1:], 'a'),  # ('%-6s', 'a', ['a     ']) | 左对齐
            ('%.3' + A102[1:], 3.141592654),  # ('%.3f', 3.141592654, ['3.142']) | 3位小数
            ('%10.3' + A102[1:], 3.141592654),  # ('%10.3f', 3.141592654, ['     3.142']) | 5位空格, 整个长度10, 右对齐, 值数字, 填充空格
            ('%010.3' + A102[1:], 3.141592654),  # ('%010.3f', 3.141592654, ['000003.142']) | 右对齐, 值数字, 填充0
        ]
    ], sep='\n')

    print(*[(_, chr_fore(*_)) for _ in [
        ('6', A115, 'a'),  # (('6', '%s', 'a'), '     a')
        ('+6', A115, 'a'),  # (('+6', '%s', 'a'), '     a')
        ('-6', A115, 'a'),  # (('-6', '%s', 'a'), 'a     ')
        ('.3', A102, 3.141592654),  # (('.3', '%f', 3.141592654), '3.142')
        ('10.3', A102, 3.141592654),  # (('10.3', '%f', 3.141592654), '     3.142')
        ('010.3', A102, 3.141592654),  # (('010.3', '%f', 3.141592654), '000003.142')
    ]], sep='\n')


def main_01():
    print('正则表达式用法')


def main_02():
    v00, v01 = 0x00, 'a'

    print(*[
        sum_ords(v01),
        pad_00(v00),
        v_name(v00, sum_ords(v01)),
        row(v00, v01),
    ], sep=' | ')

    # ['\x0b', '\x0c']
    v02 = chr_args(0x0b, 0x0c)  # 11, 12
    # ['\x0e', '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e']
    v03 = chr_rang(0x0e, 0x1f)  # 14 ~ 31
    # ['\x7f']
    v04 = chr_args(0x7f)  # 127
    v05 = v02 + v03 + v04

    print(v05)

    # 97 | 00 | S000097 | (0, 'a', 97, 'S000097', "S000097 = 'a'")
    # ['\x0b', '\x0c', '\x0e', '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x7f']


def main_03():
    # https://www.baidufe.com/fehelper/trans-radix/index.html

    print(save(0x00, (
        group(0x00,
              # 00: '\x01' ~ 08: '\x08'
              chr_rang(0x00, 0x08) +
              # 11:'\x0b' | 12: '\x0c'
              chr_args(0x0b, 0x0c) +
              # 14: '\x0e' ~ 31: '\x1f'
              chr_rang(0x0e, 0x1f) +
              # 127: '\x7f'
              chr_args(0x7f)),
        group(0x01,
              # 09: '\t' | 10: '\n' | 13: '\r' | 92: '\\'
              chr_args(0x09, 0x0a, 0x0d, 0x5c)),
        group(0x02,
              # 32: ' ' ~ 47: '/'
              chr_rang(0x20, 0x2f) +
              # 58: ':' ~ 64: '@'
              chr_rang(0x3a, 0x40) +
              # 91: '['
              chr_args(0x5b) +
              # 93: ']' ~ 96: '`'
              chr_rang(0x5d, 0x60) +
              # 123: '{' ~ 126 '~'
              chr_rang(0x7b, 0x7e)),
        group(0x03,
              # 48: '0' ~ 57: '9'
              chr_rang(0x30, 0x39)),
        group(0x04,
              # 65: 'A' ~ 90: 'Z'
              chr_rang(0x41, 0x5a)),
        group(0x05,
              # 097: 'a' ~ 122: 'z'
              chr_rang(0x61, 0x7a)),
        group(0x06,
              # A099|A114|A115|A100|A111|A120|A101|A102
              [A099, A114, A115, A100, A111, A120, A101, A102]),

        group(0x07,
              # R098|R099|R100|R102|R120|R114|R115|R116|R118|R119|R122|R117
              [R098, R099, R100, R102, R120, R114, R115, R116, R118, R119, R122]),
    )))


def main():
    [(_(), print(K02)) for _ in (
        main_00,
        main_01,
        main_02,
        main_03,
    )]


# ----------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
