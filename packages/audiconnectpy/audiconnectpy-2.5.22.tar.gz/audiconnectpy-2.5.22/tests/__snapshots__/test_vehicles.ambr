# serializer version: 1
# name: test_vehicle_0
  dict({
    'core': dict({
      'model_year': 2022,
    }),
    'media': dict({
      'long_name': 'Audi A4 Berline S line S Edition 35 TFSI 110(150) kW(ch) S tronic',
      'short_name': 'Audi A4 Berline',
    }),
  })
# ---
# name: test_vehicle_0.1
  dict({
    'access_status': dict({
      'car_captured_timestamp': datetime.datetime(2024, 5, 11, 16, 41, 40, tzinfo=TzInfo(UTC)),
      'door_lock_status': False,
      'doors': dict({
        'locked': dict({
          'any_status': True,
          'bonnet': True,
          'front_left': True,
          'front_right': True,
          'rear_left': True,
          'rear_right': True,
          'trunk': True,
        }),
        'opened': dict({
          'any_status': False,
          'bonnet': False,
          'front_left': False,
          'front_right': False,
          'rear_left': False,
          'rear_right': False,
          'trunk': False,
        }),
      }),
      'overall_status': 'unsafe',
      'windows': dict({
        'any_status': False,
        'front_left': False,
        'front_right': False,
        'rear_left': False,
        'rear_right': False,
      }),
    }),
  })
# ---
# name: test_vehicle_0.2
  dict({
    'range_status': dict({
      'car_type': 'gasoline',
      'primary_engine': dict({
        'current_fuel_level_pct': 100,
        'current_soc_pct': 100,
        'remaining_range_km': 860,
        'type': 'gasoline',
      }),
      'secondary_engine': None,
      'total_range_km': 860,
    }),
  })
# ---
# name: test_vehicle_0.3
  dict({
    'maintenance_status': dict({
      'inspection_due_days': 131,
      'inspection_due_km': 8500,
      'mileage_km': 21512,
      'oil_service_due_days': 131,
      'oil_service_due_km': 8500,
    }),
  })
# ---
# name: test_vehicle_0.4
  dict({
    'lights_status': dict({
      'lights': dict({
        'any_status': True,
        'left': True,
        'right': True,
      }),
    }),
  })
# ---
# name: test_vehicle_0.5
  dict({
    'fuel_level_status': dict({
      'car_type': 'gasoline',
      'current_fuel_level_pct': 100,
      'current_soc_pct': None,
      'primary_engine_type': 'gasoline',
      'secondary_engine_type': None,
    }),
    'odometer_status': dict({
      'odometer': 21512,
    }),
    'range_status': dict({
      'ad_blue_range': None,
      'electric_range': None,
      'gasoline_range': 860,
      'total_range_km': 860,
    }),
    'temperature_battery_status': None,
  })
# ---
# name: test_vehicle_0.6
  dict({
    'oil_level_status': None,
  })
# ---
# name: test_vehicle_0.7
  dict({
    'warning_lights': None,
  })
# ---
# name: test_vehicle_1
  dict({
    'core': dict({
      'model_year': 2022,
    }),
    'media': dict({
      'long_name': 'Audi A4 Berline S line S Edition 35 TFSI 110(150) kW(ch) S tronic',
      'short_name': 'Audi A4 Berline',
    }),
  })
# ---
# name: test_vehicle_1.1
  dict({
    'capabilities_status': list([
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'webApp',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'automation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'batteryChargingCare',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'batteryColdWarning',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': None,
        'id': 'batterySupport',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'charging',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'chargingProfiles',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'chargingStations',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'climatisation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'climatisationTimers',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': None,
        'id': 'cubicNetwork',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'dealerAppointment',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'destinations',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'fuelStatus',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'ignition',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'mapUpdate',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'measurements',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'onlineSpeech',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingBrake',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingInformation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingPosition',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'personalizationOnline',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'plugAndCharge',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'poiSearch',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': None,
        'id': 'readiness',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'routing',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'state',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'trafficInformation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealth',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealthInspection',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealthWarnings',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleLights',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2082, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleWakeUpTrigger',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2028, 12, 25, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'webRadio',
        'user_disabling_allowed': True,
      }),
    ]),
  })
# ---
# name: test_vehicle_1.2
  dict({
    'access_status': dict({
      'car_captured_timestamp': datetime.datetime(2024, 3, 25, 10, 29, 31, 596000, tzinfo=TzInfo(UTC)),
      'door_lock_status': True,
      'doors': dict({
        'locked': dict({
          'any_status': True,
          'bonnet': True,
          'front_left': False,
          'front_right': False,
          'rear_left': False,
          'rear_right': False,
          'trunk': False,
        }),
        'opened': dict({
          'any_status': False,
          'bonnet': False,
          'front_left': False,
          'front_right': False,
          'rear_left': False,
          'rear_right': False,
          'trunk': False,
        }),
      }),
      'overall_status': 'safe',
      'windows': dict({
        'any_status': False,
        'front_left': False,
        'front_right': False,
        'rear_left': False,
        'rear_right': False,
      }),
    }),
  })
# ---
# name: test_vehicle_1.3
  dict({
    'battery_status': dict({
      'cruising_range_electric_km': 147,
      'current_soc_pct': 37,
    }),
    'charge_mode': dict({
      'available_charge_modes': list([
        'manual',
      ]),
      'preferred_charge_mode': 'manual',
    }),
    'charging_settings': dict({
      'auto_unlock_plug_when_charged': False,
      'auto_unlock_plug_when_charged_ac': None,
      'max_charge_current_ac': None,
      'target_soc_pct': None,
    }),
    'charging_status': dict({
      'charge_mode': 'manual',
      'charge_power_kw': 0.0,
      'charge_rate_kmph': 0,
      'charge_type': 'ac',
      'charging_settings': 'default',
      'charging_state': True,
      'remaining': None,
    }),
    'plug_status': dict({
      'external_power': True,
      'led_color': 'green',
      'plug_connection_state': True,
      'plug_lock_state': True,
    }),
  })
# ---
# name: test_vehicle_1.4
  dict({
    'climatisation_timers_status': dict({
      'time_in_car': datetime.datetime(2024, 3, 25, 11, 29, 32, tzinfo=TzInfo(+01:00)),
      'timers': list([
        dict({
          'enabled': False,
          'id': 1,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
        dict({
          'enabled': False,
          'id': 2,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_vehicle_1.5
  dict({
    'climatisation_settings': dict({
      'climatization_at_unlock': False,
      'target_temperature_c': 21,
      'target_temperature_f': 70,
      'unit_in_car': 'celsius',
      'window_heating_enabled': False,
      'zone_front_left_enabled': False,
      'zone_front_right_enabled': False,
      'zone_rear_left_enabled': None,
      'zone_rear_right_enabled': None,
    }),
    'climatisation_status': dict({
      'climatisation_state': 'off',
      'remaining_climatisation_time_min': 0,
    }),
    'window_heating_status': dict({
      'state': None,
    }),
  })
# ---
# name: test_vehicle_1.6
  dict({
    'range_status': dict({
      'car_type': 'electric',
      'primary_engine': dict({
        'current_fuel_level_pct': None,
        'current_soc_pct': 37,
        'remaining_range_km': 147,
        'type': 'electric',
      }),
      'secondary_engine': None,
      'total_range_km': 147,
    }),
  })
# ---
# name: test_vehicle_1.7
  dict({
    'maintenance_status': dict({
      'inspection_due_days': 261,
      'inspection_due_km': None,
      'mileage_km': 16221,
      'oil_service_due_days': None,
      'oil_service_due_km': None,
    }),
  })
# ---
# name: test_vehicle_1.8
  dict({
    'lights_status': dict({
      'lights': dict({
        'any_status': True,
        'left': True,
        'right': True,
      }),
    }),
  })
# ---
# name: test_vehicle_1.9
  dict({
    'fuel_level_status': dict({
      'car_type': 'electric',
      'current_fuel_level_pct': None,
      'current_soc_pct': None,
      'primary_engine_type': 'electric',
      'secondary_engine_type': None,
    }),
    'odometer_status': dict({
      'odometer': 16221,
    }),
    'range_status': dict({
      'ad_blue_range': None,
      'electric_range': None,
      'gasoline_range': None,
      'total_range_km': None,
    }),
    'temperature_battery_status': dict({
      'temperature_hv_battery_max_k': 283.15,
      'temperature_hv_battery_min_k': 281.65,
    }),
  })
# ---
# name: test_vehicle_2
  dict({
    'core': dict({
      'model_year': 2022,
    }),
    'media': dict({
      'long_name': 'Audi A4 Berline S line S Edition 35 TFSI 110(150) kW(ch) S tronic',
      'short_name': 'Audi A4 Berline',
    }),
  })
# ---
# name: test_vehicle_2.1
  dict({
    'capabilities_status': list([
      dict({
        'expiration_date': None,
        'id': 'webApp',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'automation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'batteryChargingCare',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'batteryColdWarning',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': None,
        'id': 'batterySupport',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'charging',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'chargingProfiles',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'chargingStations',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'climatisation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'climatisationTimers',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': None,
        'id': 'cubicNetwork',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'dealerAppointment',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'destinations',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'fuelStatus',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'ignition',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'mapUpdate',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'measurements',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'onlineSpeech',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingBrake',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingInformation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'parkingPosition',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'personalizationOnline',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'plugAndCharge',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'poiSearch',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2033, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'privateEmergencyCall',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': None,
        'id': 'readiness',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'roadsideAssistant',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'routing',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'state',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'trafficInformation',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealth',
        'user_disabling_allowed': True,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealthInspection',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleHealthWarnings',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleLights',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'vehicleWakeUpTrigger',
        'user_disabling_allowed': False,
      }),
      dict({
        'expiration_date': datetime.datetime(2025, 4, 19, 23, 59, 59, tzinfo=TzInfo(UTC)),
        'id': 'webRadio',
        'user_disabling_allowed': True,
      }),
    ]),
  })
# ---
# name: test_vehicle_2.2
  dict({
    'access_status': dict({
      'car_captured_timestamp': datetime.datetime(2023, 12, 23, 19, 36, 52, 444000, tzinfo=TzInfo(UTC)),
      'door_lock_status': True,
      'doors': dict({
        'locked': dict({
          'any_status': True,
          'bonnet': True,
          'front_left': False,
          'front_right': False,
          'rear_left': False,
          'rear_right': False,
          'trunk': False,
        }),
        'opened': dict({
          'any_status': False,
          'bonnet': False,
          'front_left': False,
          'front_right': False,
          'rear_left': False,
          'rear_right': False,
          'trunk': False,
        }),
      }),
      'overall_status': 'safe',
      'windows': dict({
        'any_status': False,
        'front_left': False,
        'front_right': False,
        'rear_left': False,
        'rear_right': False,
      }),
    }),
  })
# ---
# name: test_vehicle_2.3
  dict({
    'battery_status': dict({
      'cruising_range_electric_km': 212,
      'current_soc_pct': 56,
    }),
    'charge_mode': dict({
      'available_charge_modes': list([
        'manual',
        'preferredChargingTimes',
      ]),
      'preferred_charge_mode': 'manual',
    }),
    'charging_settings': dict({
      'auto_unlock_plug_when_charged': False,
      'auto_unlock_plug_when_charged_ac': None,
      'max_charge_current_ac': None,
      'target_soc_pct': None,
    }),
    'charging_status': dict({
      'charge_mode': 'manual',
      'charge_power_kw': 5.5,
      'charge_rate_kmph': 27,
      'charge_type': 'ac',
      'charging_settings': 'profile',
      'charging_state': True,
      'remaining': None,
    }),
    'plug_status': dict({
      'external_power': True,
      'led_color': 'green',
      'plug_connection_state': True,
      'plug_lock_state': True,
    }),
  })
# ---
# name: test_vehicle_2.4
  dict({
    'climatisation_timers_status': dict({
      'time_in_car': datetime.datetime(2023, 12, 23, 20, 36, 53, tzinfo=TzInfo(+01:00)),
      'timers': list([
        dict({
          'enabled': False,
          'id': 1,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
        dict({
          'enabled': False,
          'id': 2,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_vehicle_2.5
  dict({
    'climatisation_settings': dict({
      'climatization_at_unlock': True,
      'target_temperature_c': 22,
      'target_temperature_f': 72,
      'unit_in_car': 'celsius',
      'window_heating_enabled': True,
      'zone_front_left_enabled': False,
      'zone_front_right_enabled': False,
      'zone_rear_left_enabled': None,
      'zone_rear_right_enabled': None,
    }),
    'climatisation_status': dict({
      'climatisation_state': 'off',
      'remaining_climatisation_time_min': 0,
    }),
    'window_heating_status': dict({
      'state': None,
    }),
  })
# ---
# name: test_vehicle_2.6
  dict({
    'range_status': dict({
      'car_type': 'electric',
      'primary_engine': dict({
        'current_fuel_level_pct': None,
        'current_soc_pct': 56,
        'remaining_range_km': 212,
        'type': 'electric',
      }),
      'secondary_engine': None,
      'total_range_km': 212,
    }),
  })
# ---
# name: test_vehicle_2.7
  dict({
    'maintenance_status': dict({
      'inspection_due_days': 478,
      'inspection_due_km': None,
      'mileage_km': 10329,
      'oil_service_due_days': None,
      'oil_service_due_km': None,
    }),
  })
# ---
# name: test_vehicle_2.8
  dict({
    'lights_status': dict({
      'lights': dict({
        'any_status': True,
        'left': True,
        'right': True,
      }),
    }),
  })
# ---
# name: test_vehicle_2.9
  dict({
    'fuel_level_status': dict({
      'car_type': 'electric',
      'current_fuel_level_pct': None,
      'current_soc_pct': 56,
      'primary_engine_type': 'electric',
      'secondary_engine_type': None,
    }),
    'odometer_status': dict({
      'odometer': 10329,
    }),
    'range_status': dict({
      'ad_blue_range': None,
      'electric_range': 212,
      'gasoline_range': None,
      'total_range_km': 212,
    }),
    'temperature_battery_status': None,
  })
# ---
# name: test_vehicle_3
  dict({
    'climatisation_timers_status': dict({
      'time_in_car': datetime.datetime(2023, 12, 23, 20, 36, 53, tzinfo=TzInfo(+01:00)),
      'timers': list([
        dict({
          'enabled': False,
          'id': 1,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
        dict({
          'enabled': False,
          'id': 2,
          'single_timer': dict({
            'start': None,
            'start_local': None,
            'target': None,
            'target_local': None,
          }),
        }),
      ]),
    }),
  })
# ---
# name: test_vehicle_3.1
  dict({
    'climatisation_settings': dict({
      'climatization_at_unlock': True,
      'target_temperature_c': 22,
      'target_temperature_f': 72,
      'unit_in_car': 'celsius',
      'window_heating_enabled': True,
      'zone_front_left_enabled': False,
      'zone_front_right_enabled': False,
      'zone_rear_left_enabled': None,
      'zone_rear_right_enabled': None,
    }),
    'climatisation_status': dict({
      'climatisation_state': 'heating',
      'remaining_climatisation_time_min': 0,
    }),
    'window_heating_status': dict({
      'state': None,
    }),
  })
# ---
# name: test_vehicle_3.2
  dict({
    'battery_status': dict({
      'cruising_range_electric_km': 212,
      'current_soc_pct': 56,
    }),
    'charge_mode': dict({
      'available_charge_modes': list([
        'manual',
        'preferredChargingTimes',
      ]),
      'preferred_charge_mode': 'manual',
    }),
    'charging_settings': dict({
      'auto_unlock_plug_when_charged': False,
      'auto_unlock_plug_when_charged_ac': None,
      'max_charge_current_ac': None,
      'target_soc_pct': None,
    }),
    'charging_status': dict({
      'charge_mode': 'manual',
      'charge_power_kw': 5.5,
      'charge_rate_kmph': 27,
      'charge_type': 'ac',
      'charging_settings': 'profile',
      'charging_state': True,
      'remaining': None,
    }),
    'plug_status': dict({
      'external_power': False,
      'led_color': 'none',
      'plug_connection_state': False,
      'plug_lock_state': False,
    }),
  })
# ---
