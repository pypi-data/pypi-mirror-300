#
# File:    ./tox.ini
# Author:  Jiří Kučera <sanczes AT gmail.com>
# Date:    2021-06-21 23:58:43 +0200
# Project: vutils-testing: Auxiliary library for writing tests
# Brief:   Configuration for tox
#
# SPDX-License-Identifier: MIT
#

[tox]
envlist =
    py{38,39,310,311,312}, linters
isolated_build = True
skip_missing_interpreters = True

[testenv]
passenv = *
description =
    {envname}: Run unit tests for {envname}
deps =
    idna >=3.7
    pip-audit
    pytest
    pytest-cov
    coveralls
allowlist_externals =
    bash
    rm
install_command =
    bash -c '\
      python -I -m pip install -U \
        "requests >=2.32.0" \
        "pip >=23.3" \
        "setuptools >=65.5.1" \
        "wheel >=0.38.1"; \
      python -I -m pip install "$@" \
    ' -- {opts} {packages}
commands =
    python -m pip_audit --progress-spinner off
    pytest -v --cov=vutils.testing --cov-report=term-missing tests
    {env:COVERALLS_CMD:coveralls --output={envname}-coverage.txt}

[linters]
envdir = {toxworkdir}/env-linters
basepython = python3
skipsdist = True
skip_install = True
setenv =
    PYTHONPATH=src

[testenv:check]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run general checks
deps =
    idna >=3.7
    pip-audit
    check-manifest
    twine
commands =
    python -m pip_audit --progress-spinner off
    bash -c 'python -m pip_audit --progress-spinner off -r <(pip freeze --all)'
    check-manifest .
    rm -rfv dist
    python -m build
    twine check --strict dist/*

[testenv:black]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run formatting checks
deps =
    black
commands =
    black --check --diff .

[testenv:isort]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run import order checks
deps =
    isort
commands =
    isort --diff -c .

[testenv:pylint]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run static code checks
deps =
    pylint
    pytest
commands =
    pylint src tests/unit

[testenv:flake8]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run style checks
deps =
    flake8
    flake8-logging-format
    flake8-pyi
commands =
    flake8

[testenv:mypy]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run type checks
deps =
    mypy
commands =
    mypy --namespace-packages -p vutils.testing

[testenv:bandit]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run security analyzer
deps =
    bandit
commands =
    bandit -vlir src/vutils/testing tests/unit

[testenv:pydocstyle]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
description =
    {envname}: Run doc strings checks
deps =
    pydocstyle
commands =
    pydocstyle src/vutils/testing tests/unit

[testenv:linters]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
skipsdist = {[linters]skipsdist}
skip_install = {[linters]skip_install}
setenv = {[linters]setenv}
ignore_errors = true
description =
    {envname}: Run linters
deps =
    {[testenv:check]deps}
    {[testenv:black]deps}
    {[testenv:isort]deps}
    {[testenv:pylint]deps}
    {[testenv:flake8]deps}
    {[testenv:mypy]deps}
    {[testenv:bandit]deps}
    {[testenv:pydocstyle]deps}
commands =
    {[testenv:check]commands}
    {[testenv:black]commands}
    {[testenv:isort]commands}
    {[testenv:pylint]commands}
    {[testenv:flake8]commands}
    {[testenv:mypy]commands}
    {[testenv:bandit]commands}
    {[testenv:pydocstyle]commands}
