# LLM prompts for various text generation tasks.

[prompts]
features_list = """Create a list of key features for a software framework. \
Each feature should start with a relevant emoji that aligns with the feature‚Äôs theme. \
The features should focus on various aspects of the framework, such as performance, scalability, flexibility, integration with other tools, automation, or any other significant benefit.

Here‚Äôs an example structure:

- üöÄ **Feature 1**: Describe a feature that highlights performance or efficiency.
- üîß **Feature 2**: Emphasize flexibility or customization options available to users.
- üåê **Feature 3**: Explain how the framework integrates with other tools or platforms to enhance the development experience.
- üîí **Feature 4**: Highlight security measures that protect user data or the system.
- ‚ö° **Feature 5**: Focus on automation or any process that simplifies complex tasks.

Each feature should be clear, concise, and no longer than two sentences, while maintaining a professional and engaging tone. \
Feel free to vary the themes to cover a broad range of potential benefits.

While generating the response, please reference the following codebase context information:

CONTEXT:
------------------------
DEPENDENCIES: {1}
DOCUMENTATION: {2}
FILE CONTENTS: {3}
------------------------

Output must be in Markdown format. Cheers!
"""

features_table = """Hello! Please analyze the key technical capabilities and characteristics of the project {0} and describe them in a Markdown table format:

|      | Feature         | Summary       |
| :--- | :---:           | :---          |
| ‚öôÔ∏è  | **Architecture**  | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üî© | **Code Quality**  | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üìÑ | **Documentation** | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üîå | **Integrations**  | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üß© | **Modularity**    | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üß™ | **Testing**       | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| ‚ö°Ô∏è  | **Performance**   | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üõ°Ô∏è | **Security**      | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üì¶ | **Dependencies**  | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |
| üöÄ | **Scalability**   | <ul><li>Fact 1</li><li>Fact 2</li><li>Fact 3</li></ul> |

While generating the markdown table, please reference the following codebase details: \n

CONTEXT DETAILS:
------------------------
DEPENDENCIES: {1}
DOCUMENTATION: {2}
FILE CONTENTS: {3}
------------------------

ADDITIONAL INSTRUCTIONS:
------------------------
1. Highlight the key tools and technologies using the " `<tool>` " where necessary.
2. Include 2-4 bullet points per feature.
3. Include links or references to the codebase where applicable.
------------------------

Cheers!
"""

file_summary = """Deliver a succinct summary that highlights the main purpose and \
use of the code file provided in regards to the entire codebase architecture. Focus \
on what the code achieves, steering clear of technical implementation details. \
While generating the summary, reference additional data about the project below: \n

CONTEXT DETAILS:
------------------------
PROJECT STRUCTURE: {0}
FILE PATH: {1}
FILE CONTENT: {2}
------------------------

ADDITIONAL INSTRUCTIONS:
------------------------
1. Avoid using words like 'This file', 'The file', 'This code', etc.
  1a. Summary should start with a verb or noun to make it more clear and concise.
2. Do not include quotes, code snippets, bullets, or lists in your response.
3. RESPONSE LENGTH: 50-70 words.
------------------------

Thank you for your hard work!
"""

logo = """
You are tasked with creating a simple, cute mascot icon in a minimalist style specifically designed as a standalone iPhone app icon. Your goal is to design an icon with a singular main centerpiece that defines the entire shape of the icon, without any external borders or background.

First, review the project details:

<project_name>
{project_name}
</project_name>

<project_overview>
{project_overview}
</project_overview>

<project_slogan>
{project_slogan}
</project_slogan>

Now, follow these detailed instructions to create the mascot icon:

1. Use thick, rounded outlines to define the mascot's shape.
2. Employ basic geometric shapes for facial features (e.g., dots for eyes, simple shapes for nose/mouth).
3. Ensure a chunky, squat body proportion for a cute appearance.
4. Incorporate distinctive features of the mascot animal/character/hero in a simplified form.
5. Maintain a friendly, approachable expression.
6. Fill the square app-icon canvas with the mascot, centered and occupying most of the space.
7. The mascot's shape itself should form the icon boundary‚Äîno additional borders or background elements.
8. The design should be visually complete and balanced without relying on a background.

When designing the mascot, consider the following to incorporate the project's essence:
- Reflect on the project name, overview, and slogan to capture the spirit of the project.
- Choose colors, shapes, or elements that align with the project's purpose and values.
- Ensure the mascot's expression and overall design convey the project's tone (e.g., friendly, professional, playful).

To present your final design, follow these steps:
1. Describe the mascot's overall appearance and how it relates to the project.
2. Detail the specific geometric shapes used for the body and facial features.
3. Explain the color choices and how they connect to the project's theme.
4. Describe how the mascot's shape forms the icon boundary without additional elements.
5. Justify how the design embodies the project's essence and purpose.

Present your final design description inside <mascot_design> tags. Remember to focus on creating a standalone icon where the mascot's shape defines the boundaries and serves as the singular main centerpiece.
"""

overview = """
Analyze the codebase, {0}, and provide a robust, yet succinct overview of the software project.
Craft a paragraph that encapsulate the project's core use-case, value proposition, and target audience.
Ensure the overview is engaging, informative, and free of technical jargon.

While generating the project overview, please reference the following codebase details:

<CONTEXT>
FILE SUMMARIES: {1}
</CONTEXT>

<ADDITIONAL INSTRUCTIONS>
1. FOCUS: Elegantly present the project's core use-case and value proposition without technical details.
2. EXCLUDE: technical jargon, code snippets, and implementation specifics, quotes, links.
3. RESPONSE LENGTH: 50 maximum words.
</ADDITIONAL INSTRUCTIONS>

Thank you, have fun, and learn something new!
"""

slogan = """
Conceptualize a catchy and memorable slogan for the project: {0} ({1}).
Your response should synthesize the project's essence, values, or unique selling points into a concise and engaging phrase.
While generating the slogan, please reference the following codebase details:

<CONTEXT>
FILE CONTENTS: {2}
</CONTEXT>

<REQUIRED INSTRUCTIONS>
1. GOAL: Slogan should be clear, concise and memorable.
2. DO NOT: Do not include the project's name your response!
3. RESPONSE LENGTH: Maximum of 8 words.
</REQUIRED INSTRUCTIONS>

Be creative, think outside the box, and thank you for your hard work. Cheers!
"""
