"""Run QC checks for the esopredict."""
import logging
import os
import pathlib
import sys
from pathlib import Path

import click
import yaml
from rich.console import Console

from previsedx_esopredict_qc_utils import constants
from previsedx_esopredict_qc_utils.console_helper import print_green, print_yellow, print_red
from previsedx_esopredict_qc_utils.qc.manager import Manager
from previsedx_esopredict_qc_utils.file_utils import check_indir_status, check_infile_status


DEFAULT_OUTDIR = os.path.join(os.path.abspath(os.getcwd()), constants.DEFAULT_TIMESTAMP)

console = Console()


def validate_verbose(ctx, param, value):
    """Validate the validate option.

    Args:
        ctx (Context): The click context.
        param (str): The parameter.
        value (bool): The value.

    Returns:
        bool: The value.
    """

    if value is None:
        click.secho(
            "--verbose was not specified and therefore was set to 'True'", fg="yellow"
        )
        return constants.DEFAULT_VERBOSE
    return value


@click.command()  # type: ignore
@click.option(
    "--config_file",
    type=click.Path(exists=True),
    help=f"Optional: The configuration file for this project - default is '{constants.DEFAULT_CONFIG_FILE}'",
)  # type: ignore
@click.option(
    "--indir",
    help="Optional: The directory containing a single sample's QuantStudio qPCR Results files - default is the current working directory.",
)  # type: ignore
@click.option(
    "--infile",
    help="Required: The esopredict tab-delimited intermediate file generated by the esopredict-report-generator.",
)  # type: ignore
@click.option("--logfile", help="Optional: The log file")  # type: ignore
@click.option(
    "--outdir",
    help=f"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'",
)  # type: ignore
@click.option("--outfile", help="Optional: The output validation report file")  # type: ignore
@click.option(
    "--verbose",
    is_flag=True,
    help=f"Will print more info to STDOUT - default is '{constants.DEFAULT_VERBOSE}'.",
    callback=validate_verbose,
)  # type: ignore
def main(
    config_file: str,
    indir: str,
    infile: str,
    logfile: str,
    outdir: str,
    outfile: str,
    verbose: bool,
) -> None:
    """Run QC checks for the esopredict."""
    error_ctr = 0

    if infile is None:
        print_red("--infile was not specified")
        error_ctr += 1

    if error_ctr > 0:
        click.echo(click.get_current_context().get_help())
        sys.exit(1)

    check_infile_status(infile)

    if indir is None:
        indir = os.path.abspath(os.getcwd())
        print_yellow(
            f"--indir was not specified and therefore was set to the current working directory '{indir}'"
        )

    check_indir_status(indir)

    if config_file is None:
        config_file = constants.DEFAULT_CONFIG_FILE
        print_yellow(
            f"--config_file was not specified and therefore was set to '{config_file}'"
        )

    check_infile_status(config_file, extension="yaml")

    if outdir is None:
        outdir = DEFAULT_OUTDIR
        print_yellow(f"--outdir was not specified and therefore was set to '{outdir}'")

    if not os.path.exists(outdir):
        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)

        print_yellow(f"Created output directory '{outdir}'")

    if logfile is None:
        logfile = os.path.join(
            outdir, os.path.splitext(os.path.basename(__file__))[0] + ".log"
        )
        print_yellow(
            f"--logfile was not specified and therefore was set to '{logfile}'"
        )

    if outfile is None:
        outfile = os.path.join(
            outdir,
            os.path.splitext(os.path.basename(__file__))[0] + ".qc-checks-report.txt",
        )
        print_yellow(
            f"--outfile was not specified and therefore was set to '{outfile}'"
        )

    logging.basicConfig(
        format=constants.DEFAULT_LOGGING_FORMAT,
        level=constants.DEFAULT_LOGGING_LEVEL,
        filename=logfile,
    )

    logging.info(f"Will load contents of config file '{config_file}'")
    config = yaml.safe_load(Path(config_file).read_text())

    manager = Manager(
        config=config,
        config_file=config_file,
        logfile=logfile,
        indir=indir,
        infile=infile,
        outdir=outdir,
        outfile=outfile,
        verbose=verbose,
    )

    manager.run_qc_checks()

    if verbose:
        print_yellow(f"The log file is '{logfile}'")
        print_green(f"Execution of '{os.path.abspath(__file__)}' completed")


if __name__ == "__main__":
    main()
