# coding: utf-8
"""
    Snowflake Role API.

    The Snowflake Role API is a REST API that you can use to access, update, and perform certain actions on Role resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, Field, field_validator

from typing import Any, ClassVar, Dict, List, Optional

from typing_extensions import Annotated


class MatchCriteria(BaseModel):
    """A model object representing the MatchCriteria resource.

    Constructs an object of type MatchCriteria with the provided properties.

    Parameters
    __________
    database : str
        Database name of the securable match if applicable.
    var_schema : str, optional
        Schema name of the securable match if applicable.
    """

    database: Annotated[str, Field(strict=True)]

    var_schema: Optional[Annotated[str,
                                   Field(strict=True)]] = Field(default=None,
                                                                alias="schema")

    __properties = ["database", "schema"]

    @field_validator('database')
    def database_validate_regular_expression(cls, v):

        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(
                r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/"""
            )
        return v

    @field_validator('var_schema')
    def var_schema_validate_regular_expression(cls, v):

        if v is None:
            return v
        if not re.match(r"""^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$""", v):
            raise ValueError(
                r"""must validate the regular expression /^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$/"""
            )
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatchCriteria:
        """Create an instance of MatchCriteria from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatchCriteria:
        """Create an instance of MatchCriteria from a dict."""

        if obj is None:
            return None

        if type(obj) is not dict:
            return MatchCriteria.parse_obj(obj)

        _obj = MatchCriteria.parse_obj({
            "database": obj.get("database"),
            "var_schema": obj.get("schema"),
        })

        return _obj


from typing import Optional, List, Dict


class MatchCriteriaModel():

    def __init__(
        self,
        database: str,
        # optional properties
        var_schema: Optional[str] = None,
    ):
        """A model object representing the MatchCriteria resource.

        Constructs an object of type MatchCriteria with the provided properties.

        Parameters
        __________
        database : str
            Database name of the securable match if applicable.
        var_schema : str, optional
            Schema name of the securable match if applicable.
        """

        self.database = database
        self.var_schema = var_schema

    __properties = ["database", "schema"]

    def _to_model(self):
        return MatchCriteria(
            database=self.database,
            var_schema=self.var_schema,
        )

    @classmethod
    def _from_model(cls, model) -> MatchCriteriaModel:
        return MatchCriteriaModel(
            database=model.database,
            var_schema=model.var_schema,
        )

    def to_dict(self):
        """Creates a dictionary of the properties from a MatchCriteria.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the MatchCriteria object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> MatchCriteriaModel:
        """Creates an instance of MatchCriteria from a dict.

        This method constructs a MatchCriteria object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        MatchCriteria
            A MatchCriteria object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(MatchCriteria.from_dict(obj))


MatchCriteria._model_class = MatchCriteriaModel
