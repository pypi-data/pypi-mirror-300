Metadata-Version: 2.1
Name: model-alignment
Version: 0.2
Summary: Model Alignment: Aligning prompts to human preferences through natural language feedback
Author: Google, LLC
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/pair-code/model-alignment
Project-URL: Repository, https://github.com/PAIR-code/model-alignment
Project-URL: Bug Tracker, https://github.com/PAIR-code/model-alignment/issues
Keywords: explainable,explainable artifical intelligence,XAI,natural language processing,artifical intelligence,machine learning,deep learning
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: google-generativeai >=0.3.0
Requires-Dist: jinja2
Requires-Dist: keras >=3.0.0
Requires-Dist: keras-nlp
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: scikit-learn
Requires-Dist: tqdm

# Model Alignment

Model Alignment is a python library from the [PAIR](https://pair.withgoogle.com/)
team that enable users to create model prompts through user feedback instead of
manual prompt writing and editing. The technique makes use of constitutional
principles to align prompts to users' desired values.

The library ships with two different APIs:

-   Single-run Prompts: Interactively critique/kudos/rewrite responses to a
    prompt in order to create principles that are used to update a prompt.

-   Constitutional Experts: Use labeled training data to automatically create a
    prompt based on principles derived from the data.

## Installation

Install the model-alignment library through pip:

`pip install model-alignment`

## Use-Cases

### Single-Run Prompts

Check out our research paper [ConstitutionMaker: Interactively Critiquing Large
Language Models by Converting Feedback into
Principles](https://arxiv.org/abs/2310.15428) from [IUI
2024](https://iui.acm.org/2024/) for details on principle-based prompt alignment
through interactive feedback.

A simplified workflow of aligning single-run prompts can be seen in the image
below:

![Simplified workflow for alignment for single-run prompts](img/model_alignment.svg)

#### Demo Notebook

A demo Colab notebook for single-run interactive prompt alignment can be found
at
https://colab.research.google.com/github/pair-code/model-alignment/blob/main/notebooks/Single_Run_Prompt_API_for_Model_Alignment.ipynb.

A separate demo Colab notebook that makes use of the open-weights Gemma model
can be found at
https://colab.research.google.com/github/pair-code/model-alignment/blob/main/notebooks/Gemma_for_Model_Alignment.ipynb.

#### API Details

The main class to support single-run prompt alignment can be found in the
`AlignableSingleRun` class. The data for a given single-run prompt, including
its principles, is stored by this python class in the `ConstitutionalPrompt`
object.

`AlignableSingleRun` must be provided an instance of a `ModelHelper` in its
constructor. The `ModelHelper` wraps the LLM that will be used to both provide a
response given the prompt and also to create principles from user feedback. We
provide an implementation of `ModelHelper` for using [Gemini
models](https://ai.google.dev/api/python/google/generativeai) through Google's
Developer API and one for using the open-weights
[Gemma models](https://www.kaggle.com/models/google/gemma-2) running locally.
If desired, separate `ModelHelper` instances can be provided in the constructor
with the first instance used for the running of the prompt and the second used
for the model calls to perform alignment of the prompt.

##### Prompt Construction and Model Response.

Single-run prompts consist of three parts:

1.  A prompt preamble provided by the client, referred to as a
    `model_description`. Prompts can include variables that can be set when the
    prompt is run by wrapping the variables in curly brackets.
2.  A set of constitutional principles that are automatically added after the
    preamble.
3.  A user input for the specific request to the model.

For example, you could create a single-run prompt for providing creative uses
for an item by setting the model description to "Give three uses for the
following item: {item}".
Note that any variables in a prompt must be wrapped in curly brackets.

```python
single_run_prompt = single_run.AlignableSingleRun(model_helper.PalmModelHelper(palm_api_key))
single_run_prompt.set_model_description("Give three uses for the following item: {item}")
```

Then you can call the model through the `send_input` method which takes in a
dictionary with the mapping of any variables in the prompt to the values they
should use. If the prompt does not contain any variables, then no inputs are
necessary to the `send_input` method.

```python
response = single_run_prompt.send_input({"item": "scissors"})
print(response)
```

##### Generating Principles From Feedback and Applying Them.

After getting a model response through the `send_input` method, you can provide
feedback for the prompt with that input through one of three methods. The result
of any of these methods is that the principles list stored by the single-run
prompt object will be updated based on the feedback, and the updated principle
list will be returned:

1.  `critique_response` where you provide a reason why the response could use
    improvement.
2.  `kudos_response` where you provide a reason why the response was a good
    response.
3.  `rewrite_response` where you provide your own version of the model response
    that better aligns with what you wanted the model to return.

In all of these cases, the principles stored by the prompt will be updated in
one of three ways:

1.  A principle may be added to capture the feedback.
2.  An existing principle may be deleted if the feedback contradicts an existing
    principle.
3.  A principle may be updated if the feedback is related to an existing
    principle.

Once you have a set of principles you wish to apply to the prompt, the method
`update_model_description_from_principles` will update the stored prompt based
on the principles and return the newly-updated prompt.

Future calls to `send_input` will make use of the updated prompt.

```python
response = single_run_prompt.send_input("scissors")
# Response contains "1. Cut paper.\n2. Cut cloth.\n3. Cut hair."

single_run_prompt.critique_response("the list doesn't include any creative uses")
# The returned principles list now includes the principle "Include at least one creative use for the item"

single_run_prompt.update_model_description_from_principles()
# The prompt is now updated based on the new principle and the updated prompt is returned.

new_response = single_run_prompt.send_input("scissors")
# The new response contains "1. Cut paper.\n2. Cut cloth.\n3. Make paper snowflakes."
```

##### Automatically Creating Feedback

After calling `send_input`, there are two methods you can call to get
auto-generated feedback that can be provided to the `critique_response` and
`kudos_response` methods described above. This can help you ideate the types of
feedback you may wish to provide for generating principles.

These methods are `generate_critiques` and `generate_kudos` and each will return
a list of proposed feedback statements.

```python
response = single_run_prompt.send_input("scissors")
# Response contains "1. Cut paper.\n2. Cut cloth.\n3. Cut hair."

single_run_prompt.generate_critiques()
# The returned critiques list is ["The first item is too general.", "The items are missing supporting details.", "The first and second items are too similar."]
```

##### Direct Access to the Underlying Prompt Info

The `data` property of the `AlignableSingleRun` object contains the
`ConstitutionalPrompt` object that stores the model description, list of
principles, and the list of inputs and their corresponding outputs from using
this prompt.

##### Updating Prompts Directly From Feedback

This library also provides an alternative approach to updating prompts from
user-provided feedback. Instead of turning feedback into constitutional
principles, and then updating prompts from a list of principles, prompts can be
updated directly based on feedback without going through the intermediate step
of constitutional principle creation.

This approach is more efficient in that it only requires a single model call
for each piece of feedback, as opposed to two calls (one to turn feedback into a
principle and then another to update the prompt based on the principles). But,
this approach doesn't provide an explicit list of principles. Such a list can be
helpful for understanding the goals of a prompt and also for sharing principles
between prompts.

For this approach, call `update_model_description_from_feedback` with
feedback based on a use of the prompt. The prompt will be automatically updated
and returned by this method call.

```python
response = single_run_prompt.send_input("scissors")
# Response contains "1. Cut paper.\n2. Cut cloth.\n3. Cut hair."

single_run_prompt.update_model_description_from_feedback("the list doesn't include any creative uses")
# The returned updated prompt may be something like ""Give three uses for the following item, including at least one creative use: {item}"
```

### Constitutional Experts

We provide a library for training / evolving natural language classification
prompts. The evolution protocol is modeled off standard neural network training
concepts:

-   Weights / parameters: the natural language prompt (the final artifact from a
    training run)
-   Gradient descent: diagnose the issue with the current version of the prompt
    (e.g. the prompt uses overly formal language), and edit the prompt in the
    opposite direction (e.g. edit the prompt to use less formal language)
-   Optimization objective: to find a natural language prompt that generates
    accurate labels given a labeled dataset

Check out our research paper [ConstitutionalExperts: Training a Mixture of
Principle-based Prompts](https://arxiv.org/abs/2403.04894) from [ACL
2024](https://2024.aclweb.org/) for more information including detailed
evaluations.

#### Demo Notebook

A demo Colab notebook for single-run interactive prompt alignment can be found
at
https://colab.research.google.com/github/pair-code/model-alignment/blob/main/notebooks/Labeler_API_for_Model_Alignment.ipynb.

#### API Details

The main class for building a labeler can be found in the `Labeler` class. To
initialize a labeler, the user provides a few parameters that describe the
labeling task:

```python
labeler_maker = labeler.Labeler(input_names=['comment'], # The input features on which classification is based.
                       label_name='isHate', # The feature to be predicted.
                       label_values = [True, False],
                       task_description='Does the example contain offensive text?',
                       train_model_helper=model_helper.GeminiModelHelper(api_key, model_name='gemini-pro'),
                       eval_model_helper=model_helper.GeminiModelHelper(api_key, model_name=='gemini-pro'))
```

As part of initialization the user also defines a `train_model_helper` (the
model to be used in training) and `eval_model_helper` (the model to be used for
evaluation). We recommend using a larger model for training.

We provide a high-level API that lets users train classification prompts in a
hands-off fashion:

```python
toxicity_labeler = labeler_maker.initialize_checkpoint(train_df)

for i in range(NUM_TRAIN_STEPS):
  toxicity_labeler = labeler_maker.train_step(toxicity_labeler, train_df)
  predictions = labeler_maker.infer_checkpoint(toxicity_labeler, test_df)
  scorecard = labeler_maker.get_scorecard(test_df, predictions)
  print(f"Accuracy: {scorecard['accuracy']}")
```

The user only needs to provide a training (`train_df`) and evaluation
(`test_df`) set.

The final artifact produced at the end of training is a natural language prompt,
formulated in a "constitutional" style (the classification objective is
formulated in terms of principles). For example, the following is a sample
constitutional prompt trained on a toxicity classification objective:

```python
labeler.print_checkpoint(toxicity_labeler)
```

==================== Attributes for: False ====================

93931: Comment does not contain negative or hateful language towards a person or
group.

==================== Attributes for: True ====================

62194: Comment contains content that expresses hate or discrimination towards a
marginalized group.

This prompt can be used on unlabeled examples like so:

```python
new_examples = pd.DataFrame({'comment': ['I hate all people', 'I love my sister']})
predictions = labeler_maker.infer_checkpoint(toxicity_labeler, new_examples)

# Review predictions
for index, item in enumerate(zip(new_examples.iterrows(), predictions)):
  i, example = item[0]
  print(f"Example {index}")
  features = example[INPUTS].to_dict()
  for feature in INPUTS:
    print(f'{feature}: {features[feature]}')
  print("Prediction:", item[1]['prediction'])
```

#### Training hyperparameters

Labeler performance can be greatly impacted by the choice of hyperparameters. By
default, we initialize with the following hyperparameters:

```python
DEFAULT_HPARAMS: TrainingHyperparameters = {
    'n_incorrect_predictions_to_sample': 3,
    'n_mutations_to_try': 2,
    'n_best': 3,
    'score_fn': 'accuracy',
    'n_validation_examples': 100,
    'truncation_length': 100,
}
```

Hyperparameters are documented in `labeler_types.py`. In general, increasing the
hyperparameter values will improve the accuracy of the prompt, but will increase
training time.
