import vyos

entity Group extends vyos::ConfigNode:
    string name
    string group_type
end

index Group(name, host)

entity AddressGroup extends Group:
    string[] addresses
    string description="inmanta managed address-group"
end

implementation addressGroup for AddressGroup:
    self.node_name = "firewall group address-group {{ name }}"
    self.group_type = "address-group"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/firewall_address_group.j2"),
        skip_on_connect_error=host.skip_on_connect_error,
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement AddressGroup using addressGroup

entity NetworkGroup extends Group:
    std::ipv4_interface[] networks
    string description = "inmanta managed network-group"
end

implementation networkGroup for NetworkGroup:
    self.node_name = "firewall group network-group {{ name }}"
    self.group_type = "network-group"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/firewall_network_group.j2"),
        skip_on_connect_error=host.skip_on_connect_error,
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement NetworkGroup using networkGroup

entity PortGroup extends Group:
    string[] ports
    string description = "inmanta managed port-group"
end

implementation portGroup for PortGroup:
    self.node_name = "firewall group port-group {{ name }}"
    self.group_type = "port-group"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/firewall_port_group.j2"),
        skip_on_connect_error=host.skip_on_connect_error,
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement PortGroup using portGroup

typedef action_t as string matching self in ["accept", "drop", "reject"]
typedef protocol_t as string matching self in ["tcp_udp", "all", "icmp", "tcp", "udp"] # Only a small subset for now

entity Rule:
    number id
    action_t action
    protocol_t protocol
    string description = "inmanta managed rule"
end

Rule.source[0:] -- Group
Rule.destination[0:] -- Group

index Rule(id, ruleset)

implement Rule using std::none

entity RuleSet extends ConfigNode:
    string name
    action_t default_action
    string description = "inmanta managed ruleset"
end

index RuleSet(name, host)
RuleSet.rules[0:] -- Rule.ruleset[1]

implementation ruleSet for RuleSet:
    self.node_name = "firewall name {{ name }}"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/firewall_ruleset.j2"),
        skip_on_connect_error=host.skip_on_connect_error,
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
    for rule in self.rules:
        for group in rule.source:
            self.config.requires += group.config
        end
        for group in rule.destination:
            self.config.requires += group.config
        end
    end
end

implement RuleSet using ruleSet
