# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError
import httpx
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.pydantic_utilities import pydantic_v1
from .core.request_options import RequestOptions
from .environment import NeuralTrustApiEnvironment
from .errors.method_not_allowed_error import MethodNotAllowedError
from .types.metadata import Metadata
from .types.trace_response import TraceResponse
from .types.trace_task import TraceTask
from .types.user import User

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)

class NeuralTrustApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : NeuralTrustApiEnvironment
        The environment to use for requests from the client. from .environment import NeuralTrustApiEnvironment
        Defaults to NeuralTrustApiEnvironment.DEFAULT
    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 240 seconds, unless a custom httpx client is used, in which case this default is not enforced.
    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.
    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    Examples
    --------
    from NeuralTrust.client import NeuralTrustApi
    client = NeuralTrustApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: NeuralTrustApiEnvironment = NeuralTrustApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 240 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def trace(
        self,
        *,
        conversation_id: str,
        interaction_id: str,
        type: str,
        task: TraceTask,
        input: str,
        start_timestamp: str,
        end_timestamp: str,
        session_id: typing.Optional[str] = OMIT,
        channel_id: typing.Optional[str] = OMIT,
        output: typing.Optional[str] = OMIT,
        custom: typing.Optional[str] = OMIT,
        user: typing.Optional[User] = OMIT,
        metadata: typing.Optional[Metadata] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> TraceResponse:
        """
        Add a new trace
        Parameters
        ----------
        conversation_id : str
            conversation id
        interaction_id : str
            interaction id
        type : str
            type of trace
        task : TraceTask
            task to perform
        input : str
            content to retrieve or generate
        start_timestamp : str
            start timestamp of the trace
        end_timestamp : str
            end timestamp of the trace
        session_id : typing.Optional[str]
            session id
        channel_id : typing.Optional[str]
            channel id
        output : typing.Optional[str]
            generated content
        custom : typing.Optional[str]
            custom data
        user : typing.Optional[User]
        metadata : typing.Optional[Metadata]
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        Returns
        -------
        TraceResponse
            Successful operation

        Examples
        --------
        from NeuralTrust.client import NeuralTrustApi
        client = NeuralTrustApi(
            api_key="YOUR_API_KEY",
        )
        client.trace(
            conversation_id="conversation_id",
            interaction_id="interaction_id",
            type="type",
            task="retrieval",
            input="What is the weather in Tokyo?",
            start_timestamp="start_timestamp",
            end_timestamp="end_timestamp",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "trace",
            method="POST",
            json={
                "conversation_id": conversation_id,
                "interaction_id": interaction_id,
                "session_id": session_id,
                "type": type,
                "task": task,
                "channel_id": channel_id,
                "input": input,
                "output": output,
                "start_timestamp": start_timestamp,
                "end_timestamp": end_timestamp,
                "custom": custom,
                "user": user,
                "metadata": metadata,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(TraceResponse, _response.json())  # type: ignore
            if _response.status_code == 405:
                raise MethodNotAllowedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNeuralTrustApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : NeuralTrustApiEnvironment
        The environment to use for requests from the client. from .environment import NeuralTrustApiEnvironment
        Defaults to NeuralTrustApiEnvironment.DEFAULT
    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 240 seconds, unless a custom httpx client is used, in which case this default is not enforced.
    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.
    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    Examples
    --------
    from NeuralTrust.client import AsyncNeuralTrustApi
    client = AsyncNeuralTrustApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: NeuralTrustApiEnvironment = NeuralTrustApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 240 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def trace(
        self,
        *,
        conversation_id: str,
        interaction_id: str,
        type: str,
        task: TraceTask,
        input: str,
        start_timestamp: str,
        end_timestamp: str,
        session_id: typing.Optional[str] = OMIT,
        channel_id: typing.Optional[str] = OMIT,
        output: typing.Optional[str] = OMIT,
        custom: typing.Optional[str] = OMIT,
        user: typing.Optional[User] = OMIT,
        metadata: typing.Optional[Metadata] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> TraceResponse:
        """
        Add a new trace

        Parameters
        ----------
        conversation_id : str
            conversation id
        interaction_id : str
            interaction id
        type : str
            type of trace
        task : TraceTask
            task to perform
        input : str
            content to retrieve or generate
        start_timestamp : str
            start timestamp of the trace
        end_timestamp : str
            end timestamp of the trace
        session_id : typing.Optional[str]
            session id
        channel_id : typing.Optional[str]
            channel id
        output : typing.Optional[str]
            generated content
        custom : typing.Optional[str]
            custom data
        user : typing.Optional[User]
        metadata : typing.Optional[Metadata]
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        Returns
        -------
        TraceResponse
            Successful operation

        Examples
        --------
        import asyncio
        from NeuralTrust.client import AsyncNeuralTrustApi
        client = AsyncNeuralTrustApi(
            api_key="YOUR_API_KEY",
        )
        async def main() -> None:
            await client.trace(
                conversation_id="conversation_id",
                interaction_id="interaction_id",
                type="type",
                task="retrieval",
                input="What is the weather in Tokyo?",
                start_timestamp="start_timestamp",
                end_timestamp="end_timestamp",
            )
        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "trace",
            method="POST",
            json={
                "conversation_id": conversation_id,
                "interaction_id": interaction_id,
                "session_id": session_id,
                "type": type,
                "task": task,
                "channel_id": channel_id,
                "input": input,
                "output": output,
                "start_timestamp": start_timestamp,
                "end_timestamp": end_timestamp,
                "custom": custom,
                "user": user,
                "metadata": metadata,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(TraceResponse, _response.json())  # type: ignore
            if _response.status_code == 405:
                raise MethodNotAllowedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

def _get_base_url(*, base_url: typing.Optional[str] = None, environment: NeuralTrustApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
