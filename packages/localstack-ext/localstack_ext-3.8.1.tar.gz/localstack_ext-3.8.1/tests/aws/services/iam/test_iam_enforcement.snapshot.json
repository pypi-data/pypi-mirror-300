{
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_resource_based_policy_queue_attributes": {
    "recorded-date": "12-01-2023, 17:00:37",
    "recorded-content": {
      "publish-user-client-denied": {
        "Error": {
          "Code": "InvalidClientTokenId",
          "Message": "The security token included in the request is invalid.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {
            "content-length": "305",
            "content-type": "text/xml",
            "date": "Thu, 12 Jan 2023 16:00:35 GMT",
            "x-amzn-requestid": "45785ac7-03ea-544e-ae39-06fd330ef05e"
          },
          "HTTPStatusCode": 403,
          "RequestId": "45785ac7-03ea-544e-ae39-06fd330ef05e",
          "RetryAttempts": 0
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_lambda_invoke_resource_based_policy": {
    "recorded-date": "12-01-2023, 17:00:23",
    "recorded-content": {
      "create-function-result": {
        "CreateEventSourceMappingResponse": null,
        "CreateFunctionResponse": {
          "Architectures": [
            "x86_64"
          ],
          "CodeSha256": "Xl51lZt+0dxNvgzEm0AvQPPWeLJfxP9j/lGlEIpAjWk=",
          "CodeSize": 164,
          "Description": "",
          "Environment": {
            "Variables": {}
          },
          "EphemeralStorage": {
            "Size": 512
          },
          "FunctionArn": "arn:<partition>:lambda:eu-central-1:869636330914:function:test-function-8560b52b",
          "FunctionName": "test-function-8560b52b",
          "Handler": "handler.handler",
          "LastModified": "2023-01-12T16:00:21.926+0000",
          "MemorySize": 128,
          "PackageType": "Zip",
          "RevisionId": "69c49789-5f92-4849-b086-017df95aacfd",
          "Role": "arn:<partition>:iam::869636330914:role/lambda-autogenerated-f19d1736",
          "Runtime": "python3.9",
          "SnapStart": {
            "ApplyOn": "None",
            "OptimizationStatus": "Off"
          },
          "State": "Pending",
          "StateReason": "The function is being created.",
          "StateReasonCode": "Creating",
          "Timeout": 30,
          "TracingConfig": {
            "Mode": "PassThrough"
          },
          "Version": "$LATEST",
          "ResponseMetadata": {
            "HTTPHeaders": {
              "connection": "keep-alive",
              "content-length": "1086",
              "content-type": "application/json",
              "date": "Thu, 12 Jan 2023 16:00:22 GMT",
              "x-amzn-requestid": "cc6cad04-a8af-45dd-8302-eaaaed5cb0d2"
            },
            "HTTPStatusCode": 201,
            "RequestId": "cc6cad04-a8af-45dd-8302-eaaaed5cb0d2",
            "RetryAttempts": 0
          }
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_lambda_invoke": {
    "recorded-date": "01-07-2024, 18:56:21",
    "recorded-content": {
      "create-function-result": {
        "CreateEventSourceMappingResponse": null,
        "CreateFunctionResponse": {
          "Architectures": [
            "x86_64"
          ],
          "CodeSha256": "<code-sha256:1>",
          "CodeSize": "<code-size>",
          "Description": "",
          "Environment": {
            "Variables": {}
          },
          "EphemeralStorage": {
            "Size": 512
          },
          "FunctionArn": "arn:<partition>:lambda:<region>:111111111111:function:<function-name:1>",
          "FunctionName": "<function-name:1>",
          "Handler": "handler.handler",
          "LastModified": "date",
          "LoggingConfig": {
            "LogFormat": "Text",
            "LogGroup": "/aws/lambda/<function-name:1>"
          },
          "MemorySize": 128,
          "PackageType": "Zip",
          "RevisionId": "<uuid:1>",
          "Role": "arn:<partition>:iam::111111111111:role/<resource:1>",
          "Runtime": "python3.12",
          "RuntimeVersionConfig": {
            "RuntimeVersionArn": "arn:<partition>:lambda:<region>::runtime:<resource:2>"
          },
          "SnapStart": {
            "ApplyOn": "None",
            "OptimizationStatus": "Off"
          },
          "State": "Pending",
          "StateReason": "The function is being created.",
          "StateReasonCode": "Creating",
          "Timeout": 30,
          "TracingConfig": {
            "Mode": "PassThrough"
          },
          "Version": "$LATEST",
          "ResponseMetadata": {
            "HTTPHeaders": {},
            "HTTPStatusCode": 201
          }
        }
      },
      "invoke-default-client": {
        "ExecutedVersion": "$LATEST",
        "Payload": "\"ok\"",
        "StatusCode": 200,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:3>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:3>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "invoke-user-client-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:3> is not authorized to perform: lambda:InvokeFunction on resource: arn:<partition>:lambda:<region>:111111111111:function:<function-name:1> because no identity-based policy allows the lambda:InvokeFunction action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "invoke-user-client-allowed": {
        "ExecutedVersion": "$LATEST",
        "Payload": "\"ok\"",
        "StatusCode": 200,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sns_publish_topic_attributes": {
    "recorded-date": "02-02-2023, 17:12:39",
    "recorded-content": {
      "topic-arn": "arn:<partition>:sns:<region>:111111111111:<resource:1>",
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "publish-user-client-denied": {
        "Error": {
          "Code": "AuthorizationError",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: SNS:Publish on resource: arn:<partition>:sns:<region>:111111111111:<resource:1> because no identity-based policy allows the SNS:Publish action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "publish-user-client-allowed": {
        "MessageId": "<uuid:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes_user_permission_boundary": {
    "recorded-date": "10-02-2023, 14:58:43",
    "recorded-content": {
      "receive-user-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_secretsmanager_policy": {
    "recorded-date": "20-03-2023, 13:37:21",
    "recorded-content": {
      "create-secret": {
        "ARN": "arn:<partition>:secretsmanager:<region>:111111111111:secret:<resource:1>",
        "Name": "<test-secret-name:1>",
        "VersionId": "<uuid:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-secret-value": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: secretsmanager:GetSecretValue on resource: arn:<partition>:secretsmanager:<region>:111111111111:secret:<resource:1> because no identity-based policy allows the secretsmanager:GetSecretValue action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_ecr_repository_policies": {
    "recorded-date": "09-03-2023, 17:15:01",
    "recorded-content": {
      "create-repository-result": {
        "repository": {
          "createdAt": "datetime",
          "encryptionConfiguration": {
            "encryptionType": "AES256"
          },
          "imageScanningConfiguration": {
            "scanOnPush": false
          },
          "imageTagMutability": "MUTABLE",
          "registryId": "111111111111",
          "repositoryArn": "arn:<partition>:ecr:<region>:111111111111:repository/<resource:1>",
          "repositoryName": "<resource:1>",
          "repositoryUri": "111111111111.dkr.ecr.<region>.amazonaws.com/<resource:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "default_client_describe_images": {
        "imageDetails": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-images-user-client-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: ecr:DescribeImages on resource: arn:<partition>:ecr:<region>:111111111111:repository/<resource:1> because no identity-based policy allows the ecr:DescribeImages action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-images-user-client-allowed": {
        "imageDetails": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_get_lambda_layer": {
    "recorded-date": "01-07-2024, 18:57:56",
    "recorded-content": {
      "create-layer-result": {
        "CompatibleArchitectures": [
          "x86_64"
        ],
        "CompatibleRuntimes": [
          "python3.12"
        ],
        "Content": {
          "CodeSha256": "/o5rQHiOzOzvkuP2LZKBr7gXwZE52Dft2kbFDgzAr0s=",
          "CodeSize": "<code-size>",
          "Location": "<layer-location>"
        },
        "CreatedDate": "date",
        "Description": "",
        "LayerArn": "arn:<partition>:lambda:<region>:111111111111:layer:<resource:1>",
        "LayerVersionArn": "arn:<partition>:lambda:<region>:111111111111:layer:<resource:1>:1",
        "Version": 1,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-layer-user-client-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: lambda:GetLayerVersion on resource: arn:<partition>:lambda:<region>:111111111111:layer:<resource:1>:1 because no identity-based policy allows the lambda:GetLayerVersion action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "get-layer-user-client-allowed": {
        "CompatibleArchitectures": [
          "x86_64"
        ],
        "CompatibleRuntimes": [
          "python3.12"
        ],
        "Content": {
          "CodeSha256": "/o5rQHiOzOzvkuP2LZKBr7gXwZE52Dft2kbFDgzAr0s=",
          "CodeSize": "<code-size>",
          "Location": "<layer-location>"
        },
        "CreatedDate": "date",
        "Description": "",
        "LayerArn": "arn:<partition>:lambda:<region>:111111111111:layer:<resource:1>",
        "LayerVersionArn": "arn:<partition>:lambda:<region>:111111111111:layer:<resource:1>:1",
        "Version": 1,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_kms_key": {
    "recorded-date": "20-03-2023, 10:18:42",
    "recorded-content": {
      "kms-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<resource:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<resource:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      },
      "create-user": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: kms:DescribeKey on resource: arn:<partition>:kms:<region>:111111111111:key/<resource:1> because no identity-based policy allows the kms:DescribeKey action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_backup_vault": {
    "recorded-date": "20-03-2023, 14:58:00",
    "recorded-content": {
      "create-vault": {
        "BackupVaultArn": "arn:<partition>:backup:<region>:111111111111:backup-vault:<resource:1>",
        "BackupVaultName": "<resource:1>",
        "CreationDate": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-vault-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: backup:DescribeBackupVault on resource: arn:<partition>:backup:<region>:111111111111:backup-vault:<resource:1> because no identity-based policy allows the backup:DescribeBackupVault action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_efs_file_system_policy": {
    "recorded-date": "21-03-2023, 16:37:25",
    "recorded-content": {
      "create": {
        "CreationTime": "datetime",
        "CreationToken": "84c59bc9-cd8c-446b-a602-8207b305e8a5",
        "Encrypted": false,
        "FileSystemArn": "arn:<partition>:elasticfilesystem:<region>:111111111111:file-system/<resource:1>",
        "FileSystemId": "<resource:1>",
        "LifeCycleState": "creating",
        "NumberOfMountTargets": 0,
        "OwnerId": "111111111111",
        "PerformanceMode": "generalPurpose",
        "SizeInBytes": {
          "Value": 0,
          "ValueInIA": 0,
          "ValueInStandard": 0
        },
        "Tags": [],
        "ThroughputMode": "bursting",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-file-systems-user-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: elasticfilesystem:DescribeFileSystems on the specified resource"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "describe-file-systems-user-allowed": {
        "FileSystems": [
          {
            "CreationTime": "datetime",
            "CreationToken": "84c59bc9-cd8c-446b-a602-8207b305e8a5",
            "Encrypted": false,
            "FileSystemArn": "arn:<partition>:elasticfilesystem:<region>:111111111111:file-system/<resource:1>",
            "FileSystemId": "<resource:1>",
            "LifeCycleState": "available",
            "NumberOfMountTargets": 0,
            "OwnerId": "111111111111",
            "PerformanceMode": "generalPurpose",
            "SizeInBytes": {
              "Value": 6144,
              "ValueInIA": 0,
              "ValueInStandard": 6144
            },
            "Tags": [],
            "ThroughputMode": "bursting"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_eventbridge_policies": {
    "recorded-date": "21-03-2023, 14:52:11",
    "recorded-content": {
      "event-bus": {
        "EventBusArn": "arn:<partition>:events:<region>:111111111111:event-bus/<resource:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "user": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-events-denied": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: events:PutEvents on resource: arn:<partition>:events:<region>:111111111111:event-bus/<resource:1> because no identity-based policy allows the events:PutEvents action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-events-allowed": {
        "Entries": [
          {
            "EventId": "<uuid:1>"
          }
        ],
        "FailedEntryCount": 0,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_s3_bucket_policy": {
    "recorded-date": "22-03-2023, 12:41:02",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-user-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "put-object-user-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "get-object-user-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_enforce_s3_admin_policy": {
    "recorded-date": "10-06-2024, 13:27:01",
    "recorded-content": {
      "not-allowed-list-buckets": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_iam_trust_policies": {
    "recorded-date": "07-04-2023, 17:00:34",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-role-response": {
        "Role": {
          "Arn": "arn:<partition>:iam::111111111111:role/<resource:2>",
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Deny",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "CreateDate": "datetime",
          "Path": "/",
          "RoleId": "AROA4U6S5KWRJZHR664QX",
          "RoleName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "assume-role-without-permission": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:1> is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<resource:2>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "assume-role-without-only-identity": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:1> is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<resource:2>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_iam_trust_policy": {
    "recorded-date": "11-04-2023, 13:49:12",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-role-response": {
        "Role": {
          "Arn": "arn:<partition>:iam::111111111111:role/<resource:2>",
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Deny",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "CreateDate": "datetime",
          "Path": "/",
          "RoleId": "<role-id:1>",
          "RoleName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "assume-role-without-permission": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:1> is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<resource:2>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "assume-role-only-identity": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:1> is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<resource:2>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "assume-role-identity-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:1> is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<resource:2>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_logs_policy": {
    "recorded-date": "10-06-2024, 13:27:25",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-log-group-failed": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: logs:CreateLogGroup on resource: arn:<partition>:logs:<region>:111111111111:log-group:<log-group-name>:log-stream: because no identity-based policy allows the logs:CreateLogGroup action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-log-stream-failed": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: logs:CreateLogStream on resource: arn:<partition>:logs:<region>:111111111111:log-group:<log-group-name>:log-stream:<log-stream-name> because no identity-based policy allows the logs:CreateLogStream action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_enforce_policy_secretsmanager_get_value": {
    "recorded-date": "10-06-2024, 13:20:56",
    "recorded-content": {
      "create-secret": {
        "ARN": "arn:<partition>:secretsmanager:<region>:111111111111:secret:<resource:1>",
        "Name": "<test-secret-name:1>",
        "VersionId": "<uuid:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<resource:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-secret-value": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: secretsmanager:GetSecretValue on resource: arn:<partition>:secretsmanager:<region>:111111111111:secret:<resource:1> because no identity-based policy allows the secretsmanager:GetSecretValue action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_sns_create_topic_policy": {
    "recorded-date": "10-06-2024, 13:27:48",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-sns-topic-failed": {
        "Error": {
          "Code": "AuthorizationError",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: SNS:CreateTopic on resource: arn:<partition>:sns:<region>:111111111111:<topic-name> because no identity-based policy allows the SNS:CreateTopic action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMConditions::test_s3_create_bucket_secure_connection": {
    "recorded-date": "31-08-2023, 09:28:10",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-bucket-failed": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_ssm_get_attribute[with-leading-slash]": {
    "recorded-date": "10-06-2024, 13:29:17",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-parameter-failed": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: ssm:GetParameter on resource: arn:<partition>:ssm:<region>:111111111111:parameter<attribute-name> because no identity-based policy allows the ssm:GetParameter action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-parameter-response": {
        "Parameter": {
          "ARN": "arn:<partition>:ssm:<region>:111111111111:parameter<attribute-name>",
          "DataType": "text",
          "LastModifiedDate": "datetime",
          "Name": "<attribute-name>",
          "Type": "String",
          "Value": "test",
          "Version": 1
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_ssm_get_attribute[without-leading-slash]": {
    "recorded-date": "10-06-2024, 13:29:50",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-parameter-failed": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: ssm:GetParameter on resource: arn:<partition>:ssm:<region>:111111111111:parameter/<attribute-name> because no identity-based policy allows the ssm:GetParameter action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-parameter-response": {
        "Parameter": {
          "ARN": "arn:<partition>:ssm:<region>:111111111111:parameter/<attribute-name>",
          "DataType": "text",
          "LastModifiedDate": "datetime",
          "Name": "<attribute-name>",
          "Type": "String",
          "Value": "test",
          "Version": 1
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_dynamodb_batch_write_item": {
    "recorded-date": "10-06-2024, 13:35:40",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "batch-write-item-failed": {
        "Error": {
          "Code": "AccessDeniedException",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: dynamodb:BatchWriteItem on resource: arn:<partition>:dynamodb:<region>:111111111111:table/<table-name> because no identity-based policy allows the dynamodb:BatchWriteItem action"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes[sqs]": {
    "recorded-date": "02-05-2024, 07:11:10",
    "recorded-content": {
      "queue-arn": "arn:<partition>:sqs:<region>:111111111111:<resource:1>",
      "user-arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
      "receive-user-client-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<resource:1> because no identity-based policy allows the sqs:receivemessage action",
          "QueryErrorCode": "AccessDeniedException",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "receive-user-client-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes_resource_deny[sqs]": {
    "recorded-date": "02-05-2024, 07:05:16",
    "recorded-content": {
      "queue-arn": "arn:<partition>:sqs:<region>:111111111111:<resource:1>",
      "user-arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
      "receive-user-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "receive-user-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<resource:1> with an explicit deny in a resource-based policy",
          "QueryErrorCode": "AccessDeniedException",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes_role_permission_boundary[sqs]": {
    "recorded-date": "02-05-2024, 06:58:17",
    "recorded-content": {
      "receive-role-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "receive-role-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:sts::111111111111:assumed-role/<role-name>/<session-name> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<queue-name> because no permissions boundary allows the sqs:receivemessage action",
          "QueryErrorCode": "AccessDeniedException",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "receive-session-allowed": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_s3_delete_intelligent_bucket_tiering_config": {
    "recorded-date": "10-06-2024, 13:28:12",
    "recorded-content": {
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-bucket-tiering-config-failed": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_role_assumes_itself": {
    "recorded-date": "10-06-2024, 13:39:08",
    "recorded-content": {
      "create-role-response": {
        "Role": {
          "Arn": "arn:<partition>:iam::111111111111:role/<role-name:1>",
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                  "AWS": "111111111111"
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "CreateDate": "datetime",
          "Path": "/",
          "RoleId": "<role-id:1>",
          "RoleName": "<role-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "assume-role-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:sts::111111111111:assumed-role/<role-name:1>/TestSession is not authorized to perform: sts:AssumeRole on resource: arn:<partition>:iam::111111111111:role/<role-name:1>",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementIdentityBasedPolicies::test_cloudformation_stack_operations": {
    "recorded-date": "10-06-2024, 13:36:24",
    "recorded-content": {
      "describe-stack-response": {
        "Stacks": [
          {
            "CreationTime": "datetime",
            "DisableRollback": false,
            "DriftInformation": {
              "StackDriftStatus": "NOT_CHECKED"
            },
            "EnableTerminationProtection": false,
            "NotificationARNs": [],
            "RollbackConfiguration": {},
            "StackId": "arn:<partition>:cloudformation:<region>:111111111111:stack/<stack-name:1>/<resource:1>",
            "StackName": "<stack-name:1>",
            "StackStatus": "CREATE_IN_PROGRESS",
            "StackStatusReason": "User Initiated",
            "Tags": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-user-response": {
        "User": {
          "Arn": "arn:<partition>:iam::111111111111:user/<user-name:1>",
          "CreateDate": "datetime",
          "Path": "/",
          "UserId": "<user-id:1>",
          "UserName": "<user-name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-termination-protection-failed-id": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: cloudformation:UpdateTerminationProtection on resource: arn:<partition>:cloudformation:<region>:111111111111:stack/<stack-name:1>/<resource:1> because no identity-based policy allows the cloudformation:UpdateTerminationProtection action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "describe-stack-events-failed-id": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: cloudformation:DescribeStackEvents on resource: arn:<partition>:cloudformation:<region>:111111111111:stack/<stack-name:1>/<resource:1> because no identity-based policy allows the cloudformation:DescribeStackEvents action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "update-termination-protection-failed-name": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: cloudformation:UpdateTerminationProtection on resource: arn:<partition>:cloudformation:<region>:111111111111:stack/<stack-name:1>/<resource:1> because no identity-based policy allows the cloudformation:UpdateTerminationProtection action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "describe-stack-events-failed-name": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "User: arn:<partition>:iam::111111111111:user/<user-name:1> is not authorized to perform: cloudformation:DescribeStackEvents on resource: arn:<partition>:cloudformation:<region>:111111111111:stack/<stack-name:1>/<resource:1> because no identity-based policy allows the cloudformation:DescribeStackEvents action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes_role_permission_boundary[sqs_query]": {
    "recorded-date": "02-05-2024, 06:59:23",
    "recorded-content": {
      "receive-role-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "receive-role-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Detail": null,
          "Message": "User: arn:<partition>:sts::111111111111:assumed-role/<role-name>/<session-name> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<queue-name> because no permissions boundary allows the sqs:receivemessage action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "receive-session-allowed": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes_resource_deny[sqs_query]": {
    "recorded-date": "02-05-2024, 07:10:27",
    "recorded-content": {
      "queue-arn": "arn:<partition>:sqs:<region>:111111111111:<resource:1>",
      "user-arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
      "receive-user-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "receive-user-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Detail": null,
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<resource:1> with an explicit deny in a resource-based policy",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/iam/test_iam_enforcement.py::TestIAMEnforcementResourceBasedPolicies::test_sqs_receive_queue_attributes[sqs_query]": {
    "recorded-date": "02-05-2024, 07:11:19",
    "recorded-content": {
      "queue-arn": "arn:<partition>:sqs:<region>:111111111111:<resource:1>",
      "user-arn": "arn:<partition>:iam::111111111111:user/<resource:2>",
      "receive-user-client-denied": {
        "Error": {
          "Code": "AccessDenied",
          "Detail": null,
          "Message": "User: arn:<partition>:iam::111111111111:user/<resource:2> is not authorized to perform: sqs:receivemessage on resource: arn:<partition>:sqs:<region>:111111111111:<resource:1> because no identity-based policy allows the sqs:receivemessage action",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "receive-user-client-allowed": {
        "Messages": [
          {
            "Body": "test",
            "MD5OfBody": "<md5-hash>",
            "MessageId": "<uuid:1>",
            "ReceiptHandle": "<receipt-handle:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  }
}
