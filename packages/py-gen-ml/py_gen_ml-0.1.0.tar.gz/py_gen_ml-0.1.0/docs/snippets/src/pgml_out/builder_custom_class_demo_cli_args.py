# Autogenerated code. DO NOT EDIT.
import py_gen_ml as pgml
import typing

import pydantic
import typer

from . import builder_custom_class_demo_base as base


class LinearBlockArgs(pgml.YamlBaseModel):
    """Linear block configuration"""

    in_features: typing.Annotated[typing.Optional[int], typer.Option(help="Number of input features. Maps to 'in_features'"), pydantic.Field(None), pgml.ArgRef("in_features")]
    """Number of input features"""

    out_features: typing.Annotated[typing.Optional[int], typer.Option(help="Number of output features. Maps to 'out_features'"), pydantic.Field(None), pgml.ArgRef("out_features")]
    """Number of output features"""

    bias: typing.Annotated[typing.Optional[bool], typer.Option(help="Bias. Maps to 'bias'"), pydantic.Field(None), pgml.ArgRef("bias")]
    """Bias"""

    dropout: typing.Annotated[typing.Optional[float], typer.Option(help="Dropout probability. Maps to 'dropout'"), pydantic.Field(None), pgml.ArgRef("dropout")]
    """Dropout probability"""

    activation: typing.Annotated[typing.Optional[str], typer.Option(help="Activation function. Maps to 'activation'"), pydantic.Field(None), pgml.ArgRef("activation")]
    """Activation function"""



class MLPArgs(pgml.YamlBaseModel):
    """MLP configuration"""

    in_features: typing.Annotated[typing.Optional[int], typer.Option(help="Number of input features. Maps to 'layers.in_features'"), pydantic.Field(None), pgml.ArgRef("layers.in_features")]
    """Number of input features"""

    out_features: typing.Annotated[typing.Optional[int], typer.Option(help="Number of output features. Maps to 'layers.out_features'"), pydantic.Field(None), pgml.ArgRef("layers.out_features")]
    """Number of output features"""

    bias: typing.Annotated[typing.Optional[bool], typer.Option(help="Bias. Maps to 'layers.bias'"), pydantic.Field(None), pgml.ArgRef("layers.bias")]
    """Bias"""

    dropout: typing.Annotated[typing.Optional[float], typer.Option(help="Dropout probability. Maps to 'layers.dropout'"), pydantic.Field(None), pgml.ArgRef("layers.dropout")]
    """Dropout probability"""

    activation: typing.Annotated[typing.Optional[str], typer.Option(help="Activation function. Maps to 'layers.activation'"), pydantic.Field(None), pgml.ArgRef("layers.activation")]
    """Activation function"""


