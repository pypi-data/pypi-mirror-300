// vite.config.ts
import { sveltekit } from "file:///Users/aliabdalla/Documents/dev/gradio/node_modules/.pnpm/@sveltejs+kit@2.5.20_@sveltejs+vite-plugin-svelte@3.1.0_svelte@4.2.15_vite@5.2.11_@types+node_o7pp2p5svq4h5udxa4yf4mjnc4/node_modules/@sveltejs/kit/src/exports/vite/index.js";
import { defineConfig } from "file:///Users/aliabdalla/Documents/dev/gradio/node_modules/.pnpm/vite@5.2.11_@types+node@20.12.8_lightningcss@1.24.1_sass@1.66.1_stylus@0.63.0_sugarss@4.0.1_postcss@8.4.38_/node_modules/vite/dist/node/index.js";

// ../build/out/index.js
import { parse } from "file:///Users/aliabdalla/Documents/dev/gradio/node_modules/.pnpm/node-html-parser@6.1.13/node_modules/node-html-parser/dist/index.js";
import { join } from "path";
import * as url from "url";
import { readdirSync, existsSync, readFileSync, statSync } from "fs";
var __vite_injected_original_import_meta_url =
	"file:///Users/aliabdalla/Documents/dev/gradio/js/build/out/index.js";
var __filename = url.fileURLToPath(__vite_injected_original_import_meta_url);
var __dirname = url.fileURLToPath(
	new URL(".", __vite_injected_original_import_meta_url)
);
function get_export_path(path, root, pkg_json) {
	if (!pkg_json.exports) return false;
	if (typeof pkg_json.exports[`${path}`] === "object") return true;
	const _path = join(root, "..", `${pkg_json.exports[`${path}`]}`);
	return existsSync(_path);
}
var ignore_list = [
	"tootils",
	"_cdn-test",
	"_spaces-test",
	"_website",
	"app",
	"atoms",
	"fallback",
	"icons",
	"lite",
	"preview",
	"simpledropdown",
	"simpleimage",
	"simpletextbox",
	"storybook",
	"theme",
	"timeseries",
	"tooltip",
	"upload",
	"utils",
	"wasm"
];
function generate_component_imports() {
	const exports = readdirSync(join(__dirname, "..", ".."))
		.map((dir) => {
			if (ignore_list.includes(dir)) return void 0;
			if (!statSync(join(__dirname, "..", "..", dir)).isDirectory())
				return void 0;
			const package_json_path = join(
				__dirname,
				"..",
				"..",
				dir,
				"package.json"
			);
			if (existsSync(package_json_path)) {
				const package_json = JSON.parse(
					readFileSync(package_json_path, "utf8")
				);
				const component = get_export_path(".", package_json_path, package_json);
				const example = get_export_path(
					"./example",
					package_json_path,
					package_json
				);
				const base = get_export_path("./base", package_json_path, package_json);
				if (!component && !example) return void 0;
				return {
					name: package_json.name,
					component,
					example,
					base
				};
			}
			return void 0;
		})
		.filter((x) => x !== void 0);
	const imports = exports.reduce((acc, _export) => {
		if (!_export) return acc;
		const example = _export.example
			? `example: () => import("${_export.name}/example"),
`
			: "";
		const base = _export.base
			? `base: () => import("${_export.name}/base"),
`
			: "";
		return `${acc}"${_export.name.replace("@gradio/", "")}": {
			${base}
			${example}
			component: () => import("${_export.name}")
			},
`;
	}, "");
	return imports;
}
function load_virtual_component_loader(mode) {
	const loader_path = join(__dirname, "component_loader.js");
	let component_map = "";
	if (mode === "test") {
		component_map = `
		const component_map = {
			"test-component-one": {
				component: () => import("@gradio-test/test-one"),
				example: () => import("@gradio-test/test-one/example")
			},
			"dataset": {
				component: () => import("@gradio-test/test-two"),
				example: () => import("@gradio-test/test-two/example")
			},
			"image": {
				component: () => import("@gradio/image"),
				example: () => import("@gradio/image/example"),
				base: () => import("@gradio/image/base")
			},
			"audio": {
				component: () => import("@gradio/audio"),
				example: () => import("@gradio/audio/example"),
				base: () => import("@gradio/audio/base")
			},
			"video": {
				component: () => import("@gradio/video"),
				example: () => import("@gradio/video/example"),
				base: () => import("@gradio/video/base")
			},
			// "test-component-one": {
			// 	component: () => import("@gradio-test/test-one"),
			// 	example: () => import("@gradio-test/test-one/example")
			// },
		};
		`;
	} else {
		component_map = `
		const component_map = {
			${generate_component_imports()}
		};
		`;
	}
	return `${component_map}

${readFileSync(loader_path, "utf8")}`;
}
function inject_component_loader({ mode }) {
	const v_id = "virtual:component-loader";
	const resolved_v_id = "\0" + v_id;
	return {
		name: "inject-component-loader",
		enforce: "pre",
		resolveId(id) {
			if (id === v_id) return resolved_v_id;
		},
		load(id) {
			this.addWatchFile(join(__dirname, "component_loader.js"));
			if (id === resolved_v_id) {
				return load_virtual_component_loader(mode);
			}
		}
	};
}

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => ({
	plugins: [sveltekit(), inject_component_loader({ mode })],
	resolve: {
		conditions: ["gradio"]
	}
}));
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
