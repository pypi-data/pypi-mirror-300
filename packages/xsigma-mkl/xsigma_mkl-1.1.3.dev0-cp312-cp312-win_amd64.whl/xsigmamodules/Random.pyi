from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core

class random_type(int):
    MERSENNE_TWISTER:'random_type'
    SOBOL:'random_type'
    SOBOL_BROWNIAN_BRIDGE:'random_type'
    WELL_19937:'random_type'
    WELL_44497:'random_type'

class random(object):
    def discard(self, discard_count:int) -> None: ...
    def gaussians(self, output:MutableSequence[float], size:int, discard_count:int): ...
    def generate_upfront_onley(type:'randomType') -> bool: ...
    def random_generator_factory(generator_type:'randomType', config:'randomSettings') -> 'random': ...
    def uniforms(self, output:MutableSequence[float], size:int, discard_count:int) -> None: ...

class randomSettings(object):
    def json_to_string(rhs:'randomSettings') -> str: ...
    def read_from_binary(file_name:str) -> 'randomSettings': ...
    def read_from_json(file_name:str) -> 'randomSettings': ...
    def write_to_binary(file_name:str, rhs:'randomSettings') -> None: ...
    def write_to_json(file_name:str, rhs:'randomSettings') -> None: ...

