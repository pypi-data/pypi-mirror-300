# coding: utf-8

"""
    ChRIS Research Integration System: Ultron BackEnd (CUBE) API

    The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.

    The version of the OpenAPI document: ${GITHUB_REF_NAME:1}
    Contact: dev@babymri.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aiochris_oag.models.pipeline_source_file_ftype import PipelineSourceFileFtype
from typing import Optional, Set
from typing_extensions import Self

class PipelineSourceFile(BaseModel):
    """
    PipelineSourceFile
    """ # noqa: E501
    url: StrictStr
    id: StrictInt
    creation_date: datetime
    fname: StrictStr
    fsize: StrictInt = Field(description="Get the size of the file in bytes.")
    public: Optional[StrictBool] = None
    ftype: Optional[PipelineSourceFileFtype]
    uploader_username: Optional[StrictStr] = Field(description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    owner_username: StrictStr = Field(description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    pipeline_id: Optional[StrictInt]
    pipeline_name: Optional[StrictStr]
    file_resource: StrictStr = Field(description="Custom method to get the hyperlink to the actual file resource.")
    parent_folder: StrictStr
    owner: StrictStr
    __properties: ClassVar[List[str]] = ["url", "id", "creation_date", "fname", "fsize", "public", "ftype", "uploader_username", "owner_username", "pipeline_id", "pipeline_name", "file_resource", "parent_folder", "owner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineSourceFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
            "id",
            "creation_date",
            "fsize",
            "uploader_username",
            "owner_username",
            "pipeline_id",
            "pipeline_name",
            "file_resource",
            "parent_folder",
            "owner",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ftype
        if self.ftype:
            _dict['ftype'] = self.ftype.to_dict()
        # set to None if ftype (nullable) is None
        # and model_fields_set contains the field
        if self.ftype is None and "ftype" in self.model_fields_set:
            _dict['ftype'] = None

        # set to None if uploader_username (nullable) is None
        # and model_fields_set contains the field
        if self.uploader_username is None and "uploader_username" in self.model_fields_set:
            _dict['uploader_username'] = None

        # set to None if pipeline_id (nullable) is None
        # and model_fields_set contains the field
        if self.pipeline_id is None and "pipeline_id" in self.model_fields_set:
            _dict['pipeline_id'] = None

        # set to None if pipeline_name (nullable) is None
        # and model_fields_set contains the field
        if self.pipeline_name is None and "pipeline_name" in self.model_fields_set:
            _dict['pipeline_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineSourceFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "id": obj.get("id"),
            "creation_date": obj.get("creation_date"),
            "fname": obj.get("fname"),
            "fsize": obj.get("fsize"),
            "public": obj.get("public"),
            "ftype": PipelineSourceFileFtype.from_dict(obj["ftype"]) if obj.get("ftype") is not None else None,
            "uploader_username": obj.get("uploader_username"),
            "owner_username": obj.get("owner_username"),
            "pipeline_id": obj.get("pipeline_id"),
            "pipeline_name": obj.get("pipeline_name"),
            "file_resource": obj.get("file_resource"),
            "parent_folder": obj.get("parent_folder"),
            "owner": obj.get("owner")
        })
        return _obj


