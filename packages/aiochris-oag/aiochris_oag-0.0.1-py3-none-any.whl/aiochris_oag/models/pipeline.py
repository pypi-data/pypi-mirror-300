# coding: utf-8

"""
    ChRIS Research Integration System: Ultron BackEnd (CUBE) API

    The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.

    The version of the OpenAPI document: ${GITHUB_REF_NAME:1}
    Contact: dev@babymri.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Pipeline(BaseModel):
    """
    Pipeline
    """ # noqa: E501
    url: StrictStr
    id: StrictInt
    name: Annotated[str, Field(strict=True, max_length=100)]
    locked: Optional[StrictBool] = None
    authors: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    category: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=800)]] = None
    owner_username: Optional[StrictStr] = Field(description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    creation_date: datetime
    modification_date: datetime
    plugins: StrictStr
    plugin_pipings: StrictStr
    default_parameters: StrictStr
    workflows: StrictStr
    json_repr: StrictStr
    __properties: ClassVar[List[str]] = ["url", "id", "name", "locked", "authors", "category", "description", "owner_username", "creation_date", "modification_date", "plugins", "plugin_pipings", "default_parameters", "workflows", "json_repr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pipeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
            "id",
            "owner_username",
            "creation_date",
            "modification_date",
            "plugins",
            "plugin_pipings",
            "default_parameters",
            "workflows",
            "json_repr",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if owner_username (nullable) is None
        # and model_fields_set contains the field
        if self.owner_username is None and "owner_username" in self.model_fields_set:
            _dict['owner_username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pipeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "locked": obj.get("locked"),
            "authors": obj.get("authors"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "owner_username": obj.get("owner_username"),
            "creation_date": obj.get("creation_date"),
            "modification_date": obj.get("modification_date"),
            "plugins": obj.get("plugins"),
            "plugin_pipings": obj.get("plugin_pipings"),
            "default_parameters": obj.get("default_parameters"),
            "workflows": obj.get("workflows"),
            "json_repr": obj.get("json_repr")
        })
        return _obj


