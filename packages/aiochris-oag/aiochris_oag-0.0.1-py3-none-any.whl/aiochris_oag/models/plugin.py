# coding: utf-8

"""
    ChRIS Research Integration System: Ultron BackEnd (CUBE) API

    The ChRIS Ultron BackEnd (CUBE) is the core backend API of ChRIS. It manages ChRIS users, plugins, pipelines, and the provenance of data analyses as ChRIS feeds.

    The version of the OpenAPI document: ${GITHUB_REF_NAME:1}
    Contact: dev@babymri.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from aiochris_oag.models.plugin_type import PluginType
from typing import Optional, Set
from typing_extensions import Self

class Plugin(BaseModel):
    """
    Plugin
    """ # noqa: E501
    url: StrictStr
    id: StrictInt
    creation_date: datetime
    name: StrictStr
    version: Annotated[str, Field(strict=True, max_length=10)]
    dock_image: Annotated[str, Field(strict=True, max_length=500)]
    public_repo: StrictStr
    icon: StrictStr
    type: PluginType
    stars: Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    authors: StrictStr
    title: StrictStr
    category: StrictStr
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    documentation: StrictStr
    license: StrictStr
    execshell: Annotated[str, Field(strict=True, max_length=50)]
    selfpath: Annotated[str, Field(strict=True, max_length=512)]
    selfexec: Annotated[str, Field(strict=True, max_length=50)]
    min_number_of_workers: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    max_number_of_workers: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    min_cpu_limit: Optional[StrictInt] = None
    max_cpu_limit: Optional[StrictInt] = None
    min_memory_limit: Optional[StrictInt] = None
    max_memory_limit: Optional[StrictInt] = None
    min_gpu_limit: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    max_gpu_limit: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    meta: StrictStr
    parameters: StrictStr
    instances: StrictStr
    compute_resources: StrictStr
    __properties: ClassVar[List[str]] = ["url", "id", "creation_date", "name", "version", "dock_image", "public_repo", "icon", "type", "stars", "authors", "title", "category", "description", "documentation", "license", "execshell", "selfpath", "selfexec", "min_number_of_workers", "max_number_of_workers", "min_cpu_limit", "max_cpu_limit", "min_memory_limit", "max_memory_limit", "min_gpu_limit", "max_gpu_limit", "meta", "parameters", "instances", "compute_resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plugin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
            "id",
            "creation_date",
            "name",
            "public_repo",
            "icon",
            "type",
            "stars",
            "authors",
            "title",
            "category",
            "documentation",
            "license",
            "meta",
            "parameters",
            "instances",
            "compute_resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if min_number_of_workers (nullable) is None
        # and model_fields_set contains the field
        if self.min_number_of_workers is None and "min_number_of_workers" in self.model_fields_set:
            _dict['min_number_of_workers'] = None

        # set to None if max_number_of_workers (nullable) is None
        # and model_fields_set contains the field
        if self.max_number_of_workers is None and "max_number_of_workers" in self.model_fields_set:
            _dict['max_number_of_workers'] = None

        # set to None if min_cpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.min_cpu_limit is None and "min_cpu_limit" in self.model_fields_set:
            _dict['min_cpu_limit'] = None

        # set to None if max_cpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.max_cpu_limit is None and "max_cpu_limit" in self.model_fields_set:
            _dict['max_cpu_limit'] = None

        # set to None if min_memory_limit (nullable) is None
        # and model_fields_set contains the field
        if self.min_memory_limit is None and "min_memory_limit" in self.model_fields_set:
            _dict['min_memory_limit'] = None

        # set to None if max_memory_limit (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_limit is None and "max_memory_limit" in self.model_fields_set:
            _dict['max_memory_limit'] = None

        # set to None if min_gpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.min_gpu_limit is None and "min_gpu_limit" in self.model_fields_set:
            _dict['min_gpu_limit'] = None

        # set to None if max_gpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.max_gpu_limit is None and "max_gpu_limit" in self.model_fields_set:
            _dict['max_gpu_limit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plugin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "id": obj.get("id"),
            "creation_date": obj.get("creation_date"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "dock_image": obj.get("dock_image"),
            "public_repo": obj.get("public_repo"),
            "icon": obj.get("icon"),
            "type": obj.get("type"),
            "stars": obj.get("stars"),
            "authors": obj.get("authors"),
            "title": obj.get("title"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "documentation": obj.get("documentation"),
            "license": obj.get("license"),
            "execshell": obj.get("execshell"),
            "selfpath": obj.get("selfpath"),
            "selfexec": obj.get("selfexec"),
            "min_number_of_workers": obj.get("min_number_of_workers"),
            "max_number_of_workers": obj.get("max_number_of_workers"),
            "min_cpu_limit": obj.get("min_cpu_limit"),
            "max_cpu_limit": obj.get("max_cpu_limit"),
            "min_memory_limit": obj.get("min_memory_limit"),
            "max_memory_limit": obj.get("max_memory_limit"),
            "min_gpu_limit": obj.get("min_gpu_limit"),
            "max_gpu_limit": obj.get("max_gpu_limit"),
            "meta": obj.get("meta"),
            "parameters": obj.get("parameters"),
            "instances": obj.get("instances"),
            "compute_resources": obj.get("compute_resources")
        })
        return _obj


