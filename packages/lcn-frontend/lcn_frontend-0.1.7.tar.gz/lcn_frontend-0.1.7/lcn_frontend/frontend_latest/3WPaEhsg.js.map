{"version":3,"file":"3WPaEhsg.js","mappings":";;AAgBA;;AAEA;AAjBA;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;;ACnJA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;AA+CA;;;;ACzDA;;;;;AC8CA;AAIA;;AAEA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;AAKA;;AAEA;;;;AAIA;AACA;AACA;;;;AAIA;;AAEA;;;;AAIA;AACA;AACA;;;;;;AAQA;AACA;;;;;AAKA;AACA;AACA;;;;AAtEA;;;;;;;;;;;;;AAiJA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-formfield.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-radio.ts","webpack://lcn-frontend/./src/dialogs/lcn-create-device-dialog.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\", \"ha-list-item\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant | undefined,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">\n    <span>${title}</span>\n    <ha-icon-button\n      .label=${hass?.localize(\"ui.dialogs.generic.close\") ?? \"Close\"}\n      .path=${mdiClose}\n      dialogAction=\"close\"\n      class=\"header_button\"\n    ></ha-icon-button>\n  </div>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll, {\n      passive: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host([scrolled]) ::slotted(ha-dialog-header) {\n        border-bottom: 1px solid\n          var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n      }\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 8);\n        -webkit-backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 12px 24px 12px 24px;\n      }\n      .mdc-dialog__title::before {\n        content: unset;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n        -webkit-backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        background: var(\n          --ha-dialog-surface-background,\n          var(--mdc-theme-surface, #fff)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_title {\n        position: relative;\n        padding-right: 40px;\n        padding-inline-end: 40px;\n        padding-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_title span {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: block;\n      }\n      .header_button {\n        position: absolute;\n        right: -12px;\n        top: -12px;\n        text-decoration: none;\n        color: inherit;\n        inset-inline-start: initial;\n        inset-inline-end: -12px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected override render() {\n    const classes = {\n      \"mdc-form-field--align-end\": this.alignEnd,\n      \"mdc-form-field--space-between\": this.spaceBetween,\n      \"mdc-form-field--nowrap\": this.nowrap,\n    };\n\n    return html` <div class=\"mdc-form-field ${classMap(classes)}\">\n      <slot></slot>\n      <label class=\"mdc-label\" @click=${this._labelClick}>\n        <slot name=\"label\">${this.label}</slot>\n      </label>\n    </div>`;\n  }\n\n  protected _labelClick() {\n    const input = this.input as HTMLInputElement | undefined;\n    if (!input) return;\n\n    input.focus();\n    if (input.disabled) {\n      return;\n    }\n    switch (input.tagName) {\n      case \"HA-CHECKBOX\":\n        input.checked = !input.checked;\n        fireEvent(input, \"change\");\n        break;\n      case \"HA-RADIO\":\n        input.checked = true;\n        fireEvent(input, \"change\");\n        break;\n      default:\n        input.click();\n        break;\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field {\n        align-items: var(--ha-formfield-align-items, center);\n        gap: 4px;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding: 0;\n      }\n      :host([disabled]) label {\n        color: var(--disabled-text-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-radio\";\nimport \"@ha/components/ha-formfield\";\nimport \"@ha/components/ha-textfield\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport { css, html, LitElement, PropertyValues, CSSResultGroup, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { createCloseHeading } from \"@ha/components/ha-dialog\";\nimport type { HaRadio } from \"@ha/components/ha-radio\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { HomeAssistant, ValueChangedEvent } from \"@ha/types\";\nimport type { LCN, LcnDeviceConfig } from \"types/lcn\";\nimport type { HaTextField } from \"@ha/components/ha-textfield\";\nimport { loadProgressDialog } from \"./show-dialog-progress\";\nimport type { LcnDeviceDialogParams } from \"./show-dialog-create-device\";\n\n@customElement(\"lcn-create-device-dialog\")\nexport class CreateDeviceDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @state() private _params?: LcnDeviceDialogParams;\n\n  @state() private _isGroup: boolean = false;\n\n  @state() private _segmentId: number = 0;\n\n  @state() private _addressId: number = 5;\n\n  @state() private _invalid: boolean = false;\n\n  public async showDialog(params: LcnDeviceDialogParams): Promise<void> {\n    this._params = params;\n    this.lcn = params.lcn;\n    await this.updateComplete;\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    loadProgressDialog();\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"_invalid\")) {\n      this._invalid =\n        !this._validateSegmentId(this._segmentId) ||\n        !this._validateAddressId(this._addressId, this._isGroup);\n    }\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.lcn.localize(\"dashboard-devices-dialog-create-title\"),\n        ) as unknown as string}\n        @closed=${this._closeDialog}\n      >\n        <div id=\"type\">${this.lcn.localize(\"type\")}</div>\n\n        <ha-formfield label=${this.lcn.localize(\"module\")}>\n          <ha-radio\n            name=\"is_group\"\n            value=\"module\"\n            .checked=${this._isGroup === false}\n            @change=${this._isGroupChanged}\n          ></ha-radio>\n        </ha-formfield>\n\n        <ha-formfield label=${this.lcn.localize(\"group\")}>\n          <ha-radio\n            name=\"is_group\"\n            value=\"group\"\n            .checked=${this._isGroup === true}\n            @change=${this._isGroupChanged}\n          ></ha-radio>\n        </ha-formfield>\n\n        <ha-textfield\n          .label=${this.lcn.localize(\"segment-id\")}\n          type=\"number\"\n          .value=${this._segmentId.toString()}\n          min=\"0\"\n          required\n          autoValidate\n          @input=${this._segmentIdChanged}\n          .validityTransform=${this._validityTransformSegmentId}\n          .validationMessage=${this.lcn.localize(\"dashboard-devices-dialog-error-segment\")}\n        ></ha-textfield>\n\n        <ha-textfield\n          .label=${this.lcn.localize(\"id\")}\n          type=\"number\"\n          .value=${this._addressId.toString()}\n          min=\"0\"\n          required\n          autoValidate\n          @input=${this._addressIdChanged}\n          .validityTransform=${this._validityTransformAddressId}\n          .validationMessage=${this._isGroup\n            ? this.lcn.localize(\"dashboard-devices-dialog-error-group\")\n            : this.lcn.localize(\"dashboard-devices-dialog-error-module\")}\n        ></ha-textfield>\n\n        <div class=\"buttons\">\n          <mwc-button\n            slot=\"secondaryAction\"\n            @click=${this._closeDialog}\n            .label=${this.lcn.localize(\"dismiss\")}\n          ></mwc-button>\n\n          <mwc-button\n            slot=\"primaryAction\"\n            @click=${this._create}\n            .disabled=${this._invalid}\n            .label=${this.lcn.localize(\"create\")}\n          ></mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _isGroupChanged(ev: ValueChangedEvent<string>): void {\n    this._isGroup = (ev.target as HaRadio).value === \"group\";\n  }\n\n  private _segmentIdChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this._segmentId = +target.value;\n  }\n\n  private _addressIdChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this._addressId = +target.value;\n  }\n\n  private _validateSegmentId(segment_id: number): boolean {\n    // segement_id: 0, 5-128\n    return segment_id === 0 || (segment_id >= 5 && segment_id <= 128);\n  }\n\n  private _validateAddressId(address_id: number, is_group: boolean): boolean {\n    // module_id: 5-254\n    // group_id: 5-254\n    if (is_group) {\n      return address_id >= 5 && address_id <= 254;\n    }\n    return address_id >= 5 && address_id <= 254;\n  }\n\n  private get _validityTransformSegmentId() {\n    return (value: string) => ({ valid: this._validateSegmentId(+value) });\n  }\n\n  private get _validityTransformAddressId() {\n    return (value: string) => ({ valid: this._validateAddressId(+value, this._isGroup) });\n  }\n\n  private async _create(): Promise<void> {\n    const values: Partial<LcnDeviceConfig> = {\n      name: \"\",\n      address: [this._segmentId, this._addressId, this._isGroup],\n    };\n    await this._params!.createDevice(values);\n    this._closeDialog();\n  }\n\n  private _closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        #port-type {\n          margin-top: 16px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-create-device-dialog\": CreateDeviceDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}