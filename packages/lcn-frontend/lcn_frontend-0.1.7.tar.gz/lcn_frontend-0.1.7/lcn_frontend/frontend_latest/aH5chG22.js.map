{"version":3,"file":"aH5chG22.js","mappings":";;AAsDA;AACA;AAJA;;AAUA;;AA0BA;AACA;AAJA;;AAWA;;AAKA;AACA;AACA;AACA;AACA;;;;AAKA;;ACrDA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;;;AAtFA;;;AAmDA;AA8CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAIA","sources":["webpack://lcn-frontend/./src/lcn-entities-data-table.ts","webpack://lcn-frontend/./src/lcn-entities-page.ts"],"sourcesContent":["import \"@ha/components/ha-icon-button\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { mdiDelete } from \"@mdi/js\";\nimport { computeRTLDirection } from \"@ha/common/util/compute_rtl\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { LCN, LcnEntityConfig, deleteEntity, LcnDeviceConfig } from \"types/lcn\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"@ha/components/data-table/ha-data-table\";\n\nexport type EntityRowData = LcnEntityConfig & {\n  delete: LcnEntityConfig;\n};\n\n@customElement(\"lcn-entities-data-table\")\nexport class LCNEntitiesDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public narrow!: boolean;\n\n  @property({ attribute: false }) public device!: LcnDeviceConfig;\n\n  @property({ attribute: false }) public entities: LcnEntityConfig[] = [];\n\n  private _entities = memoizeOne((entities: LcnEntityConfig[]) => {\n    const entityRowData: EntityRowData[] = entities.map((entity) => ({\n      ...entity,\n      delete: entity,\n    }));\n    return entityRowData;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: this.lcn.localize(\"name\"),\n              sortable: true,\n              direction: \"asc\",\n            },\n            delete: {\n              title: \"\",\n              sortable: false,\n              minWidth: \"80px\",\n              template: (entity: LcnEntityConfig) => {\n                const handler = (ev) => this._onEntityDelete(ev, entity);\n                return html`\n                  <ha-icon-button\n                    title=${this.lcn.localize(\"dashboard-entities-table-delete\")}\n                    .path=${mdiDelete}\n                    @click=${handler}\n                  ></ha-icon-button>\n                `;\n              },\n            },\n          }\n        : {\n            name: {\n              title: this.lcn.localize(\"name\"),\n              sortable: true,\n              direction: \"asc\",\n              minWidth: \"35%\",\n            },\n            domain: {\n              title: this.lcn.localize(\"domain\"),\n              sortable: true,\n              minWidth: \"25%\",\n            },\n            resource: {\n              title: this.lcn.localize(\"resource\"),\n              sortable: true,\n              minWidth: \"25%\",\n            },\n            delete: {\n              title: \"\",\n              sortable: false,\n              minWidth: \"80px\",\n              template: (entity: LcnEntityConfig) => {\n                const handler = (ev) => this._onEntityDelete(ev, entity);\n                return html`\n                  <ha-icon-button\n                    title=${this.lcn.localize(\"dashboard-entities-table-delete\")}\n                    .path=${mdiDelete}\n                    @click=${handler}\n                  ></ha-icon-button>\n                `;\n              },\n            },\n          },\n  );\n\n  protected render() {\n    return html`\n      <ha-data-table\n        .hass=${this.hass}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._entities(this.entities) as DataTableRowData[]}\n        .noDataText=${this.lcn.localize(\"dashboard-entities-table-no-data\")}\n        .dir=${computeRTLDirection(this.hass)}\n        auto-height\n        clickable\n      ></ha-data-table>\n    `;\n  }\n\n  private async _onEntityDelete(ev, entity: LcnEntityConfig) {\n    ev.stopPropagation();\n    await deleteEntity(this.hass, this.lcn.config_entry, entity);\n    this.dispatchEvent(\n      new CustomEvent(\"lcn-configuration-changed\", {\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-entities-data-table\": LCNEntitiesDataTable;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { mdiPlus } from \"@mdi/js\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\nimport \"@ha/layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport \"@ha/panels/config/ha-config-section\";\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/components/ha-card\";\nimport \"@ha/components/ha-svg-icon\";\nimport \"@ha/components/ha-fab\";\nimport \"./lcn-entities-data-table\";\nimport {\n  LCN,\n  fetchEntities,\n  fetchDevices,\n  addEntity,\n  LcnDeviceConfig,\n  LcnEntityConfig,\n  LcnAddress,\n} from \"types/lcn\";\nimport { ConfigEntry } from \"@ha/data/config_entries\";\nimport {\n  loadLCNCreateEntityDialog,\n  showLCNCreateEntityDialog,\n} from \"./dialogs/show-dialog-create-entity\";\n\n@customElement(\"lcn-entities-page\")\nexport class LCNEntitiesPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Array, reflect: false }) public tabs: PageNavigation[] = [];\n\n  @state() private _deviceConfig!: LcnDeviceConfig;\n\n  @state() private _entityConfigs: LcnEntityConfig[] = [];\n\n  protected async firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    loadLCNCreateEntityDialog();\n\n    await this._fetchEntities(this.lcn.config_entry, this.lcn.address);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._deviceConfig && this._entityConfigs.length === 0) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${this.tabs}\n      >\n        <span slot=\"header\"> ${this.lcn.localize(\"dashboard-entities-title\")} </span>\n        <ha-config-section .narrow=${this.narrow}>\n          <span slot=\"introduction\"> ${this.renderIntro()} </span>\n\n          <ha-card\n            header=\"${this._deviceConfig.address[2]\n              ? this.lcn.localize(\"dashboard-entities-entities-for-group\")\n              : this.lcn.localize(\"dashboard-entities-entities-for-module\")}:\n              (${this.lcn.config_entry.title}, ${this._deviceConfig.address[0]},\n              ${this._deviceConfig.address[1]})\n              ${this._deviceConfig.name ? \" - \" + this._deviceConfig.name : \"\"}\n            \"\n          >\n            <lcn-entities-data-table\n              .hass=${this.hass}\n              .lcn=${this.lcn}\n              .entities=${this._entityConfigs}\n              .device=${this._deviceConfig}\n              .narrow=${this.narrow}\n              @lcn-configuration-changed=${this._configurationChanged}\n            ></lcn-entities-data-table>\n          </ha-card>\n        </ha-config-section>\n        <ha-fab\n          slot=\"fab\"\n          @click=${this._addEntity}\n          .label=${this.lcn.localize(\"dashboard-entities-add\")}\n          extended\n        >\n          <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private renderIntro(): TemplateResult {\n    return html`\n      <h3>${this.lcn.localize(\"dashboard-entities-introduction\")}</h3>\n      <details>\n        <summary>${this.lcn.localize(\"more-help\")}</summary>\n        <ul>\n          <li>${this.lcn.localize(\"dashboard-entities-introduction-help-1\")}</li>\n          <li>${this.lcn.localize(\"dashboard-entities-introduction-help-2\")}</li>\n          <li>${this.lcn.localize(\"dashboard-entities-introduction-help-3\")}</li>\n          <li>${this.lcn.localize(\"dashboard-entities-introduction-help-4\")}</li>\n          <li>${this.lcn.localize(\"dashboard-entities-introduction-help-5\")}</li>\n        </ul>\n      </details>\n    `;\n  }\n\n  private _configurationChanged() {\n    this._fetchEntities(this.lcn.config_entry, this.lcn.address);\n  }\n\n  private async _fetchEntities(config_entry: ConfigEntry, address: LcnAddress) {\n    const deviceConfigs = await fetchDevices(this.hass!, config_entry);\n    const deviceConfig = deviceConfigs.find(\n      (el) =>\n        el.address[0] === address[0] &&\n        el.address[1] === address[1] &&\n        el.address[2] === address[2],\n    );\n    if (deviceConfig !== undefined) {\n      this._deviceConfig = deviceConfig;\n    }\n    this._entityConfigs = await fetchEntities(this.hass!, config_entry, address);\n  }\n\n  private async _addEntity() {\n    showLCNCreateEntityDialog(this, {\n      lcn: this.lcn,\n      device: <LcnDeviceConfig>this._deviceConfig,\n      createEntity: async (entityParams) => {\n        if (await addEntity(this.hass, this.lcn.config_entry, entityParams)) {\n          await this._fetchEntities(this.lcn.config_entry, this.lcn.address);\n          return true;\n        }\n        return false;\n      },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-entities-page\": LCNEntitiesPage;\n  }\n}\n"],"names":[],"sourceRoot":""}