from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

class namespace: pass

class LogEntryType(int): ...

class device_type(int):
    CPU:'device_type'
    CUDA:'device_type'
    HIP:'device_type'

END:'LogEntryType'
INSERTED:'LogEntryType'
INVALID:'LogEntryType'
STANDALONE:'LogEntryType'
START:'LogEntryType'

class aadStateParametersManager(object):
    def discover_state_parameters(self, offset:int) -> None: ...
    def finalize_aad(self, __a:MutableSequence[float]) -> None: ...
    def get_state_parameters(self, __a:MutableSequence[float]) -> int: ...
    def reset_discovery(self) -> None: ...
    def set_state_parameters(self, __a:Sequence[float]) -> int: ...
    def state_parameters_size(self) -> int: ...
    def update_global_offset(self, offset:int) -> None: ...

class deviceOption(object):
    def type(self) -> 'deviceType': ...

class timeLogEntry(object):
    class LogEntryType(int): ...
    END:'LogEntryType'
    INSERTED:'LogEntryType'
    INVALID:'LogEntryType'
    STANDALONE:'LogEntryType'
    START:'LogEntryType'

class timerLog(object):
    def CleanupLog() -> None: ...
    def DumpLog(filename:str) -> None: ...
    def GetCPUTime() -> float: ...
    def GetElapsedTime(self) -> float: ...
    def GetMaxEntries() -> int: ...
    def GetUniversalTime() -> float: ...
    def InsertTimedEvent(event:str, time:float, cpuTicks:int) -> None: ...
    def LoggingOff() -> None: ...
    def LoggingOn() -> None: ...
    def MarkEndEvent(event:str) -> None: ...
    def MarkEvent(event:str) -> None: ...
    def MarkStartEvent(event:str) -> None: ...
    def ResetLog() -> None: ...
    def SetMaxEntries(a:int) -> None: ...
    def StartTimer(self) -> None: ...
    def StopTimer(self) -> None: ...

