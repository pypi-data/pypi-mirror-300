"use strict";(self.webpackChunkcoml=self.webpackChunkcoml||[]).push([[568],{568:(e,n,o)=>{o.r(n),o.d(n,{default:()=>s});var t=o(658),l=o(607);function c(e,n){const o=e.widgets,t=[];for(let e=0;e<o.length;e++){const l=o[e];"code"===l.model.type&&l.outputArea===n&&t.push(e)}if(1===t.length)return t[0];if(t.length>1){let n=-1;for(const o of t){if(!(-1===n||o<=e.activeCellIndex))break;n=o}return n}return e.activeCell?e.activeCellIndex:-1}function r(e,n){if((null==n?void 0:n.currentWidget)&&n.currentWidget===e.shell.currentWidget)return n.currentWidget.context.sessionContext}function a(e,n){if((null==n?void 0:n.currentWidget)&&n.currentWidget===e.shell.currentWidget)return n.currentWidget.content}function u(e,n,o,t={},l=!0){var c,r,a;null===(c=e.model)||void 0===c||c.sharedModel.insertCell(n+1,{cell_type:"code",metadata:{coml:t},source:o}),e.activeCellIndex=n+1,l&&(null===(a=null===(r=e.activeCell)||void 0===r?void 0:r.editor)||void 0===a||a.focus())}function i(e,n){return n<0?(console.warn(`Invalid current cell index: ${n}.`),null):e.widgets[n].model}const s={id:"coml:plugin",description:"JupyterLab extension for CoML.",autoStart:!0,optional:[t.INotebookTracker],activate:(e,n)=>{l.OutputArea.prototype.nativeOnInputRequest=l.OutputArea.prototype.onInputRequest,l.OutputArea.prototype.onInputRequest=function(o,l){let s=!1;function d(e){s?console.warn("Reply already sent."):(l.sendInputReply({status:"ok",value:e},o.header),s=!0)}try{const m=function(o,l,s){if("insert_cell_below"===l.command){const t=a(e,n);return t?u(t,c(t,o),l.code,l.metadata):console.warn("No notebook found"),""}if("insert_and_execute_cell_below"===l.command){const i=a(e,n),d=r(e,n);if(!i||!d)return console.warn("No notebook or session context found"),"";u(i,c(i,o),l.code,l.metadata,!1),s(""),t.NotebookActions.run(i,d)}else if("last_cell"===l.command){const t=a(e,n);if(t){const e=function(e,n){return n<=0?(console.warn(`Current cell index is ${n}. No last cell found.`),null):e.widgets[n-1].model}(t,c(t,o));if(e)return JSON.stringify(e.toJSON());console.warn("No last cell found")}else console.warn("No notebook found")}else if("running_cell"===l.command){const t=a(e,n);if(t){const e=i(t,c(t,o));if(e)return JSON.stringify(e.toJSON());console.warn("No running cell is found")}else console.warn("No notebook found")}else{if("update_running_cell_metadata"!==l.command)return void console.warn("Invalid command:",l);{const t=a(e,n);if(t){const e=i(t,c(t,o));if(e)return e.setMetadata("coml",l.metadata),"";console.warn("No running cell is found")}else console.warn("No notebook found")}}return""}(this,JSON.parse(o.content.prompt),d);if(void 0===m)return this.nativeOnInputRequest(o,l);s||d(m)}catch(e){return console.log("Not a JSON command",o,e),this.nativeOnInputRequest(o,l)}},e.commands.addCommand("coml:insert_cell_below",{label:"Execute coml:insert_cell_below Command",caption:"Execute coml:insert_cell_below Command",execute:o=>{const t=a(e,n);t?u(t,t.activeCellIndex,o.code,o.metadata):console.warn("No notebook found")}}),e.commands.addCommand("coml:insert_and_execute_cell_below",{label:"Execute coml:insert_and_execute_cell_below Command",caption:"Execute coml:insert_and_execute_cell_below Command",execute:o=>{const l=a(e,n),c=r(e,n);l&&c?(u(l,l.activeCellIndex,o.code,o.metadata),t.NotebookActions.run(l,c)):console.warn("Notebook or session context not found")}})}}}}]);