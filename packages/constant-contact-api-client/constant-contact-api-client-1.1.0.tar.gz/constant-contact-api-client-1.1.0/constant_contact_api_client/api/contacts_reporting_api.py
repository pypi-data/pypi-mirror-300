# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictStr, field_validator

from typing import List, Optional

from constant_contact_api_client.models.get_contact_open_click_rate_report200_response import GetContactOpenClickRateReport200Response
from constant_contact_api_client.models.get_contact_tracking_count_report200_response import GetContactTrackingCountReport200Response
from constant_contact_api_client.models.get_contact_tracking_report200_response import GetContactTrackingReport200Response

from constant_contact_api_client.api_client import ApiClient
from constant_contact_api_client.api_response import ApiResponse
from constant_contact_api_client.rest import RESTResponseType


class ContactsReportingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_contact_open_click_rate_report(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetContactOpenClickRateReport200Response:
        """GET Average Open and Click Rates

        <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_open_click_rate_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactOpenClickRateReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contact_open_click_rate_report_with_http_info(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetContactOpenClickRateReport200Response]:
        """GET Average Open and Click Rates

        <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_open_click_rate_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactOpenClickRateReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contact_open_click_rate_report_without_preload_content(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET Average Open and Click Rates

        <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_open_click_rate_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactOpenClickRateReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contact_open_click_rate_report_serialize(
        self,
        contact_id,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contact_id is not None:
            _path_params['contact_id'] = contact_id
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/contact_reports/{contact_id}/open_and_click_rates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_contact_tracking_count_report(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetContactTrackingCountReport200Response:
        """GET Contact Action Summary

        Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_count_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingCountReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contact_tracking_count_report_with_http_info(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetContactTrackingCountReport200Response]:
        """GET Contact Action Summary

        Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_count_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingCountReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contact_tracking_count_report_without_preload_content(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)")],
        start: Annotated[StrictStr, Field(description="The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.")],
        end: Annotated[StrictStr, Field(description="The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET Contact Action Summary

        Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.

        :param contact_id: The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19) (required)
        :type contact_id: str
        :param start: The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500. (required)
        :type start: str
        :param end: The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500. (required)
        :type end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_count_report_serialize(
            contact_id=contact_id,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingCountReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contact_tracking_count_report_serialize(
        self,
        contact_id,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contact_id is not None:
            _path_params['contact_id'] = contact_id
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/contact_reports/{contact_id}/activity_summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_contact_tracking_report(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact's ID for which tracking activity data is requested.")],
        tracking_activities_list: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        tracking_activity_type: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        include_campaign_activity_names: Annotated[Optional[StrictBool], Field(description="Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetContactTrackingReport200Response:
        """GET Contact Activity Details

        <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan='2'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>

        :param contact_id: The contact's ID for which tracking activity data is requested. (required)
        :type contact_id: str
        :param tracking_activities_list: Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activities_list: List[str]
        :param tracking_activity_type: Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activity_type: List[str]
        :param include_campaign_activity_names: Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.
        :type include_campaign_activity_names: bool
        :param limit: The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_report_serialize(
            contact_id=contact_id,
            tracking_activities_list=tracking_activities_list,
            tracking_activity_type=tracking_activity_type,
            include_campaign_activity_names=include_campaign_activity_names,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contact_tracking_report_with_http_info(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact's ID for which tracking activity data is requested.")],
        tracking_activities_list: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        tracking_activity_type: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        include_campaign_activity_names: Annotated[Optional[StrictBool], Field(description="Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetContactTrackingReport200Response]:
        """GET Contact Activity Details

        <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan='2'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>

        :param contact_id: The contact's ID for which tracking activity data is requested. (required)
        :type contact_id: str
        :param tracking_activities_list: Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activities_list: List[str]
        :param tracking_activity_type: Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activity_type: List[str]
        :param include_campaign_activity_names: Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.
        :type include_campaign_activity_names: bool
        :param limit: The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_report_serialize(
            contact_id=contact_id,
            tracking_activities_list=tracking_activities_list,
            tracking_activity_type=tracking_activity_type,
            include_campaign_activity_names=include_campaign_activity_names,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contact_tracking_report_without_preload_content(
        self,
        contact_id: Annotated[StrictStr, Field(description="The contact's ID for which tracking activity data is requested.")],
        tracking_activities_list: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        tracking_activity_type: Annotated[Optional[List[StrictStr]], Field(description="Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.")] = None,
        include_campaign_activity_names: Annotated[Optional[StrictBool], Field(description="Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET Contact Activity Details

        <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan='2'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>

        :param contact_id: The contact's ID for which tracking activity data is requested. (required)
        :type contact_id: str
        :param tracking_activities_list: Specify one or more tracking activity types to include as a comma-delimited string. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activities_list: List[str]
        :param tracking_activity_type: Specify one or more tracking activity types to include as an array. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.
        :type tracking_activity_type: List[str]
        :param include_campaign_activity_names: Default (`true`) returns campaign activity names in the results. Not including campaign activity names in the results (`false`), is more efficient.
        :type include_campaign_activity_names: bool
        :param limit: The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_tracking_report_serialize(
            contact_id=contact_id,
            tracking_activities_list=tracking_activities_list,
            tracking_activity_type=tracking_activity_type,
            include_campaign_activity_names=include_campaign_activity_names,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactTrackingReport200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contact_tracking_report_serialize(
        self,
        contact_id,
        tracking_activities_list,
        tracking_activity_type,
        include_campaign_activity_names,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tracking_activities_list': 'multi',
            'tracking_activity_type': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contact_id is not None:
            _path_params['contact_id'] = contact_id
        # process the query parameters
        if tracking_activities_list is not None:
            
            _query_params.append(('tracking_activities_list', tracking_activities_list))
            
        if tracking_activity_type is not None:
            
            _query_params.append(('tracking_activity_type', tracking_activity_type))
            
        if include_campaign_activity_names is not None:
            
            _query_params.append(('include_campaign_activity_names', include_campaign_activity_names))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/contact_reports/{contact_id}/activity_details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


