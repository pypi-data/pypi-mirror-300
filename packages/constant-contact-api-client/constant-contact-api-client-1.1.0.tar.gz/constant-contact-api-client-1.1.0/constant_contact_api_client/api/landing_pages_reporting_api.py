# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr

from typing import Optional

from constant_contact_api_client.models.get_contact_adds200_response import GetContactAdds200Response
from constant_contact_api_client.models.get_unique_contact_clicks200_response import GetUniqueContactClicks200Response
from constant_contact_api_client.models.get_unique_contact_opens200_response import GetUniqueContactOpens200Response
from constant_contact_api_client.models.get_unique_contact_sms_opt_ins200_response import GetUniqueContactSMSOptIns200Response
from constant_contact_api_client.models.get_unique_contact_updates200_response import GetUniqueContactUpdates200Response

from constant_contact_api_client.api_client import ApiClient
from constant_contact_api_client.api_response import ApiResponse
from constant_contact_api_client.rest import RESTResponseType


class LandingPagesReportingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_contact_adds(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetContactAdds200Response:
        """GET a Unique Contacts Adds Landing Page Report

        Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_adds_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactAdds200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contact_adds_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetContactAdds200Response]:
        """GET a Unique Contacts Adds Landing Page Report

        Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_adds_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactAdds200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contact_adds_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Unique Contacts Adds Landing Page Report

        Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_adds_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContactAdds200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contact_adds_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_adds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_contact_opens(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUniqueContactOpens200Response:
        """GET a Contacts Opens Landing Page Report

        Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contact_opens_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUniqueContactOpens200Response]:
        """GET a Contacts Opens Landing Page Report

        Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contact_opens_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Contacts Opens Landing Page Report

        Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contact_opens_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_contact_opens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_unique_contact_clicks(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUniqueContactClicks200Response:
        """GET a Unique Contacts Clicks Landing Page Report

        Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_clicks_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactClicks200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_unique_contact_clicks_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUniqueContactClicks200Response]:
        """GET a Unique Contacts Clicks Landing Page Report

        Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_clicks_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactClicks200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_unique_contact_clicks_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Unique Contacts Clicks Landing Page Report

        Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_clicks_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactClicks200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_unique_contact_clicks_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_clicks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_unique_contact_opens(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUniqueContactOpens200Response:
        """GET a Unique Contacts Opens Landing Page Report

        Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_unique_contact_opens_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUniqueContactOpens200Response]:
        """GET a Unique Contacts Opens Landing Page Report

        Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_unique_contact_opens_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Unique Contacts Opens Landing Page Report

        Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_opens_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactOpens200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_unique_contact_opens_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_opens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_unique_contact_sms_opt_ins(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUniqueContactSMSOptIns200Response:
        """GET a Unique Contacts SMS Opt-In Landing Page Report

        Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_sms_opt_ins_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactSMSOptIns200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_unique_contact_sms_opt_ins_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUniqueContactSMSOptIns200Response]:
        """GET a Unique Contacts SMS Opt-In Landing Page Report

        Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_sms_opt_ins_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactSMSOptIns200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_unique_contact_sms_opt_ins_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Unique Contacts SMS Opt-In Landing Page Report

        Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact click results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_sms_opt_ins_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactSMSOptIns200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_unique_contact_sms_opt_ins_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_sms_optins',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_unique_contact_updates(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUniqueContactUpdates200Response:
        """GET a Unique Contacts Updates Landing Page Report

        Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_updates_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactUpdates200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_unique_contact_updates_with_http_info(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUniqueContactUpdates200Response]:
        """GET a Unique Contacts Updates Landing Page Report

        Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_updates_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactUpdates200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_unique_contact_updates_without_preload_content(
        self,
        campaign_activity_id: Annotated[StrictStr, Field(description="The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results.")],
        limit: Annotated[Optional[StrictStr], Field(description="Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.")] = None,
        contacts_filter: Annotated[Optional[StrictStr], Field(description="Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GET a Unique Contacts Updates Landing Page Report

        Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.

        :param campaign_activity_id: The landing page `campaign_activity_id` (UUID's) to use to get unique contact open results. (required)
        :type campaign_activity_id: str
        :param limit: Use to limit the number of contact tracking activities to return on a single page. The default is `50` and the maximum is `500` per page.
        :type limit: str
        :param contacts_filter: Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
        :type contacts_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_unique_contact_updates_serialize(
            campaign_activity_id=campaign_activity_id,
            limit=limit,
            contacts_filter=contacts_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUniqueContactUpdates200Response",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '415': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_unique_contact_updates_serialize(
        self,
        campaign_activity_id,
        limit,
        contacts_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if campaign_activity_id is not None:
            _path_params['campaign_activity_id'] = campaign_activity_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contacts_filter is not None:
            
            _query_params.append(('contacts_filter', contacts_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2_access_code', 
            'oauth2_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_updates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


