# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomFieldResource(BaseModel):
    """
    Custom fields allow Constant Contact users to add custom content to a contact that can be used to personalize emails in addition to the standard set of variables available for email personalization.
    """ # noqa: E501
    custom_field_id: Optional[StrictStr] = Field(default=None, description="The custom_field's unique ID")
    label: Annotated[str, Field(strict=True, max_length=50)] = Field(description="The display name for the custom_field shown in the UI as free-form text")
    name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Unique name for the custom_field constructed from the label by replacing blanks with underscores.")
    type: StrictStr = Field(description="Specifies the type of value the custom_field field accepts: string or date.")
    updated_at: Optional[datetime] = Field(default=None, description="System generated date and time that the resource was updated, in ISO-8601 format.")
    created_at: Optional[datetime] = Field(default=None, description="Date and time that the resource was created, in ISO-8601 format. System generated.")
    __properties: ClassVar[List[str]] = ["custom_field_id", "label", "name", "type", "updated_at", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomFieldResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "custom_field_id",
                "name",
                "updated_at",
                "created_at",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomFieldResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custom_field_id": obj.get("custom_field_id"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


