# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from constant_contact_api_client.models.delete_tag202_response_activity_errors_inner import DeleteTag202ResponseActivityErrorsInner
from constant_contact_api_client.models.delete_tag202_response_links import DeleteTag202ResponseLinks
from constant_contact_api_client.models.delete_tag202_response_status import DeleteTag202ResponseStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ActivityGeneric(BaseModel):
    """
    ActivityGeneric
    """ # noqa: E501
    activity_id: StrictStr = Field(description="The ID that uniquely identifies the activity.")
    state: StrictStr = Field(description="The processing state for the activity.")
    created_at: Optional[datetime] = Field(default=None, description="The system generated date and time that the resource was created, in ISO-8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="The system generated date and time that the resource was last updated, in ISO-8601 format.")
    percent_done: Optional[StrictInt] = Field(default=None, description="The percentage complete for the specified activity.")
    activity_errors: Optional[List[DeleteTag202ResponseActivityErrorsInner]] = Field(default=None, description="An array of error messages if errors occurred for a specified activity. The system returns an empty array if no errors occur.")
    status: Optional[DeleteTag202ResponseStatus] = None
    links: Optional[DeleteTag202ResponseLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["activity_id", "state", "created_at", "updated_at", "percent_done", "activity_errors", "status", "_links"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ActivityGeneric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created_at",
                "updated_at",
                "percent_done",
                "activity_errors",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_errors (list)
        _items = []
        if self.activity_errors:
            for _item in self.activity_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activity_errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ActivityGeneric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity_id": obj.get("activity_id"),
            "state": obj.get("state"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "percent_done": obj.get("percent_done"),
            "activity_errors": [DeleteTag202ResponseActivityErrorsInner.from_dict(_item) for _item in obj.get("activity_errors")] if obj.get("activity_errors") is not None else None,
            "status": DeleteTag202ResponseStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "_links": DeleteTag202ResponseLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None
        })
        return _obj


