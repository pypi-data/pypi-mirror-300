# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from constant_contact_api_client.models.get_all_activities200_response_links import GetAllActivities200ResponseLinks
from constant_contact_api_client.models.get_contact_by_id200_response import GetContactById200Response
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Contacts(BaseModel):
    """
    Use this endpoint to retrieve (GET) a collection of existing contacts, or to create (POST) a new contact.
    """ # noqa: E501
    contacts: Optional[List[GetContactById200Response]] = None
    contacts_count: Optional[StrictInt] = Field(default=None, description="Total number of contacts in the response.")
    links: Optional[GetAllActivities200ResponseLinks] = Field(default=None, alias="_links")
    status: Optional[StrictStr] = Field(default=None, description="If you use the <code>segment_id</code> query parameter to filter results based on a segment, this property indicates that the V3 API accepted your request and is still processing it.")
    __properties: ClassVar[List[str]] = ["contacts", "contacts_count", "_links", "status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Contacts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item in self.contacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Contacts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contacts": [GetContactById200Response.from_dict(_item) for _item in obj.get("contacts")] if obj.get("contacts") is not None else None,
            "contacts_count": obj.get("contacts_count"),
            "_links": GetAllActivities200ResponseLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "status": obj.get("status")
        })
        return _obj


