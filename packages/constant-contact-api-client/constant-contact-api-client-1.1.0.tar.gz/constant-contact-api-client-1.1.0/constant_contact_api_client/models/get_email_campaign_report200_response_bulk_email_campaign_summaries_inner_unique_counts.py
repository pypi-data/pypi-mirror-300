# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts(BaseModel):
    """
    The total number of times each unique contact interacted with a tracked email campaign activity.
    """ # noqa: E501
    sends: StrictInt = Field(description="The total number of unique sends.")
    opens: StrictInt = Field(description="The total number of unique opens.")
    clicks: StrictInt = Field(description="The total number of unique clicks.")
    forwards: StrictInt = Field(description="The total number of unique forwards.")
    optouts: StrictInt = Field(description="The total number of unique optouts (unsubscribes).")
    abuse: StrictInt = Field(description="The total number of unique abuse count (spam).")
    bounces: StrictInt = Field(description="The total number of unique bounce count.")
    not_opened: StrictInt = Field(description="The total number of unique non-opens")
    __properties: ClassVar[List[str]] = ["sends", "opens", "clicks", "forwards", "optouts", "abuse", "bounces", "not_opened"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sends": obj.get("sends"),
            "opens": obj.get("opens"),
            "clicks": obj.get("clicks"),
            "forwards": obj.get("forwards"),
            "optouts": obj.get("optouts"),
            "abuse": obj.get("abuse"),
            "bounces": obj.get("bounces"),
            "not_opened": obj.get("not_opened")
        })
        return _obj


