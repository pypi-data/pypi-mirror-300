# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetAllAccountEmailAddresses200ResponseInner(BaseModel):
    """
    GetAllAccountEmailAddresses200ResponseInner
    """ # noqa: E501
    email_address: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="An email address associated with a Constant Contact account owner.")
    email_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique ID for an email address in a Constant Contact account.")
    confirm_status: Optional[StrictStr] = Field(default=None, description="The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a <code>CONFIRMED</code> status to create an email campaign. ")
    confirm_time: Optional[datetime] = Field(default=None, description="The date that the email address changed to <code>CONFIRMED</code> status in ISO-8601 format.")
    confirm_source_type: Optional[StrictStr] = Field(default=None, description="Describes who confirmed the email address. Valid values are:   <ul>   <li>SITE_OWNER — The Constant Contact account owner confirmed the email address.</li>   <li>SUPPORT — Constant Contact support staff confirmed the email address.</li>   <li>FORCEVERIFY — Constant Contact confirmed the email address without sending a confirmation email.</li>   <li>PARTNER — A Constant Contact partner confirmed the email address.</li>   </ul> ")
    roles: Optional[List[StrictStr]] = Field(default=None, description="Specifies the current role of a confirmed email address in an account. Each email address can have multiple roles or no role. Possible role values are: <ul> <li>CONTACT — The contact email for the Constant Contact account owner. Each account can only have one <code>CONTACT</code> role email.</li> <li>BILLING — The billing address for the Constant Contact account. Each account can only have one <code>BILLING</code> role email.</li> <li>JOURNALING — An email address that Constant Contact forwards all sent email campaigns to as part of the partner journaling compliance feature.</li> <li>REPLY_TO — The contact email used in the email campaign signature. Each account can only have one <code>REPLY_TO</code> role email.</li> <li>OTHER — An email address that does not fit into the other categories.</li> </ul> You can use any confirmed email address in the email campaign <code>from_email</code> and <code>reply_to_email</code> headers. ")
    pending_roles: Optional[List[StrictStr]] = Field(default=None, description="The planned role for an unconfirmed email address. Possible role values are: <ul> <li>CONTACT — The contact email for the Constant Contact account owner. Each account can only have one <code>CONTACT</code> role email.</li> <li>BILLING — The billing address for the Constant Contact account. Each account can only have one <code>BILLING</code> role email.</li> <li>JOURNALING — The email address that Constant Contact forwards all sent email campaigns to as part of the partner journaling compliance feature.</li> <li>REPLY_TO — The contact email used in the email campaign signature. Each account can only have one <code>REPLY_TO</code> role email. </li> <li>OTHER — An email address that does not fit into the other categories.</li> </ul> ")
    __properties: ClassVar[List[str]] = ["email_address", "email_id", "confirm_status", "confirm_time", "confirm_source_type", "roles", "pending_roles"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetAllAccountEmailAddresses200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetAllAccountEmailAddresses200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_address": obj.get("email_address"),
            "email_id": obj.get("email_id"),
            "confirm_status": obj.get("confirm_status"),
            "confirm_time": obj.get("confirm_time"),
            "confirm_source_type": obj.get("confirm_source_type"),
            "roles": obj.get("roles"),
            "pending_roles": obj.get("pending_roles")
        })
        return _obj


