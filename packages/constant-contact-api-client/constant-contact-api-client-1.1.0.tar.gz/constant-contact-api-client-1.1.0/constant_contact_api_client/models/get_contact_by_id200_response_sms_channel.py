# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from constant_contact_api_client.models.get_contact_by_id200_response_sms_channel_sms_channel_consents_inner import GetContactById200ResponseSmsChannelSmsChannelConsentsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetContactById200ResponseSmsChannel(BaseModel):
    """
    Includes SMS channel and consent details.
    """ # noqa: E501
    sms_channel_id: Optional[StrictStr] = Field(default=None, description="The unique ID that identifies an SMS channel.")
    sms_address: Optional[StrictStr] = Field(default=None, description="The phone number of the SMS-capable phone, which does not include the country code.")
    dial_code: Optional[StrictStr] = Field(default=None, description="The dial code used for the SMS-capable phone. For example, the dial code for the United States is <code>1</code>.")
    country_code: Optional[StrictStr] = Field(default=None, description="The two character ISO country code used for the SMS-capable phone. For example, the country code for the United States is <code>US</code>.")
    update_source: Optional[StrictStr] = Field(default=None, description="Identifies who last updated SMS details for the contact. Valid values are Contact or Account")
    create_source: Optional[StrictStr] = Field(default=None, description="Identifies who added SMS details for the contact. The value is set when you create SMS details for the contact. Valid values are <code>Contact</code> or <code>Account</code>. ")
    sms_channel_consents: Optional[List[GetContactById200ResponseSmsChannelSmsChannelConsentsInner]] = Field(default=None, description="Identifies SMS channel consent details such as the current permission status for the SMS channel and opt-in date.")
    __properties: ClassVar[List[str]] = ["sms_channel_id", "sms_address", "dial_code", "country_code", "update_source", "create_source", "sms_channel_consents"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetContactById200ResponseSmsChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sms_channel_consents (list)
        _items = []
        if self.sms_channel_consents:
            for _item in self.sms_channel_consents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sms_channel_consents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetContactById200ResponseSmsChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sms_channel_id": obj.get("sms_channel_id"),
            "sms_address": obj.get("sms_address"),
            "dial_code": obj.get("dial_code"),
            "country_code": obj.get("country_code"),
            "update_source": obj.get("update_source"),
            "create_source": obj.get("create_source"),
            "sms_channel_consents": [GetContactById200ResponseSmsChannelSmsChannelConsentsInner.from_dict(_item) for _item in obj.get("sms_channel_consents")] if obj.get("sms_channel_consents") is not None else None
        })
        return _obj


