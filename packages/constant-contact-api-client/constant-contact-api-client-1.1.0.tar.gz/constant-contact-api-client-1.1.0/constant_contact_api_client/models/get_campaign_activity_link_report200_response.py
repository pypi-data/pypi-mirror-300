# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from constant_contact_api_client.models.get_campaign_activity_link_report200_response_link_click_counts_inner import GetCampaignActivityLinkReport200ResponseLinkClickCountsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCampaignActivityLinkReport200Response(BaseModel):
    """
    GetCampaignActivityLinkReport200Response
    """ # noqa: E501
    campaign_activity_id: Optional[StrictStr] = Field(default=None, description="The unique ID for an email campaign activity.")
    link_click_counts: Optional[List[GetCampaignActivityLinkReport200ResponseLinkClickCountsInner]] = Field(default=None, description="An array of objects that contain the contact click count and link metadata for each unique link URL in an email campaign activity. By default, this method combines results for duplicate link URLs.")
    __properties: ClassVar[List[str]] = ["campaign_activity_id", "link_click_counts"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCampaignActivityLinkReport200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in link_click_counts (list)
        _items = []
        if self.link_click_counts:
            for _item in self.link_click_counts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['link_click_counts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCampaignActivityLinkReport200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign_activity_id": obj.get("campaign_activity_id"),
            "link_click_counts": [GetCampaignActivityLinkReport200ResponseLinkClickCountsInner.from_dict(_item) for _item in obj.get("link_click_counts")] if obj.get("link_click_counts") is not None else None
        })
        return _obj


