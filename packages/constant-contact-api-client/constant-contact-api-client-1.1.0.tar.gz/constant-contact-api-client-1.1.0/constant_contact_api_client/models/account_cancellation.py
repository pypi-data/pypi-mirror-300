# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AccountCancellation(BaseModel):
    """
    Specifies the date and time a client requests to cancel their Constant Contact account and changes the account `billing_status` to `Canceled`. By default, this is the current date and time in ISO format. In the request body, you can optionally specify a future cancellation date (in ISO format) and a reason (`reason_code`) that the client wants to cancel their account.
    """ # noqa: E501
    reason_id: Optional[StrictInt] = Field(default=None, description="Specifies the reason that the client is canceling their Constant Contact account as follows:   <ul>     <li><code>1</code>  Cost Too High</li>     <li><code>2</code>  Using A Competitive Service</li>     <li><code>3</code>  Not Doing Email Marketing</li>     <li><code>11</code> Something Missing Or Not Working </li>     <li><code>12</code> Doing It In-House</li>     <li><code>14</code> Poor Results</li>     <li><code>21</code> Too Difficult To Use</li>     <li><code>27</code> Canceled Online by Customer</li>     <li><code>30</code> Dissatisfied With Billing Policies</li>   </ul>")
    effective_date: Optional[datetime] = Field(default=None, description="The client account cancellation date and time in ISO-8601 format.")
    __properties: ClassVar[List[str]] = ["reason_id", "effective_date"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccountCancellation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AccountCancellation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reason_id": obj.get("reason_id"),
            "effective_date": obj.get("effective_date")
        })
        return _obj


