# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateCSVImportActivity201ResponseStatus(BaseModel):
    """
    CreateCSVImportActivity201ResponseStatus
    """ # noqa: E501
    items_total_count: Optional[StrictInt] = Field(default=None, description="The total number of rows, including the header row, in the import file.")
    person_count: Optional[StrictInt] = Field(default=None, description="The total number of contacts in the import file.")
    error_count: Optional[StrictInt] = Field(default=None, description="The number of non-correctable errors encountered during the file import.")
    correctable_count: Optional[StrictInt] = Field(default=None, description="The number of correctable errors. Correctable errors are: invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.")
    cannot_add_to_list_count: Optional[StrictInt] = Field(default=None, description="The number of previously unsubscribed contacts in the import - they cannot be added to a list.")
    __properties: ClassVar[List[str]] = ["items_total_count", "person_count", "error_count", "correctable_count", "cannot_add_to_list_count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateCSVImportActivity201ResponseStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "items_total_count",
                "person_count",
                "error_count",
                "correctable_count",
                "cannot_add_to_list_count",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateCSVImportActivity201ResponseStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items_total_count": obj.get("items_total_count"),
            "person_count": obj.get("person_count"),
            "error_count": obj.get("error_count"),
            "correctable_count": obj.get("correctable_count"),
            "cannot_add_to_list_count": obj.get("cannot_add_to_list_count")
        })
        return _obj


