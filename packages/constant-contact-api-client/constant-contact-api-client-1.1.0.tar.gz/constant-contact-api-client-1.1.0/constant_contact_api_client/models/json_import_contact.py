# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JsonImportContact(BaseModel):
    """
    JsonImportContact
    """ # noqa: E501
    email: Annotated[str, Field(strict=True, max_length=50)] = Field(description="The email address of the contact. This method identifies each unique contact using their email address.")
    first_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The first name of the contact.")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The last name of the contact.")
    job_title: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The job title of the contact.")
    company_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the company where the contact works.")
    birthday_month: Optional[StrictInt] = Field(default=None, description="The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.")
    birthday_day: Optional[StrictInt] = Field(default=None, description="The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.")
    anniversary: Optional[StrictStr] = Field(default=None, description="The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.")
    phone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact's phone number. Default <code>kind</code> is <code>other</code>.")
    home_phone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The home phone number for the contact.")
    work_phone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The work phone number for the contact.")
    mobile_phone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The mobile phone number for the contact.")
    other_phone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A phone number for the contact.")
    street: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact's street address. The default <code>kind</code> is <code>home</code>. which maps to the <code>street_addresses</code> array` in the response.")
    street2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line two of the primary street address for the contact. This value is automatically appended to the <code>street</code> value. Use this field to add the default kind for line two of the street address to the imported contact's address. The default <code>kind</code> is <code>other</code>.")
    city: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact's home address. The default <code>kind</code> is <code>home</code>.")
    state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact's home address. The default <code>kind</code> is <code>home</code>.")
    zip: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The zip or postal code associated with the contact's primary address. Use this field to add the default kind of zip to the imported contact's street address. The default <code>kind</code> is <code>home</code>.")
    country: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact's street address. The default <code>kind</code> is <code>home</code>.")
    home_street: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line one of the home street address for the contact.")
    home_street2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line two of the home street address for the contact. This value is automatically appended to the <code>home_street</code> value.")
    home_city: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the city where the contact lives.")
    home_state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the home state or province where the contact lives.")
    home_zip: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The zip or postal code associated with the contact's home address.")
    home_country: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the country where the contact lives.", alias="home country")
    work_street: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line one of the work street address for the contact.")
    work_street2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line two of the work street address for the contact. This value is automatically appended to the <code>work_street</code> value.")
    work_city: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the city where the contact works.")
    work_state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the state or province where the contact works.")
    work_zip: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The zip or postal code associated with the contact's work address.")
    work_country: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the country where the contact works.")
    other_street: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line one of the other street address for the contact.")
    other_street2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Line two of the other street address for the contact. This value is automatically appended to the <code>other_street</code> value.")
    other_city: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of another city where the contact is located.")
    other_state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of another state or province where the contact is located.")
    other_zip: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The zip or postal code associated with the contact's other address.")
    other_country: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of another country where the contact is located.")
    cfcustom_field_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with <code>cf:</code>, and the value is a custom field string value. For example, if you have a custom field named <code>first_name</code> you can use <code>\"cf:first_name\":\"Joe\"</code>. Each contact can contain up to 25 different custom fields.", alias="cf:custom_field_name")
    sms_number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="The US phone number to associate with the contact's SMS-enabled phone. The country code must be valid. Valid formats are <code>1231231234</code> or <code>123-123-1234</code>.")
    sms_consent_date: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="Required if the SMS permission is set to `explict`. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY .")
    __properties: ClassVar[List[str]] = ["email", "first_name", "last_name", "job_title", "company_name", "birthday_month", "birthday_day", "anniversary", "phone", "home_phone", "work_phone", "mobile_phone", "other_phone", "street", "street2", "city", "state", "zip", "country", "home_street", "home_street2", "home_city", "home_state", "home_zip", "home country", "work_street", "work_street2", "work_city", "work_state", "work_zip", "work_country", "other_street", "other_street2", "other_city", "other_state", "other_zip", "other_country", "cf:custom_field_name", "sms_number", "sms_consent_date"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JsonImportContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JsonImportContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "job_title": obj.get("job_title"),
            "company_name": obj.get("company_name"),
            "birthday_month": obj.get("birthday_month"),
            "birthday_day": obj.get("birthday_day"),
            "anniversary": obj.get("anniversary"),
            "phone": obj.get("phone"),
            "home_phone": obj.get("home_phone"),
            "work_phone": obj.get("work_phone"),
            "mobile_phone": obj.get("mobile_phone"),
            "other_phone": obj.get("other_phone"),
            "street": obj.get("street"),
            "street2": obj.get("street2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "country": obj.get("country"),
            "home_street": obj.get("home_street"),
            "home_street2": obj.get("home_street2"),
            "home_city": obj.get("home_city"),
            "home_state": obj.get("home_state"),
            "home_zip": obj.get("home_zip"),
            "home country": obj.get("home country"),
            "work_street": obj.get("work_street"),
            "work_street2": obj.get("work_street2"),
            "work_city": obj.get("work_city"),
            "work_state": obj.get("work_state"),
            "work_zip": obj.get("work_zip"),
            "work_country": obj.get("work_country"),
            "other_street": obj.get("other_street"),
            "other_street2": obj.get("other_street2"),
            "other_city": obj.get("other_city"),
            "other_state": obj.get("other_state"),
            "other_zip": obj.get("other_zip"),
            "other_country": obj.get("other_country"),
            "cf:custom_field_name": obj.get("cf:custom_field_name"),
            "sms_number": obj.get("sms_number"),
            "sms_consent_date": obj.get("sms_consent_date")
        })
        return _obj


