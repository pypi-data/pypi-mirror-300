# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from pydantic import Field
from constant_contact_api_client.models.get_email_campaign_report200_response_bulk_email_campaign_summaries_inner_unique_counts import GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BulkEmailCampaignSummary(BaseModel):
    """
    BulkEmailCampaignSummary
    """ # noqa: E501
    campaign_id: StrictStr = Field(description="The ID that uniquely identifies an email campaign.")
    campaign_type: StrictStr = Field(description="Identifies the email campaign type.")
    last_sent_date: datetime = Field(description="The date and time that the email campaign was last sent.")
    unique_counts: GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts
    __properties: ClassVar[List[str]] = ["campaign_id", "campaign_type", "last_sent_date", "unique_counts"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BulkEmailCampaignSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unique_counts
        if self.unique_counts:
            _dict['unique_counts'] = self.unique_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BulkEmailCampaignSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign_id": obj.get("campaign_id"),
            "campaign_type": obj.get("campaign_type"),
            "last_sent_date": obj.get("last_sent_date"),
            "unique_counts": GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts.from_dict(obj.get("unique_counts")) if obj.get("unique_counts") is not None else None
        })
        return _obj


