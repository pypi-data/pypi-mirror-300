# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from constant_contact_api_client.models.get_contact_by_id200_response_custom_fields_inner import GetContactById200ResponseCustomFieldsInner
from constant_contact_api_client.models.get_contact_by_id200_response_email_address import GetContactById200ResponseEmailAddress
from constant_contact_api_client.models.get_contact_by_id200_response_notes_inner import GetContactById200ResponseNotesInner
from constant_contact_api_client.models.get_contact_by_id200_response_phone_numbers_inner import GetContactById200ResponsePhoneNumbersInner
from constant_contact_api_client.models.get_contact_by_id200_response_sms_channel import GetContactById200ResponseSmsChannel
from constant_contact_api_client.models.get_contact_by_id200_response_street_addresses_inner import GetContactById200ResponseStreetAddressesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetContactById200Response(BaseModel):
    """
    Use this endpoint to retrieve (GET), update (PUT), or DELETE an existing contact resource specified using the <code>contact_id</code> path parameter.
    """ # noqa: E501
    contact_id: Optional[StrictStr] = Field(default=None, description="Unique ID for each contact resource")
    email_address: Optional[GetContactById200ResponseEmailAddress] = None
    first_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The first name of the contact.")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The last name of the contact.")
    job_title: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The job title of the contact.")
    company_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the company where the contact works.")
    birthday_month: Optional[StrictInt] = Field(default=None, description="The month value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_month</code>.")
    birthday_day: Optional[StrictInt] = Field(default=None, description="The day value for the contact's birthday. Valid values are from 1 through 12. You must use this property with <code>birthday_day</code>.")
    anniversary: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.")
    update_source: Optional[StrictStr] = Field(default=None, description="Identifies who last updated the contact; valid values are  <code>Contact</code> or <code>Account</code>.")
    create_source: Optional[StrictStr] = Field(default=None, description="Describes who added the contact; valid values are <code>Contact</code> or <code>Account</code>. Your integration must accurately identify <code>create_source</code> for compliance reasons; value is set when contact is created.")
    created_at: Optional[datetime] = Field(default=None, description="System generated date and time that the resource was created, in ISO-8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="System generated date and time that the contact was last updated, in ISO-8601 format.")
    deleted_at: Optional[date] = Field(default=None, description="For deleted contacts (<code>email_address</code> contains <code>opt_out_source</code> and <code>opt_out_date</code>), shows the date of deletion.")
    custom_fields: Optional[Annotated[List[GetContactById200ResponseCustomFieldsInner], Field(max_length=25)]] = Field(default=None, description="Array of up to 25 <code>custom_field</code> subresources.")
    phone_numbers: Optional[Annotated[List[GetContactById200ResponsePhoneNumbersInner], Field(max_length=3)]] = Field(default=None, description="Array of up to 3 <code>phone_numbers</code> subresources.")
    street_addresses: Optional[Annotated[List[GetContactById200ResponseStreetAddressesInner], Field(max_length=3)]] = Field(default=None, description="Array of up to 3 <code>street_addresses</code> subresources.")
    list_memberships: Optional[Annotated[List[StrictStr], Field(max_length=50)]] = Field(default=None, description="Array of up to 50 <code>list_ids</code> to which the contact is subscribed.")
    taggings: Optional[Annotated[List[StrictStr], Field(max_length=50)]] = Field(default=None, description="Array of tags (<code>tag_id</code>) assigned to the contact, up to a maximum of 50.")
    notes: Optional[Annotated[List[GetContactById200ResponseNotesInner], Field(max_length=150)]] = Field(default=None, description="An array of notes about the contact listed by most recent note first.")
    sms_channel: Optional[GetContactById200ResponseSmsChannel] = None
    __properties: ClassVar[List[str]] = ["contact_id", "email_address", "first_name", "last_name", "job_title", "company_name", "birthday_month", "birthday_day", "anniversary", "update_source", "create_source", "created_at", "updated_at", "deleted_at", "custom_fields", "phone_numbers", "street_addresses", "list_memberships", "taggings", "notes", "sms_channel"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetContactById200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "contact_id",
                "created_at",
                "updated_at",
                "deleted_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_address
        if self.email_address:
            _dict['email_address'] = self.email_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item in self.phone_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['phone_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in street_addresses (list)
        _items = []
        if self.street_addresses:
            for _item in self.street_addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['street_addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of sms_channel
        if self.sms_channel:
            _dict['sms_channel'] = self.sms_channel.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetContactById200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact_id": obj.get("contact_id"),
            "email_address": GetContactById200ResponseEmailAddress.from_dict(obj.get("email_address")) if obj.get("email_address") is not None else None,
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "job_title": obj.get("job_title"),
            "company_name": obj.get("company_name"),
            "birthday_month": obj.get("birthday_month"),
            "birthday_day": obj.get("birthday_day"),
            "anniversary": obj.get("anniversary"),
            "update_source": obj.get("update_source"),
            "create_source": obj.get("create_source"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "custom_fields": [GetContactById200ResponseCustomFieldsInner.from_dict(_item) for _item in obj.get("custom_fields")] if obj.get("custom_fields") is not None else None,
            "phone_numbers": [GetContactById200ResponsePhoneNumbersInner.from_dict(_item) for _item in obj.get("phone_numbers")] if obj.get("phone_numbers") is not None else None,
            "street_addresses": [GetContactById200ResponseStreetAddressesInner.from_dict(_item) for _item in obj.get("street_addresses")] if obj.get("street_addresses") is not None else None,
            "list_memberships": obj.get("list_memberships"),
            "taggings": obj.get("taggings"),
            "notes": [GetContactById200ResponseNotesInner.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "sms_channel": GetContactById200ResponseSmsChannel.from_dict(obj.get("sms_channel")) if obj.get("sms_channel") is not None else None
        })
        return _obj


