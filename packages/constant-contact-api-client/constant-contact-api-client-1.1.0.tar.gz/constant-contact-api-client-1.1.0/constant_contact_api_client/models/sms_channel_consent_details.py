# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SmsChannelConsentDetails(BaseModel):
    """
    Provides SMS consent details.
    """ # noqa: E501
    sms_consent_permission: Optional[StrictStr] = Field(default=None, description="Identifies the current permission status for the SMS channel.")
    consent_type: Optional[StrictStr] = None
    opt_in_date: Optional[datetime] = Field(default=None, description="Date and time, in ISO-8601 format, that the contact subscribed/opted-in to receiving SMS from the account. Displays only if the contact subscribes/opts-in. System generated.")
    opt_out_date: Optional[datetime] = Field(default=None, description="Date and time, in ISO-8601 format, that the contact unsubscribed/opted-out of receiving SMS from the account. Displays only if the contact unsubscribed/opted-out. System generated.")
    advertised_frequency: Optional[StrictStr] = Field(default=None, description="The numeric used to set how often to send SMS advertisements during a specified time interval (<code>advertised_interval</code>). For example, if the <code>advertised_frequency</code> is set to <code>2</code> and the  <code>advertised_interval</code> is set to <code>monthly</code>, the contact can receive up to two advertisements per month.")
    advertised_interval: Optional[StrictStr] = Field(default=None, description="Identifies the unit of time used by Constant Contact to send SMS advertisements as a string enum. For example, if the <code>advertised_frequency</code> is set to <code>2</code> and the <code>advertised_interval</code> is set to <code>monthly</code>, the contact can receive up to two advertisements per month.")
    created_at: Optional[datetime] = Field(default=None, description="Date and time that the SMS stats were created, in ISO-8601 format. System generated.")
    updated_at: Optional[datetime] = Field(default=None, description="Date and time that the SMS stats were updated, in ISO-8601 format. System generated.")
    __properties: ClassVar[List[str]] = ["sms_consent_permission", "consent_type", "opt_in_date", "opt_out_date", "advertised_frequency", "advertised_interval", "created_at", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SmsChannelConsentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "opt_in_date",
                "opt_out_date",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SmsChannelConsentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sms_consent_permission": obj.get("sms_consent_permission"),
            "consent_type": obj.get("consent_type"),
            "opt_in_date": obj.get("opt_in_date"),
            "opt_out_date": obj.get("opt_out_date"),
            "advertised_frequency": obj.get("advertised_frequency"),
            "advertised_interval": obj.get("advertised_interval"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


