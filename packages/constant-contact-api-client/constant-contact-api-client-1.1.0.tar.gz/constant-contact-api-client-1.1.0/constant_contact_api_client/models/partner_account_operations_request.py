# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from constant_contact_api_client.models.partner_account_operations_request_account_operation_headers_inner import PartnerAccountOperationsRequestAccountOperationHeadersInner
from constant_contact_api_client.models.partner_account_operations_request_account_operation_path_parameters_inner import PartnerAccountOperationsRequestAccountOperationPathParametersInner
from constant_contact_api_client.models.partner_account_operations_request_account_operation_query_parameters_inner import PartnerAccountOperationsRequestAccountOperationQueryParametersInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PartnerAccountOperationsRequest(BaseModel):
    """
    JSON object that contains the fields Constant Contact uses to construct the HTTP request you are sending on behalf of a managed account.
    """ # noqa: E501
    account_operation_url: StrictStr = Field(description="The API method path for the request you are sending on behalf of a managed child account. This value should be a V3 API URL without the https://api.cc.email/v3 base url and with any path parameter names included. For example: <code>/emails/activities/{campaign_activity_id}</code>.")
    account_operation_method: StrictStr = Field(description="The http method for the request you are sending on behalf of a managed child account.")
    account_operation_payload: Optional[StrictStr] = Field(default=None, description="The request payload for the request you are sending on behalf of a managed child account. If you provide a JSON payload using this parameter, make sure that the JSON is string escaped.")
    account_operation_query_parameters: Optional[List[PartnerAccountOperationsRequestAccountOperationQueryParametersInner]] = Field(default=None, description="An array containing the query parameters for the request you are sending on behalf of a managed child account.")
    account_operation_path_parameters: Optional[List[PartnerAccountOperationsRequestAccountOperationPathParametersInner]] = Field(default=None, description="An array containing the path parameters for the request you are sending on behalf of a managed child account.")
    account_operation_headers: Optional[List[PartnerAccountOperationsRequestAccountOperationHeadersInner]] = Field(default=None, description="An array containing the headers for the request you are sending on behalf of a managed child account.")
    __properties: ClassVar[List[str]] = ["account_operation_url", "account_operation_method", "account_operation_payload", "account_operation_query_parameters", "account_operation_path_parameters", "account_operation_headers"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PartnerAccountOperationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_operation_query_parameters (list)
        _items = []
        if self.account_operation_query_parameters:
            for _item in self.account_operation_query_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['account_operation_query_parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_operation_path_parameters (list)
        _items = []
        if self.account_operation_path_parameters:
            for _item in self.account_operation_path_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['account_operation_path_parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_operation_headers (list)
        _items = []
        if self.account_operation_headers:
            for _item in self.account_operation_headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['account_operation_headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PartnerAccountOperationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_operation_url": obj.get("account_operation_url"),
            "account_operation_method": obj.get("account_operation_method"),
            "account_operation_payload": obj.get("account_operation_payload"),
            "account_operation_query_parameters": [PartnerAccountOperationsRequestAccountOperationQueryParametersInner.from_dict(_item) for _item in obj.get("account_operation_query_parameters")] if obj.get("account_operation_query_parameters") is not None else None,
            "account_operation_path_parameters": [PartnerAccountOperationsRequestAccountOperationPathParametersInner.from_dict(_item) for _item in obj.get("account_operation_path_parameters")] if obj.get("account_operation_path_parameters") is not None else None,
            "account_operation_headers": [PartnerAccountOperationsRequestAccountOperationHeadersInner.from_dict(_item) for _item in obj.get("account_operation_headers")] if obj.get("account_operation_headers") is not None else None
        })
        return _obj


