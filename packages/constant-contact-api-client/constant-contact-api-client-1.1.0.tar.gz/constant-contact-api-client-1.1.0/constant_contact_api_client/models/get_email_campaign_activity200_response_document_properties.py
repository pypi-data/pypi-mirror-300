# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetEmailCampaignActivity200ResponseDocumentProperties(BaseModel):
    """
    An object that contains optional properties for legacy format type emails (<code>format_type</code> 1 and 2). If you attempt to add a property that does apply to the email <code>format_type</code>, the API will ignore the property.
    """ # noqa: E501
    style_content: Optional[Annotated[str, Field(strict=True, max_length=150000)]] = Field(default=None, description="Contains style sheet elements for XHTML letter format emails. This property applies only to <code>format_type</code> 1.")
    letter_format: Optional[StrictStr] = Field(default='HTML', description="Email message format. Valid values are <code>HTML</code> and <code>XHTML</code>. By default, the value is <code>HTML</code>. For more information, see the <a href=\"http://www.constantcontact.com/display_media.jsp?id=87\" target=\"_blank\">Advanced Editor User's Guide</a>. This property applies only to <code>format_type</code> 1. You cannot change this property after you create an email. ")
    greeting_salutation: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The greeting used in the email message. This property applies only to <code>format_type</code> 1.")
    greeting_name_type: Optional[StrictStr] = Field(default='N', description="The type of name the campaign uses to greet the contact. Valid values are <code>F</code> (First Name), <code>L</code> (Last Name), <code>B</code> (First and Last Name), or <code>N</code> (No greeting). By default, the value is <code>N</code>. This property applies only to <code>format_type</code> 1.")
    greeting_secondary: Optional[Annotated[str, Field(strict=True, max_length=1500)]] = Field(default=None, description="A fallback text string the campaign uses to greet the contact when the <code>greeting_name_type</code> is not available or set to <code>N</code>. This property applies only to <code>format_type</code> 1.")
    subscribe_link_enabled: Optional[StrictStr] = Field(default='false', description="If <code>true</code>, the email footer includes a link for subscribing to the list. If <code>false</code>, the message footer does not include a link for subscribing to the list. By default, the value is <code>false</code>. This property applies only to <code>format_type</code> 1. ")
    subscribe_link_name: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="The text displayed as the name for the subscribe link in the email footer. This property applies only to <code>format_type</code> 1.")
    text_content: Optional[Annotated[str, Field(strict=True, max_length=150000)]] = Field(default=None, description="Contains the text content that Constant Contact displays to contacts when their email client cannot display HTML email. If you do not specify text content, Constant Contact displays \"Greetings!\" as the text content. This property applies only to <code>format_type</code> 1. ")
    permission_reminder_enabled: Optional[StrictStr] = Field(default='false', description="If <code>true</code>, Constant Contact displays your <code>permission_reminder</code> message to contacts at top of the email. If <code>false</code>, Constant Contact does not display the message. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2. ")
    permission_reminder: Optional[Annotated[str, Field(strict=True, max_length=1500)]] = Field(default=None, description="The message text Constant Contact displays at the top of the email message to remind users that they are subscribed to an email list. This property applies to <code>format_type</code> 1 and 2.")
    view_as_webpage_enabled: Optional[StrictStr] = Field(default='false', description="If <code>true</code>, Constant Contact displays the view as web page email message. If <code>false</code> Constant Contact does not display the message. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2. ")
    view_as_webpage_text: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The text Constant Contact displays before the view as web page link at the top of the email. This property applies to <code>format_type</code> 1 and 2.")
    view_as_webpage_link_name: Optional[StrictStr] = Field(default=None, description="The name of the link that users can click to view the email as a web page. This property applies to <code>format_type</code> 1 and 2.")
    forward_email_link_enabled: Optional[StrictStr] = Field(default='false', description="If <code>true</code>, when the user forwards an email message the footer includes a link for subscribing to the list. If <code>false</code>, when a user forwards an email message the footer does not include a link for subscribing to the list. By default, the value is <code>false</code>. This property applies to <code>format_type</code> 1 and 2. ")
    forward_email_link_name: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="The text displayed as the name for the forward email link in the footer when a user forwards an email. This property applies to <code>format_type</code> 1 and 2.")
    __properties: ClassVar[List[str]] = ["style_content", "letter_format", "greeting_salutation", "greeting_name_type", "greeting_secondary", "subscribe_link_enabled", "subscribe_link_name", "text_content", "permission_reminder_enabled", "permission_reminder", "view_as_webpage_enabled", "view_as_webpage_text", "view_as_webpage_link_name", "forward_email_link_enabled", "forward_email_link_name"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetEmailCampaignActivity200ResponseDocumentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "letter_format",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetEmailCampaignActivity200ResponseDocumentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "style_content": obj.get("style_content"),
            "letter_format": obj.get("letter_format") if obj.get("letter_format") is not None else 'HTML',
            "greeting_salutation": obj.get("greeting_salutation"),
            "greeting_name_type": obj.get("greeting_name_type") if obj.get("greeting_name_type") is not None else 'N',
            "greeting_secondary": obj.get("greeting_secondary"),
            "subscribe_link_enabled": obj.get("subscribe_link_enabled") if obj.get("subscribe_link_enabled") is not None else 'false',
            "subscribe_link_name": obj.get("subscribe_link_name"),
            "text_content": obj.get("text_content"),
            "permission_reminder_enabled": obj.get("permission_reminder_enabled") if obj.get("permission_reminder_enabled") is not None else 'false',
            "permission_reminder": obj.get("permission_reminder"),
            "view_as_webpage_enabled": obj.get("view_as_webpage_enabled") if obj.get("view_as_webpage_enabled") is not None else 'false',
            "view_as_webpage_text": obj.get("view_as_webpage_text"),
            "view_as_webpage_link_name": obj.get("view_as_webpage_link_name"),
            "forward_email_link_enabled": obj.get("forward_email_link_enabled") if obj.get("forward_email_link_enabled") is not None else 'false',
            "forward_email_link_name": obj.get("forward_email_link_name")
        })
        return _obj


