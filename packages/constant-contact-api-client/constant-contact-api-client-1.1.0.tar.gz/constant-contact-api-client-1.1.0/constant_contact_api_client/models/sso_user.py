# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SSOUser(BaseModel):
    """
    Specify client account user's details. All fields are required.
    """ # noqa: E501
    first_name: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The client account user's first name.")
    last_name: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The client account user's last name.")
    role_name: StrictStr = Field(description="The role (<code>account_manager</code> or <code>campaign_creator</code>) to assign the client account user.")
    contact_email: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The unique email address to associate with the new client account user.")
    login_name: Annotated[str, Field(strict=True, max_length=50)] = Field(description="The login name to associate with the new client account user.")
    external_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The unique ID used to identify the client account user to the external authenticator. ")
    external_provider: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The unique name used to identify the external provider used to authenticate the client account user. For a list of external providers, contact the Constant Contact Partner Team.")
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "role_name", "contact_email", "login_name", "external_id", "external_provider"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SSOUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SSOUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "role_name": obj.get("role_name"),
            "contact_email": obj.get("contact_email"),
            "login_name": obj.get("login_name"),
            "external_id": obj.get("external_id"),
            "external_provider": obj.get("external_provider")
        })
        return _obj


