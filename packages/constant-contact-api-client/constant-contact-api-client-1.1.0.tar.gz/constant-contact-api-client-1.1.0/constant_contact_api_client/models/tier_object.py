# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TierObject(BaseModel):
    """
    The usage tier that is associated with a client's Constant Contact account and is used to calculate the monthly billing price.
    """ # noqa: E501
    usage_type: Optional[StrictStr] = Field(default='CONTACTS', description="Identifies the tier usage type that is associated with the billing plan.")
    current_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of active contacts (default) used within the current tier.")
    tier: Optional[StrictInt] = Field(default=None, description="The billing tier level that is associated with a client account. By default, the system determines the tier level to use based on the number of active contacts currently in the client account at the time of billing. Billing tiers may differ. The following shows an example billing tier: <ul>   <li>level <code>1</code> = 0 - 500 contacts</li>   <li>level <code>2</code> = 501 - 1000 contacts</li>   <li>level <code>3</code> = 1001 - ...</li> </ul>")
    tier_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum number of active contacts for the tier level.")
    tier_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum number of active contacts for the tier level.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The billing price set for the tier used to bill the client account each month.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency (ISO currency code) used to price the tier for a client account.")
    __properties: ClassVar[List[str]] = ["usage_type", "current_usage", "tier", "tier_min", "tier_max", "price", "currency_code"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TierObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "usage_type",
                "current_usage",
                "tier",
                "tier_min",
                "tier_max",
                "price",
                "currency_code",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TierObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usage_type": obj.get("usage_type") if obj.get("usage_type") is not None else 'CONTACTS',
            "current_usage": obj.get("current_usage"),
            "tier": obj.get("tier"),
            "tier_min": obj.get("tier_min"),
            "tier_max": obj.get("tier_max"),
            "price": obj.get("price"),
            "currency_code": obj.get("currency_code")
        })
        return _obj


