# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateListRemoveActivityRequestSource(BaseModel):
    """
    Specifies the contacts to remove from your target list(s) using one of several mutually exclusive properties.
    """ # noqa: E501
    list_ids: Optional[Annotated[List[StrictStr], Field(max_length=0)]] = Field(default=None, description="Include up to 50 <code>list_id</code> values to remove all contact list members from your target list(s). This property is mutually exclusive with all other <code>source</code> properties.")
    contact_ids: Optional[Annotated[List[StrictStr], Field(max_length=0)]] = Field(default=None, description="Include up to 500 <code>contact_id</code> values to remove the contacts from your target lists. This property is mutually exclusive with all other <code>source</code> properties.")
    all_active_contacts: Optional[StrictBool] = Field(default=False, description="Removes all active (billable) contacts from your targeted lists. This property is mutually exclusive with all other <code>source</code> properties.")
    engagement_level: Optional[StrictStr] = Field(default=None, description="Removes all contacts that meet the selected  <code>engagement_level </code> to your target lists. This property is mutually exclusive with all other <code>source</code> properties.")
    tag_ids: Optional[Annotated[List[StrictStr], Field(max_length=0)]] = Field(default=None, description="Removes all contacts assigned with the specified <code>tag_id</code>s from your target lists. This property is mutually exclusive with all other <code>source</code> properties.")
    __properties: ClassVar[List[str]] = ["list_ids", "contact_ids", "all_active_contacts", "engagement_level", "tag_ids"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateListRemoveActivityRequestSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateListRemoveActivityRequestSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "list_ids": obj.get("list_ids"),
            "contact_ids": obj.get("contact_ids"),
            "all_active_contacts": obj.get("all_active_contacts") if obj.get("all_active_contacts") is not None else False,
            "engagement_level": obj.get("engagement_level"),
            "tag_ids": obj.get("tag_ids")
        })
        return _obj


