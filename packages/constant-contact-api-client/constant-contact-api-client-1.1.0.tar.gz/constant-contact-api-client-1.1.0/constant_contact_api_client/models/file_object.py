# coding: utf-8

"""
    Constant Contact API v3

    Swagger build version 3.0.2475

    The version of the OpenAPI document: 1.0.117
    Contact: webservices@constantcontact.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from constant_contact_api_client.models.my_library_file_collection_inner_thumbnail import MyLibraryFileCollectionInnerThumbnail
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FileObject(BaseModel):
    """
    FileObject
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Identifies the MyLibrary file.")
    name: Optional[StrictStr] = Field(default=None, description="The file name.")
    height: Optional[StrictInt] = Field(default=None, description="The image height.")
    width: Optional[StrictInt] = Field(default=None, description="The image width.")
    size: Optional[StrictInt] = Field(default=None, description="The image size.")
    url: Optional[StrictStr] = Field(default=None, description="The image URL.")
    description: Optional[StrictStr] = Field(default=None, description="The image description.")
    folder: Optional[StrictStr] = Field(default=None, description="The image folder")
    source: Optional[StrictStr] = Field(default=None, description="The application that uploaded this image.")
    type: Optional[StrictStr] = Field(default=None, description="The image format.")
    status: Optional[StrictStr] = Field(default=None, description="THe image status.")
    thumbnail: Optional[MyLibraryFileCollectionInnerThumbnail] = None
    image: Optional[StrictBool] = Field(default=None, description="Boolean indicating if this file is an image.")
    folder_id: Optional[StrictInt] = Field(default=None, description="Identifies a folder in MyLibrary.")
    external_url: Optional[StrictStr] = Field(default=None, description="The external url for the file.")
    modified_date: Optional[StrictStr] = Field(default=None, description="Identifies the time a user last modified the file.")
    added_date: Optional[StrictStr] = Field(default=None, description="Identifies the time a user originally added the file to MyLibrary.")
    external_file_id: Optional[StrictStr] = Field(default=None, description="External identifier for the file.")
    __properties: ClassVar[List[str]] = ["id", "name", "height", "width", "size", "url", "description", "folder", "source", "type", "status", "thumbnail", "image", "folder_id", "external_url", "modified_date", "added_date", "external_file_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "size": obj.get("size"),
            "url": obj.get("url"),
            "description": obj.get("description"),
            "folder": obj.get("folder"),
            "source": obj.get("source"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "thumbnail": MyLibraryFileCollectionInnerThumbnail.from_dict(obj.get("thumbnail")) if obj.get("thumbnail") is not None else None,
            "image": obj.get("image"),
            "folder_id": obj.get("folder_id"),
            "external_url": obj.get("external_url"),
            "modified_date": obj.get("modified_date"),
            "added_date": obj.get("added_date"),
            "external_file_id": obj.get("external_file_id")
        })
        return _obj


