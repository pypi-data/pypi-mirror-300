# coding: utf-8

"""
    Artifact Client API

    API for interacting with the Artifact Client.

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import re  # noqa: F401
import json
import pprint
from typing import Any, Set, Dict, List, Union, ClassVar, Optional
from datetime import datetime
from typing_extensions import Self, Annotated

from pydantic import Field, BaseModel, StrictStr, ConfigDict, field_validator

from .invocation_breakdown import InvocationBreakdown


class OperationLog(BaseModel):
    """
    OperationLog
    """  # noqa: E501

    op_type: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    duration: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = (
        None
    )
    llm: Optional[StrictStr] = None
    tokens: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    llm_breakdown: Optional[List[InvocationBreakdown]] = None
    io_units: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = [
        "op_type",
        "timestamp",
        "duration",
        "llm",
        "tokens",
        "llm_breakdown",
        "io_units",
    ]

    @field_validator("op_type")
    def op_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["index", "query"]):
            raise ValueError("must be one of enum values ('index', 'query')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in llm_breakdown (list)
        _items = []
        if self.llm_breakdown:
            for _item in self.llm_breakdown:
                if _item:
                    _items.append(_item.to_dict())
            _dict["llm_breakdown"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "op_type": obj.get("op_type"),
                "timestamp": obj.get("timestamp"),
                "duration": obj.get("duration"),
                "llm": obj.get("llm"),
                "tokens": obj.get("tokens"),
                "llm_breakdown": (
                    [InvocationBreakdown.from_dict(_item) for _item in obj["llm_breakdown"]]
                    if obj.get("llm_breakdown") is not None
                    else None
                ),
                "io_units": obj.get("io_units"),
            }
        )
        return _obj
