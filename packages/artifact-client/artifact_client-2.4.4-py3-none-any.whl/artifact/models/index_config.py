# coding: utf-8

"""
    Artifact Client API

    API for interacting with the Artifact Client.

    The version of the OpenAPI document: 2.4.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import re  # noqa: F401
import json
import pprint
from typing import Any, Set, Dict, List, ClassVar, Optional
from typing_extensions import Self

from pydantic import BaseModel, StrictStr, ConfigDict, field_validator


class IndexConfig(BaseModel):
    """
    IndexConfig
    """  # noqa: E501

    llm_model: Optional[StrictStr] = None
    entity_types: Optional[List[StrictStr]] = None
    entity_strategy: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["llm_model", "entity_types", "entity_strategy"]

    @field_validator("llm_model")
    def llm_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["MINI", "GENERAL", "ENTITIES_V1", "STEP"]):
            raise ValueError("must be one of enum values ('MINI', 'GENERAL', 'ENTITIES_V1', 'STEP')")
        return value

    @field_validator("entity_types")
    def entity_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(
                [
                    "PERSON",
                    "ORGANIZATION",
                    "EVENT",
                    "LOCATION",
                    "DATE",
                    "PRODUCT",
                    "DOCUMENT",
                    "LEGAL ENTITY",
                    "FINANCIAL INSTRUMENT",
                    "CONCEPT",
                    "MEDICAL CONDITION",
                    "CHEMICAL SUBSTANCE",
                    "TECHNOLOGY",
                    "SERVICE",
                    "PROJECT",
                    "ROLE",
                    "ARTIFACT",
                    "LANGUAGE",
                    "METRIC",
                    "PROCEDURE",
                    "GEOPOLITICAL ENTITY",
                    "CURRENCY",
                    "MATERIAL",
                    "VEHICLE",
                    "WEAPON",
                    "INFRASTRUCTURE",
                    "PLANT SPECIES",
                    "ANIMAL SPECIES",
                    "FOOD AND BEVERAGE",
                    "SOFTWARE APPLICATION",
                    "EMOTION",
                    "SENTIMENT",
                ]
            ):
                raise ValueError(
                    "each list item must be one of ('PERSON', 'ORGANIZATION', 'EVENT', 'LOCATION', 'DATE', 'PRODUCT', 'DOCUMENT', 'LEGAL ENTITY', 'FINANCIAL INSTRUMENT', 'CONCEPT', 'MEDICAL CONDITION', 'CHEMICAL SUBSTANCE', 'TECHNOLOGY', 'SERVICE', 'PROJECT', 'ROLE', 'ARTIFACT', 'LANGUAGE', 'METRIC', 'PROCEDURE', 'GEOPOLITICAL ENTITY', 'CURRENCY', 'MATERIAL', 'VEHICLE', 'WEAPON', 'INFRASTRUCTURE', 'PLANT SPECIES', 'ANIMAL SPECIES', 'FOOD AND BEVERAGE', 'SOFTWARE APPLICATION', 'EMOTION', 'SENTIMENT')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "llm_model": obj.get("llm_model"),
                "entity_types": obj.get("entity_types"),
                "entity_strategy": obj.get("entity_strategy"),
            }
        )
        return _obj
