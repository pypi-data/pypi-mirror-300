# coding: utf-8

"""
    Artifact Client API

    API for interacting with the Artifact Client.

    The version of the OpenAPI document: 2.4.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import re  # noqa: F401
import json
import pprint
from typing import Any, Set, Dict, List, Union, ClassVar, Optional
from datetime import datetime
from typing_extensions import Self, Annotated

from pydantic import Field, BaseModel, StrictInt, ConfigDict, StrictFloat


class UsageReport(BaseModel):
    """
    UsageReport
    """  # noqa: E501

    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    total_document_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_index_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_query_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_index_tokens: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_query_tokens: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_write_units: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_read_units: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    total_index_cost: Optional[Union[StrictFloat, StrictInt]] = None
    total_query_cost: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "start_time",
        "end_time",
        "total_document_count",
        "total_index_count",
        "total_query_count",
        "total_index_tokens",
        "total_query_tokens",
        "total_write_units",
        "total_read_units",
        "total_index_cost",
        "total_query_cost",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "start_time": obj.get("start_time"),
                "end_time": obj.get("end_time"),
                "total_document_count": obj.get("total_document_count"),
                "total_index_count": obj.get("total_index_count"),
                "total_query_count": obj.get("total_query_count"),
                "total_index_tokens": obj.get("total_index_tokens"),
                "total_query_tokens": obj.get("total_query_tokens"),
                "total_write_units": obj.get("total_write_units"),
                "total_read_units": obj.get("total_read_units"),
                "total_index_cost": obj.get("total_index_cost"),
                "total_query_cost": obj.get("total_query_cost"),
            }
        )
        return _obj
