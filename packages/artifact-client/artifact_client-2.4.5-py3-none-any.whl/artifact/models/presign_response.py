# coding: utf-8

"""
    Artifact Client API

    API for interacting with the Artifact Client.

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import re  # noqa: F401
import json
import pprint
from typing import Any, Set, Dict, List, ClassVar, Optional
from typing_extensions import Self

from pydantic import BaseModel, StrictStr, ConfigDict

from .document_meta import DocumentMeta


class PresignResponse(BaseModel):
    """
    PresignResponse
    """  # noqa: E501

    message: Optional[StrictStr] = None
    document: Optional[DocumentMeta] = None
    presigned_url: StrictStr
    __properties: ClassVar[List[str]] = ["message", "document", "presigned_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresignResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict["document"] = self.document.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresignResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "message": obj.get("message"),
                "document": DocumentMeta.from_dict(obj["document"]) if obj.get("document") is not None else None,
                "presigned_url": obj.get("presigned_url"),
            }
        )
        return _obj
