# coding: utf-8

"""
    Artifact Client API

    API for interacting with the Artifact Client.

    The version of the OpenAPI document: 2.4.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import re  # noqa: F401
import json
import pprint
from typing import Any, Set, Dict, List, ClassVar, Optional
from datetime import datetime
from typing_extensions import Self, Annotated

from pydantic import Field, BaseModel, StrictStr, ConfigDict, field_validator

from .index_config import IndexConfig
from .document_meta import DocumentMeta


class Graph(BaseModel):
    """
    Graph
    """  # noqa: E501

    name: Annotated[str, Field(strict=True)]
    created_at: Optional[datetime] = None
    document_ids: Optional[List[StrictStr]] = None
    documents: Optional[List[DocumentMeta]] = None
    edge_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    host: Optional[StrictStr] = None
    index_failure_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    index_interval: Optional[StrictStr] = None
    index_config: Optional[IndexConfig] = None
    merged_graphml_url: Optional[StrictStr] = None
    node_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    organization_uuid: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    summarized_graphml_url: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "created_at",
        "document_ids",
        "documents",
        "edge_count",
        "host",
        "index_failure_count",
        "index_interval",
        "index_config",
        "merged_graphml_url",
        "node_count",
        "organization_uuid",
        "status",
        "summarized_graphml_url",
        "updated_at",
        "uuid",
    ]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Graph from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict["documents"] = _items
        # override the default output from pydantic by calling `to_dict()` of index_config
        if self.index_config:
            _dict["index_config"] = self.index_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Graph from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "created_at": obj.get("created_at"),
                "document_ids": obj.get("document_ids"),
                "documents": (
                    [DocumentMeta.from_dict(_item) for _item in obj["documents"]]
                    if obj.get("documents") is not None
                    else None
                ),
                "edge_count": obj.get("edge_count"),
                "host": obj.get("host"),
                "index_failure_count": obj.get("index_failure_count"),
                "index_interval": obj.get("index_interval"),
                "index_config": (
                    IndexConfig.from_dict(obj["index_config"]) if obj.get("index_config") is not None else None
                ),
                "merged_graphml_url": obj.get("merged_graphml_url"),
                "node_count": obj.get("node_count"),
                "organization_uuid": obj.get("organization_uuid"),
                "status": obj.get("status"),
                "summarized_graphml_url": obj.get("summarized_graphml_url"),
                "updated_at": obj.get("updated_at"),
                "uuid": obj.get("uuid"),
            }
        )
        return _obj
