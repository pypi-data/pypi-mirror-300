"""Message types for agent-LLM communication in the FlexAI framework."""

from __future__ import annotations
from dataclasses import dataclass
from typing import Any, Literal


Role = Literal["user", "assistant"]


@dataclass(kw_only=True)
class Message:
    """Base class for all message types in the conversation flow."""

    # The role of the message (user or assistant).
    role: Role

    # The content of the message.
    content: str | list[MessageContent]


@dataclass(kw_only=True)
class SystemMessage(Message):
    """A top level system message."""

    role: Role = "system"


@dataclass(kw_only=True)
class UserMessage(Message):
    """A message sent by a user."""

    role: Role = "user"


@dataclass(kw_only=True)
class AIMessage(Message):
    """A message generated by the AI."""

    role: Role = "assistant"

    # Token usage for the input that generated this output
    input_tokens: int = 0

    # Token usage to generate this output
    output_tokens: int = 0


@dataclass(kw_only=True)
class MessageContent:
    pass


@dataclass(kw_only=True)
class ToolCall(MessageContent):
    """A tool call message sent by the agent."""

    # A unique identifier for the tool call.
    id: str

    # The name of the tool to call.
    name: str

    # The input parameters for the tool.
    input: Any


@dataclass(kw_only=True)
class ToolResult(MessageContent):
    """A tool result message created after invoking a tool."""

    # The associated tool call identifier.
    tool_call_id: str

    # The result of the tool invocation.
    result: Any

    # The execution time of the tool invocation.
    execution_time: float = 0.0

    # Whether an error occurred during invocation.
    is_error: bool = False
