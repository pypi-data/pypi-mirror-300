Metadata-Version: 2.1
Name: generic-request-signer
Version: 2.0.1
Summary: A python library for signing http requests.
Home-page: https://github.com/imtapps/generic-request-signer
Author: imtapps
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Internet
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Libraries :: Python Modules
License-File: LICENSE
Requires-Dist: apysigner==3.0.2; python_version < "3.0"
Requires-Dist: apysigner<4.1,>=3.0.2; python_version > "3.0"
Requires-Dist: six<2,>=1.10.0
Requires-Dist: django<5.2,>=1.11

I simple utility to sign http requests given some private key

To run the python tests

1. pip install -r requirements/test.txt
2. nosetests

To run the example using flask

1. pip install -r requirements/example.txt
2. python app.py
3. open a browser and point to http://localhost:5000/

After you invoke the GET request above you should see a request in the terminal

GET /verify?__client_id=example&username=foo&password=bar&__signature=somestrangestuffhere

This shows the client in action but at this time our example does not truly verify the signed request
